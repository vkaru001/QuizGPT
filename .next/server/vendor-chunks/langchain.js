"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langchain";
exports.ids = ["vendor-chunks/langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/api/api_chain.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIChain: () => (/* binding */ APIChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/api/prompts.js\");\n\n\n\n/**\n * Class that extends BaseChain and represents a chain specifically\n * designed for making API requests and processing API responses.\n */ class APIChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    get inputKeys() {\n        return [\n            this.inputKey\n        ];\n    }\n    get outputKeys() {\n        return [\n            this.outputKey\n        ];\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"apiAnswerChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiRequestChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiDocs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"question\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        this.apiRequestChain = fields.apiRequestChain;\n        this.apiAnswerChain = fields.apiAnswerChain;\n        this.apiDocs = fields.apiDocs;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.headers = fields.headers ?? this.headers;\n    }\n    /** @ignore */ async _call(values, runManager) {\n        const question = values[this.inputKey];\n        const api_url = await this.apiRequestChain.predict({\n            question,\n            api_docs: this.apiDocs\n        }, runManager?.getChild(\"request\"));\n        const res = await fetch(api_url, {\n            headers: this.headers\n        });\n        const api_response = await res.text();\n        const answer = await this.apiAnswerChain.predict({\n            question,\n            api_docs: this.apiDocs,\n            api_url,\n            api_response\n        }, runManager?.getChild(\"response\"));\n        return {\n            [this.outputKey]: answer\n        };\n    }\n    _chainType() {\n        return \"api_chain\";\n    }\n    static async deserialize(data) {\n        const { api_request_chain, api_answer_chain, api_docs } = data;\n        if (!api_request_chain) {\n            throw new Error(\"LLMChain must have api_request_chain\");\n        }\n        if (!api_answer_chain) {\n            throw new Error(\"LLMChain must have api_answer_chain\");\n        }\n        if (!api_docs) {\n            throw new Error(\"LLMChain must have api_docs\");\n        }\n        return new APIChain({\n            apiAnswerChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain.deserialize(api_answer_chain),\n            apiRequestChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain.deserialize(api_request_chain),\n            apiDocs: api_docs\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            api_answer_chain: this.apiAnswerChain.serialize(),\n            api_request_chain: this.apiRequestChain.serialize(),\n            api_docs: this.apiDocs\n        };\n    }\n    /**\n     * Static method to create a new APIChain from a BaseLanguageModel and API\n     * documentation.\n     * @param llm BaseLanguageModel instance.\n     * @param apiDocs API documentation.\n     * @param options Optional configuration options for the APIChain.\n     * @returns New APIChain instance.\n     */ static fromLLMAndAPIDocs(llm, apiDocs, options = {}) {\n        const { apiUrlPrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_2__.API_URL_PROMPT_TEMPLATE, apiResponsePrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_2__.API_RESPONSE_PROMPT_TEMPLATE } = options;\n        const apiRequestChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({\n            prompt: apiUrlPrompt,\n            llm\n        });\n        const apiAnswerChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({\n            prompt: apiResponsePrompt,\n            llm\n        });\n        return new this({\n            apiAnswerChain,\n            apiRequestChain,\n            apiDocs,\n            ...options\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FwaS9hcGlfY2hhaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1QztBQUNJO0FBQzJDO0FBQ3RGOzs7Q0FHQyxHQUNNLE1BQU1JLGlCQUFpQkosK0NBQVNBO0lBQ25DLElBQUlLLFlBQVk7UUFDWixPQUFPO1lBQUMsSUFBSSxDQUFDQyxRQUFRO1NBQUM7SUFDMUI7SUFDQSxJQUFJQyxhQUFhO1FBQ2IsT0FBTztZQUFDLElBQUksQ0FBQ0MsU0FBUztTQUFDO0lBQzNCO0lBQ0FDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCO1lBQzFDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sQ0FBQztRQUNaO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDQyxlQUFlLEdBQUdQLE9BQU9PLGVBQWU7UUFDN0MsSUFBSSxDQUFDQyxjQUFjLEdBQUdSLE9BQU9RLGNBQWM7UUFDM0MsSUFBSSxDQUFDQyxPQUFPLEdBQUdULE9BQU9TLE9BQU87UUFDN0IsSUFBSSxDQUFDYixRQUFRLEdBQUdJLE9BQU9KLFFBQVEsSUFBSSxJQUFJLENBQUNBLFFBQVE7UUFDaEQsSUFBSSxDQUFDRSxTQUFTLEdBQUdFLE9BQU9GLFNBQVMsSUFBSSxJQUFJLENBQUNBLFNBQVM7UUFDbkQsSUFBSSxDQUFDWSxPQUFPLEdBQUdWLE9BQU9VLE9BQU8sSUFBSSxJQUFJLENBQUNBLE9BQU87SUFDakQ7SUFDQSxZQUFZLEdBQ1osTUFBTUMsTUFBTUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7UUFDNUIsTUFBTUMsV0FBV0YsTUFBTSxDQUFDLElBQUksQ0FBQ2hCLFFBQVEsQ0FBQztRQUN0QyxNQUFNbUIsVUFBVSxNQUFNLElBQUksQ0FBQ1IsZUFBZSxDQUFDUyxPQUFPLENBQUM7WUFBRUY7WUFBVUcsVUFBVSxJQUFJLENBQUNSLE9BQU87UUFBQyxHQUFHSSxZQUFZSyxTQUFTO1FBQzlHLE1BQU1DLE1BQU0sTUFBTUMsTUFBTUwsU0FBUztZQUFFTCxTQUFTLElBQUksQ0FBQ0EsT0FBTztRQUFDO1FBQ3pELE1BQU1XLGVBQWUsTUFBTUYsSUFBSUcsSUFBSTtRQUNuQyxNQUFNQyxTQUFTLE1BQU0sSUFBSSxDQUFDZixjQUFjLENBQUNRLE9BQU8sQ0FBQztZQUFFRjtZQUFVRyxVQUFVLElBQUksQ0FBQ1IsT0FBTztZQUFFTTtZQUFTTTtRQUFhLEdBQUdSLFlBQVlLLFNBQVM7UUFDbkksT0FBTztZQUFFLENBQUMsSUFBSSxDQUFDcEIsU0FBUyxDQUFDLEVBQUV5QjtRQUFPO0lBQ3RDO0lBQ0FDLGFBQWE7UUFDVCxPQUFPO0lBQ1g7SUFDQSxhQUFhQyxZQUFZQyxJQUFJLEVBQUU7UUFDM0IsTUFBTSxFQUFFQyxpQkFBaUIsRUFBRUMsZ0JBQWdCLEVBQUVYLFFBQVEsRUFBRSxHQUFHUztRQUMxRCxJQUFJLENBQUNDLG1CQUFtQjtZQUNwQixNQUFNLElBQUlFLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNELGtCQUFrQjtZQUNuQixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNaLFVBQVU7WUFDWCxNQUFNLElBQUlZLE1BQU07UUFDcEI7UUFDQSxPQUFPLElBQUluQyxTQUFTO1lBQ2hCYyxnQkFBZ0IsTUFBTWpCLG1EQUFRQSxDQUFDa0MsV0FBVyxDQUFDRztZQUMzQ3JCLGlCQUFpQixNQUFNaEIsbURBQVFBLENBQUNrQyxXQUFXLENBQUNFO1lBQzVDbEIsU0FBU1E7UUFDYjtJQUNKO0lBQ0FhLFlBQVk7UUFDUixPQUFPO1lBQ0hDLE9BQU8sSUFBSSxDQUFDUCxVQUFVO1lBQ3RCSSxrQkFBa0IsSUFBSSxDQUFDcEIsY0FBYyxDQUFDc0IsU0FBUztZQUMvQ0gsbUJBQW1CLElBQUksQ0FBQ3BCLGVBQWUsQ0FBQ3VCLFNBQVM7WUFDakRiLFVBQVUsSUFBSSxDQUFDUixPQUFPO1FBQzFCO0lBQ0o7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsT0FBT3VCLGtCQUFrQkMsR0FBRyxFQUFFeEIsT0FBTyxFQUFFeUIsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNqRCxNQUFNLEVBQUVDLGVBQWUzQyxnRUFBdUIsRUFBRTRDLG9CQUFvQjNDLHFFQUE0QixFQUFHLEdBQUd5QztRQUN0RyxNQUFNM0Isa0JBQWtCLElBQUloQixtREFBUUEsQ0FBQztZQUFFOEMsUUFBUUY7WUFBY0Y7UUFBSTtRQUNqRSxNQUFNekIsaUJBQWlCLElBQUlqQixtREFBUUEsQ0FBQztZQUFFOEMsUUFBUUQ7WUFBbUJIO1FBQUk7UUFDckUsT0FBTyxJQUFJLElBQUksQ0FBQztZQUNaekI7WUFDQUQ7WUFDQUU7WUFDQSxHQUFHeUIsT0FBTztRQUNkO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvYXBpL2FwaV9jaGFpbi5qcz8yNTA1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDaGFpbiB9IGZyb20gXCIuLi9iYXNlLmpzXCI7XG5pbXBvcnQgeyBMTE1DaGFpbiB9IGZyb20gXCIuLi9sbG1fY2hhaW4uanNcIjtcbmltcG9ydCB7IEFQSV9VUkxfUFJPTVBUX1RFTVBMQVRFLCBBUElfUkVTUE9OU0VfUFJPTVBUX1RFTVBMQVRFLCB9IGZyb20gXCIuL3Byb21wdHMuanNcIjtcbi8qKlxuICogQ2xhc3MgdGhhdCBleHRlbmRzIEJhc2VDaGFpbiBhbmQgcmVwcmVzZW50cyBhIGNoYWluIHNwZWNpZmljYWxseVxuICogZGVzaWduZWQgZm9yIG1ha2luZyBBUEkgcmVxdWVzdHMgYW5kIHByb2Nlc3NpbmcgQVBJIHJlc3BvbnNlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFQSUNoYWluIGV4dGVuZHMgQmFzZUNoYWluIHtcbiAgICBnZXQgaW5wdXRLZXlzKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMuaW5wdXRLZXldO1xuICAgIH1cbiAgICBnZXQgb3V0cHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLm91dHB1dEtleV07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcGlBbnN3ZXJDaGFpblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcGlSZXF1ZXN0Q2hhaW5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXBpRG9jc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJoZWFkZXJzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5wdXRLZXlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwicXVlc3Rpb25cIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib3V0cHV0S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIm91dHB1dFwiXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFwaVJlcXVlc3RDaGFpbiA9IGZpZWxkcy5hcGlSZXF1ZXN0Q2hhaW47XG4gICAgICAgIHRoaXMuYXBpQW5zd2VyQ2hhaW4gPSBmaWVsZHMuYXBpQW5zd2VyQ2hhaW47XG4gICAgICAgIHRoaXMuYXBpRG9jcyA9IGZpZWxkcy5hcGlEb2NzO1xuICAgICAgICB0aGlzLmlucHV0S2V5ID0gZmllbGRzLmlucHV0S2V5ID8/IHRoaXMuaW5wdXRLZXk7XG4gICAgICAgIHRoaXMub3V0cHV0S2V5ID0gZmllbGRzLm91dHB1dEtleSA/PyB0aGlzLm91dHB1dEtleTtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gZmllbGRzLmhlYWRlcnMgPz8gdGhpcy5oZWFkZXJzO1xuICAgIH1cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIGFzeW5jIF9jYWxsKHZhbHVlcywgcnVuTWFuYWdlcikge1xuICAgICAgICBjb25zdCBxdWVzdGlvbiA9IHZhbHVlc1t0aGlzLmlucHV0S2V5XTtcbiAgICAgICAgY29uc3QgYXBpX3VybCA9IGF3YWl0IHRoaXMuYXBpUmVxdWVzdENoYWluLnByZWRpY3QoeyBxdWVzdGlvbiwgYXBpX2RvY3M6IHRoaXMuYXBpRG9jcyB9LCBydW5NYW5hZ2VyPy5nZXRDaGlsZChcInJlcXVlc3RcIikpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChhcGlfdXJsLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICAgICAgY29uc3QgYXBpX3Jlc3BvbnNlID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5hcGlBbnN3ZXJDaGFpbi5wcmVkaWN0KHsgcXVlc3Rpb24sIGFwaV9kb2NzOiB0aGlzLmFwaURvY3MsIGFwaV91cmwsIGFwaV9yZXNwb25zZSB9LCBydW5NYW5hZ2VyPy5nZXRDaGlsZChcInJlc3BvbnNlXCIpKTtcbiAgICAgICAgcmV0dXJuIHsgW3RoaXMub3V0cHV0S2V5XTogYW5zd2VyIH07XG4gICAgfVxuICAgIF9jaGFpblR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImFwaV9jaGFpblwiO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgZGVzZXJpYWxpemUoZGF0YSkge1xuICAgICAgICBjb25zdCB7IGFwaV9yZXF1ZXN0X2NoYWluLCBhcGlfYW5zd2VyX2NoYWluLCBhcGlfZG9jcyB9ID0gZGF0YTtcbiAgICAgICAgaWYgKCFhcGlfcmVxdWVzdF9jaGFpbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTExNQ2hhaW4gbXVzdCBoYXZlIGFwaV9yZXF1ZXN0X2NoYWluXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXBpX2Fuc3dlcl9jaGFpbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTExNQ2hhaW4gbXVzdCBoYXZlIGFwaV9hbnN3ZXJfY2hhaW5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcGlfZG9jcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTExNQ2hhaW4gbXVzdCBoYXZlIGFwaV9kb2NzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQVBJQ2hhaW4oe1xuICAgICAgICAgICAgYXBpQW5zd2VyQ2hhaW46IGF3YWl0IExMTUNoYWluLmRlc2VyaWFsaXplKGFwaV9hbnN3ZXJfY2hhaW4pLFxuICAgICAgICAgICAgYXBpUmVxdWVzdENoYWluOiBhd2FpdCBMTE1DaGFpbi5kZXNlcmlhbGl6ZShhcGlfcmVxdWVzdF9jaGFpbiksXG4gICAgICAgICAgICBhcGlEb2NzOiBhcGlfZG9jcyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF90eXBlOiB0aGlzLl9jaGFpblR5cGUoKSxcbiAgICAgICAgICAgIGFwaV9hbnN3ZXJfY2hhaW46IHRoaXMuYXBpQW5zd2VyQ2hhaW4uc2VyaWFsaXplKCksXG4gICAgICAgICAgICBhcGlfcmVxdWVzdF9jaGFpbjogdGhpcy5hcGlSZXF1ZXN0Q2hhaW4uc2VyaWFsaXplKCksXG4gICAgICAgICAgICBhcGlfZG9jczogdGhpcy5hcGlEb2NzLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyBBUElDaGFpbiBmcm9tIGEgQmFzZUxhbmd1YWdlTW9kZWwgYW5kIEFQSVxuICAgICAqIGRvY3VtZW50YXRpb24uXG4gICAgICogQHBhcmFtIGxsbSBCYXNlTGFuZ3VhZ2VNb2RlbCBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gYXBpRG9jcyBBUEkgZG9jdW1lbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBBUElDaGFpbi5cbiAgICAgKiBAcmV0dXJucyBOZXcgQVBJQ2hhaW4gaW5zdGFuY2UuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21MTE1BbmRBUElEb2NzKGxsbSwgYXBpRG9jcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgYXBpVXJsUHJvbXB0ID0gQVBJX1VSTF9QUk9NUFRfVEVNUExBVEUsIGFwaVJlc3BvbnNlUHJvbXB0ID0gQVBJX1JFU1BPTlNFX1BST01QVF9URU1QTEFURSwgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFwaVJlcXVlc3RDaGFpbiA9IG5ldyBMTE1DaGFpbih7IHByb21wdDogYXBpVXJsUHJvbXB0LCBsbG0gfSk7XG4gICAgICAgIGNvbnN0IGFwaUFuc3dlckNoYWluID0gbmV3IExMTUNoYWluKHsgcHJvbXB0OiBhcGlSZXNwb25zZVByb21wdCwgbGxtIH0pO1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMoe1xuICAgICAgICAgICAgYXBpQW5zd2VyQ2hhaW4sXG4gICAgICAgICAgICBhcGlSZXF1ZXN0Q2hhaW4sXG4gICAgICAgICAgICBhcGlEb2NzLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VDaGFpbiIsIkxMTUNoYWluIiwiQVBJX1VSTF9QUk9NUFRfVEVNUExBVEUiLCJBUElfUkVTUE9OU0VfUFJPTVBUX1RFTVBMQVRFIiwiQVBJQ2hhaW4iLCJpbnB1dEtleXMiLCJpbnB1dEtleSIsIm91dHB1dEtleXMiLCJvdXRwdXRLZXkiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJhcGlSZXF1ZXN0Q2hhaW4iLCJhcGlBbnN3ZXJDaGFpbiIsImFwaURvY3MiLCJoZWFkZXJzIiwiX2NhbGwiLCJ2YWx1ZXMiLCJydW5NYW5hZ2VyIiwicXVlc3Rpb24iLCJhcGlfdXJsIiwicHJlZGljdCIsImFwaV9kb2NzIiwiZ2V0Q2hpbGQiLCJyZXMiLCJmZXRjaCIsImFwaV9yZXNwb25zZSIsInRleHQiLCJhbnN3ZXIiLCJfY2hhaW5UeXBlIiwiZGVzZXJpYWxpemUiLCJkYXRhIiwiYXBpX3JlcXVlc3RfY2hhaW4iLCJhcGlfYW5zd2VyX2NoYWluIiwiRXJyb3IiLCJzZXJpYWxpemUiLCJfdHlwZSIsImZyb21MTE1BbmRBUElEb2NzIiwibGxtIiwib3B0aW9ucyIsImFwaVVybFByb21wdCIsImFwaVJlc3BvbnNlUHJvbXB0IiwicHJvbXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/api/prompts.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/dist/chains/api/prompts.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_RESPONSE_PROMPT_TEMPLATE: () => (/* binding */ API_RESPONSE_PROMPT_TEMPLATE),\n/* harmony export */   API_RESPONSE_RAW_PROMPT_TEMPLATE: () => (/* binding */ API_RESPONSE_RAW_PROMPT_TEMPLATE),\n/* harmony export */   API_URL_PROMPT_TEMPLATE: () => (/* binding */ API_URL_PROMPT_TEMPLATE),\n/* harmony export */   API_URL_RAW_PROMPT_TEMPLATE: () => (/* binding */ API_URL_RAW_PROMPT_TEMPLATE)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* eslint-disable spaced-comment */ \nconst API_URL_RAW_PROMPT_TEMPLATE = `You are given the below API Documentation:\n{api_docs}\nUsing this documentation, generate the full API url to call for answering the user question.\nYou should build the API url in order to get a response that is as short as possible, while still getting the necessary information to answer the question. Pay attention to deliberately exclude any unnecessary pieces of data in the API call.\n\nQuestion:{question}\nAPI url:`;\nconst API_URL_PROMPT_TEMPLATE = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\n        \"api_docs\",\n        \"question\"\n    ],\n    template: API_URL_RAW_PROMPT_TEMPLATE\n});\nconst API_RESPONSE_RAW_PROMPT_TEMPLATE = `${API_URL_RAW_PROMPT_TEMPLATE} {api_url}\n\nHere is the response from the API:\n\n{api_response}\n\nSummarize this response to answer the original question.\n\nSummary:`;\nconst API_RESPONSE_PROMPT_TEMPLATE = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\n        \"api_docs\",\n        \"question\",\n        \"api_url\",\n        \"api_response\"\n    ],\n    template: API_RESPONSE_RAW_PROMPT_TEMPLATE\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FwaS9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsaUNBQWlDLEdBQ3dCO0FBQ2xELE1BQU1DLDhCQUE4QixDQUFDOzs7Ozs7UUFNcEMsQ0FBQyxDQUFDO0FBQ0gsTUFBTUMsMEJBQTBCLGFBQWEsR0FBRyxJQUFJRixtRUFBY0EsQ0FBQztJQUN0RUcsZ0JBQWdCO1FBQUM7UUFBWTtLQUFXO0lBQ3hDQyxVQUFVSDtBQUNkLEdBQUc7QUFDSSxNQUFNSSxtQ0FBbUMsQ0FBQyxFQUFFSiw0QkFBNEI7Ozs7Ozs7O1FBUXZFLENBQUMsQ0FBQztBQUNILE1BQU1LLCtCQUErQixhQUFhLEdBQUcsSUFBSU4sbUVBQWNBLENBQUM7SUFDM0VHLGdCQUFnQjtRQUFDO1FBQVk7UUFBWTtRQUFXO0tBQWU7SUFDbkVDLFVBQVVDO0FBQ2QsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvYXBpL3Byb21wdHMuanM/OWYxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBzcGFjZWQtY29tbWVudCAqL1xuaW1wb3J0IHsgUHJvbXB0VGVtcGxhdGUgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3Byb21wdHNcIjtcbmV4cG9ydCBjb25zdCBBUElfVVJMX1JBV19QUk9NUFRfVEVNUExBVEUgPSBgWW91IGFyZSBnaXZlbiB0aGUgYmVsb3cgQVBJIERvY3VtZW50YXRpb246XG57YXBpX2RvY3N9XG5Vc2luZyB0aGlzIGRvY3VtZW50YXRpb24sIGdlbmVyYXRlIHRoZSBmdWxsIEFQSSB1cmwgdG8gY2FsbCBmb3IgYW5zd2VyaW5nIHRoZSB1c2VyIHF1ZXN0aW9uLlxuWW91IHNob3VsZCBidWlsZCB0aGUgQVBJIHVybCBpbiBvcmRlciB0byBnZXQgYSByZXNwb25zZSB0aGF0IGlzIGFzIHNob3J0IGFzIHBvc3NpYmxlLCB3aGlsZSBzdGlsbCBnZXR0aW5nIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gdG8gYW5zd2VyIHRoZSBxdWVzdGlvbi4gUGF5IGF0dGVudGlvbiB0byBkZWxpYmVyYXRlbHkgZXhjbHVkZSBhbnkgdW5uZWNlc3NhcnkgcGllY2VzIG9mIGRhdGEgaW4gdGhlIEFQSSBjYWxsLlxuXG5RdWVzdGlvbjp7cXVlc3Rpb259XG5BUEkgdXJsOmA7XG5leHBvcnQgY29uc3QgQVBJX1VSTF9QUk9NUFRfVEVNUExBVEUgPSAvKiAjX19QVVJFX18gKi8gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICBpbnB1dFZhcmlhYmxlczogW1wiYXBpX2RvY3NcIiwgXCJxdWVzdGlvblwiXSxcbiAgICB0ZW1wbGF0ZTogQVBJX1VSTF9SQVdfUFJPTVBUX1RFTVBMQVRFLFxufSk7XG5leHBvcnQgY29uc3QgQVBJX1JFU1BPTlNFX1JBV19QUk9NUFRfVEVNUExBVEUgPSBgJHtBUElfVVJMX1JBV19QUk9NUFRfVEVNUExBVEV9IHthcGlfdXJsfVxuXG5IZXJlIGlzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBBUEk6XG5cbnthcGlfcmVzcG9uc2V9XG5cblN1bW1hcml6ZSB0aGlzIHJlc3BvbnNlIHRvIGFuc3dlciB0aGUgb3JpZ2luYWwgcXVlc3Rpb24uXG5cblN1bW1hcnk6YDtcbmV4cG9ydCBjb25zdCBBUElfUkVTUE9OU0VfUFJPTVBUX1RFTVBMQVRFID0gLyogI19fUFVSRV9fICovIG5ldyBQcm9tcHRUZW1wbGF0ZSh7XG4gICAgaW5wdXRWYXJpYWJsZXM6IFtcImFwaV9kb2NzXCIsIFwicXVlc3Rpb25cIiwgXCJhcGlfdXJsXCIsIFwiYXBpX3Jlc3BvbnNlXCJdLFxuICAgIHRlbXBsYXRlOiBBUElfUkVTUE9OU0VfUkFXX1BST01QVF9URU1QTEFURSxcbn0pO1xuIl0sIm5hbWVzIjpbIlByb21wdFRlbXBsYXRlIiwiQVBJX1VSTF9SQVdfUFJPTVBUX1RFTVBMQVRFIiwiQVBJX1VSTF9QUk9NUFRfVEVNUExBVEUiLCJpbnB1dFZhcmlhYmxlcyIsInRlbXBsYXRlIiwiQVBJX1JFU1BPTlNFX1JBV19QUk9NUFRfVEVNUExBVEUiLCJBUElfUkVTUE9OU0VfUFJPTVBUX1RFTVBMQVRFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/api/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/base.js":
/*!****************************************************!*\
  !*** ./node_modules/langchain/dist/chains/base.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChain: () => (/* binding */ BaseChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/callbacks/manager */ \"(rsc)/./node_modules/@langchain/core/callbacks/manager.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n\n\n\n\n/**\n * Base interface that all chains must implement.\n */ class BaseChain extends _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_3__.BaseLangChain {\n    get lc_namespace() {\n        return [\n            \"langchain\",\n            \"chains\",\n            this._chainType()\n        ];\n    }\n    constructor(fields, /** @deprecated */ verbose, /** @deprecated */ callbacks){\n        if (arguments.length === 1 && typeof fields === \"object\" && !(\"saveContext\" in fields)) {\n            // fields is not a BaseMemory\n            const { memory, callbackManager, ...rest } = fields;\n            super({\n                ...rest,\n                callbacks: callbackManager ?? rest.callbacks\n            });\n            this.memory = memory;\n        } else {\n            // fields is a BaseMemory\n            super({\n                verbose,\n                callbacks\n            });\n            this.memory = fields;\n        }\n    }\n    /** @ignore */ _selectMemoryInputs(values) {\n        const valuesForMemory = {\n            ...values\n        };\n        if (\"signal\" in valuesForMemory) {\n            delete valuesForMemory.signal;\n        }\n        if (\"timeout\" in valuesForMemory) {\n            delete valuesForMemory.timeout;\n        }\n        return valuesForMemory;\n    }\n    /**\n     * Invoke the chain with the provided input and returns the output.\n     * @param input Input values for the chain run.\n     * @param config Optional configuration for the Runnable.\n     * @returns Promise that resolves with the output of the chain run.\n     */ async invoke(input, options) {\n        const config = (0,_langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        const fullValues = await this._formatValues(input);\n        const callbackManager_ = await _langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(config?.callbacks, this.callbacks, config?.tags, this.tags, config?.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues, undefined, undefined, undefined, undefined, config?.runName);\n        let outputValues;\n        try {\n            outputValues = await (fullValues.signal ? Promise.race([\n                this._call(fullValues, runManager, config),\n                new Promise((_, reject)=>{\n                    fullValues.signal?.addEventListener(\"abort\", ()=>{\n                        reject(new Error(\"AbortError\"));\n                    });\n                })\n            ]) : this._call(fullValues, runManager, config));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        if (!(this.memory == null)) {\n            await this.memory.saveContext(this._selectMemoryInputs(input), outputValues);\n        }\n        await runManager?.handleChainEnd(outputValues);\n        // add the runManager's currentRunId to the outputValues\n        Object.defineProperty(outputValues, _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__.RUN_KEY, {\n            value: runManager ? {\n                runId: runManager?.runId\n            } : undefined,\n            configurable: true\n        });\n        return outputValues;\n    }\n    _validateOutputs(outputs) {\n        const missingKeys = this.outputKeys.filter((k)=>!(k in outputs));\n        if (missingKeys.length) {\n            throw new Error(`Missing output keys: ${missingKeys.join(\", \")} from chain ${this._chainType()}`);\n        }\n    }\n    async prepOutputs(inputs, outputs, returnOnlyOutputs = false) {\n        this._validateOutputs(outputs);\n        if (this.memory) {\n            await this.memory.saveContext(inputs, outputs);\n        }\n        if (returnOnlyOutputs) {\n            return outputs;\n        }\n        return {\n            ...inputs,\n            ...outputs\n        };\n    }\n    /**\n     * Return a json-like object representing this chain.\n     */ serialize() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */ async run(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, config) {\n        const inputKeys = this.inputKeys.filter((k)=>!this.memory?.memoryKeys.includes(k) ?? true);\n        const isKeylessInput = inputKeys.length <= 1;\n        if (!isKeylessInput) {\n            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const values = inputKeys.length ? {\n            [inputKeys[0]]: input\n        } : {};\n        const returnValues = await this.call(values, config);\n        const keys = Object.keys(returnValues);\n        if (keys.length === 1) {\n            return returnValues[keys[0]];\n        }\n        throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n    }\n    async _formatValues(values) {\n        const fullValues = {\n            ...values\n        };\n        if (fullValues.timeout && !fullValues.signal) {\n            fullValues.signal = AbortSignal.timeout(fullValues.timeout);\n            delete fullValues.timeout;\n        }\n        if (!(this.memory == null)) {\n            const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));\n            for (const [key, value] of Object.entries(newValues)){\n                fullValues[key] = value;\n            }\n        }\n        return fullValues;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */ async call(values, config, /** @deprecated */ tags) {\n        const parsedConfig = {\n            tags,\n            ...(0,_langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__.parseCallbackConfigArg)(config)\n        };\n        return this.invoke(values, parsedConfig);\n    }\n    /**\n     * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n     *\n     * Call the chain on all inputs in the list\n     */ async apply(inputs, config) {\n        return Promise.all(inputs.map(async (i, idx)=>this.call(i, config?.[idx])));\n    }\n    /**\n     * Load a chain from a json-like object describing it.\n     */ static async deserialize(data, values = {}) {\n        switch(data._type){\n            case \"llm_chain\":\n                {\n                    const { LLMChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\"));\n                    return LLMChain.deserialize(data);\n                }\n            case \"sequential_chain\":\n                {\n                    const { SequentialChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./sequential_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\"));\n                    return SequentialChain.deserialize(data);\n                }\n            case \"simple_sequential_chain\":\n                {\n                    const { SimpleSequentialChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./sequential_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\"));\n                    return SimpleSequentialChain.deserialize(data);\n                }\n            case \"stuff_documents_chain\":\n                {\n                    const { StuffDocumentsChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                    return StuffDocumentsChain.deserialize(data);\n                }\n            case \"map_reduce_documents_chain\":\n                {\n                    const { MapReduceDocumentsChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                    return MapReduceDocumentsChain.deserialize(data);\n                }\n            case \"refine_documents_chain\":\n                {\n                    const { RefineDocumentsChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                    return RefineDocumentsChain.deserialize(data);\n                }\n            case \"vector_db_qa\":\n                {\n                    const { VectorDBQAChain } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/langchain\"), __webpack_require__.e(\"vendor-chunks/@langchain\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./vector_db_qa.js */ \"(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js\"));\n                    return VectorDBQAChain.deserialize(data, values);\n                }\n            case \"api_chain\":\n                {\n                    const { APIChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./api/api_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js\"));\n                    return APIChain.deserialize(data);\n                }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBa0Q7QUFDMkM7QUFDcEM7QUFDYTtBQUN0RTs7Q0FFQyxHQUNNLE1BQU1LLGtCQUFrQkQsK0VBQWFBO0lBQ3hDLElBQUlFLGVBQWU7UUFDZixPQUFPO1lBQUM7WUFBYTtZQUFVLElBQUksQ0FBQ0MsVUFBVTtTQUFHO0lBQ3JEO0lBQ0FDLFlBQVlDLE1BQU0sRUFDbEIsZ0JBQWdCLEdBQ2hCQyxPQUFPLEVBQ1AsZ0JBQWdCLEdBQ2hCQyxTQUFTLENBQUU7UUFDUCxJQUFJQyxVQUFVQyxNQUFNLEtBQUssS0FDckIsT0FBT0osV0FBVyxZQUNsQixDQUFFLGtCQUFpQkEsTUFBSyxHQUFJO1lBQzVCLDZCQUE2QjtZQUM3QixNQUFNLEVBQUVLLE1BQU0sRUFBRUMsZUFBZSxFQUFFLEdBQUdDLE1BQU0sR0FBR1A7WUFDN0MsS0FBSyxDQUFDO2dCQUFFLEdBQUdPLElBQUk7Z0JBQUVMLFdBQVdJLG1CQUFtQkMsS0FBS0wsU0FBUztZQUFDO1lBQzlELElBQUksQ0FBQ0csTUFBTSxHQUFHQTtRQUNsQixPQUNLO1lBQ0QseUJBQXlCO1lBQ3pCLEtBQUssQ0FBQztnQkFBRUo7Z0JBQVNDO1lBQVU7WUFDM0IsSUFBSSxDQUFDRyxNQUFNLEdBQUdMO1FBQ2xCO0lBQ0o7SUFDQSxZQUFZLEdBQ1pRLG9CQUFvQkMsTUFBTSxFQUFFO1FBQ3hCLE1BQU1DLGtCQUFrQjtZQUFFLEdBQUdELE1BQU07UUFBQztRQUNwQyxJQUFJLFlBQVlDLGlCQUFpQjtZQUM3QixPQUFPQSxnQkFBZ0JDLE1BQU07UUFDakM7UUFDQSxJQUFJLGFBQWFELGlCQUFpQjtZQUM5QixPQUFPQSxnQkFBZ0JFLE9BQU87UUFDbEM7UUFDQSxPQUFPRjtJQUNYO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNRyxPQUFPQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUN6QixNQUFNQyxTQUFTdEIs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R0FBRyxNQUFNLHVOQUFpQztvQkFDeEUsT0FBT0EscUJBQXFCUixXQUFXLENBQUNDO2dCQUM1QztZQUNBLEtBQUs7Z0JBQWdCO29CQUNqQixNQUFNLEVBQUVRLGVBQWUsRUFBRSxHQUFHLE1BQU0sNFFBQTJCO29CQUM3RCxPQUFPQSxnQkFBZ0JULFdBQVcsQ0FBQ0MsTUFBTW5FO2dCQUM3QztZQUNBLEtBQUs7Z0JBQWE7b0JBQ2QsTUFBTSxFQUFFNEUsUUFBUSxFQUFFLEdBQUcsTUFBTSw2TUFBNEI7b0JBQ3ZELE9BQU9BLFNBQVNWLFdBQVcsQ0FBQ0M7Z0JBQ2hDO1lBQ0E7Z0JBQ0ksTUFBTSxJQUFJekMsTUFBTSxDQUFDLCtCQUErQixFQUFFeUMsS0FBS0MsS0FBSyxDQUFDLENBQUM7UUFDdEU7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9iYXNlLmpzPzcwNjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUlVOX0tFWSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0c1wiO1xuaW1wb3J0IHsgQ2FsbGJhY2tNYW5hZ2VyLCBwYXJzZUNhbGxiYWNrQ29uZmlnQXJnLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvY2FsbGJhY2tzL21hbmFnZXJcIjtcbmltcG9ydCB7IGVuc3VyZUNvbmZpZyB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcnVubmFibGVzXCI7XG5pbXBvcnQgeyBCYXNlTGFuZ0NoYWluLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvbGFuZ3VhZ2VfbW9kZWxzL2Jhc2VcIjtcbi8qKlxuICogQmFzZSBpbnRlcmZhY2UgdGhhdCBhbGwgY2hhaW5zIG11c3QgaW1wbGVtZW50LlxuICovXG5leHBvcnQgY2xhc3MgQmFzZUNoYWluIGV4dGVuZHMgQmFzZUxhbmdDaGFpbiB7XG4gICAgZ2V0IGxjX25hbWVzcGFjZSgpIHtcbiAgICAgICAgcmV0dXJuIFtcImxhbmdjaGFpblwiLCBcImNoYWluc1wiLCB0aGlzLl9jaGFpblR5cGUoKV07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAgdmVyYm9zZSwgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAgY2FsbGJhY2tzKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmXG4gICAgICAgICAgICB0eXBlb2YgZmllbGRzID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAhKFwic2F2ZUNvbnRleHRcIiBpbiBmaWVsZHMpKSB7XG4gICAgICAgICAgICAvLyBmaWVsZHMgaXMgbm90IGEgQmFzZU1lbW9yeVxuICAgICAgICAgICAgY29uc3QgeyBtZW1vcnksIGNhbGxiYWNrTWFuYWdlciwgLi4ucmVzdCB9ID0gZmllbGRzO1xuICAgICAgICAgICAgc3VwZXIoeyAuLi5yZXN0LCBjYWxsYmFja3M6IGNhbGxiYWNrTWFuYWdlciA/PyByZXN0LmNhbGxiYWNrcyB9KTtcbiAgICAgICAgICAgIHRoaXMubWVtb3J5ID0gbWVtb3J5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZmllbGRzIGlzIGEgQmFzZU1lbW9yeVxuICAgICAgICAgICAgc3VwZXIoeyB2ZXJib3NlLCBjYWxsYmFja3MgfSk7XG4gICAgICAgICAgICB0aGlzLm1lbW9yeSA9IGZpZWxkcztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIF9zZWxlY3RNZW1vcnlJbnB1dHModmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlc0Zvck1lbW9yeSA9IHsgLi4udmFsdWVzIH07XG4gICAgICAgIGlmIChcInNpZ25hbFwiIGluIHZhbHVlc0Zvck1lbW9yeSkge1xuICAgICAgICAgICAgZGVsZXRlIHZhbHVlc0Zvck1lbW9yeS5zaWduYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwidGltZW91dFwiIGluIHZhbHVlc0Zvck1lbW9yeSkge1xuICAgICAgICAgICAgZGVsZXRlIHZhbHVlc0Zvck1lbW9yeS50aW1lb3V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXNGb3JNZW1vcnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGUgY2hhaW4gd2l0aCB0aGUgcHJvdmlkZWQgaW5wdXQgYW5kIHJldHVybnMgdGhlIG91dHB1dC5cbiAgICAgKiBAcGFyYW0gaW5wdXQgSW5wdXQgdmFsdWVzIGZvciB0aGUgY2hhaW4gcnVuLlxuICAgICAqIEBwYXJhbSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgdGhlIFJ1bm5hYmxlLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBvdXRwdXQgb2YgdGhlIGNoYWluIHJ1bi5cbiAgICAgKi9cbiAgICBhc3luYyBpbnZva2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gZW5zdXJlQ29uZmlnKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBmdWxsVmFsdWVzID0gYXdhaXQgdGhpcy5fZm9ybWF0VmFsdWVzKGlucHV0KTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tNYW5hZ2VyXyA9IGF3YWl0IENhbGxiYWNrTWFuYWdlci5jb25maWd1cmUoY29uZmlnPy5jYWxsYmFja3MsIHRoaXMuY2FsbGJhY2tzLCBjb25maWc/LnRhZ3MsIHRoaXMudGFncywgY29uZmlnPy5tZXRhZGF0YSwgdGhpcy5tZXRhZGF0YSwgeyB2ZXJib3NlOiB0aGlzLnZlcmJvc2UgfSk7XG4gICAgICAgIGNvbnN0IHJ1bk1hbmFnZXIgPSBhd2FpdCBjYWxsYmFja01hbmFnZXJfPy5oYW5kbGVDaGFpblN0YXJ0KHRoaXMudG9KU09OKCksIGZ1bGxWYWx1ZXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29uZmlnPy5ydW5OYW1lKTtcbiAgICAgICAgbGV0IG91dHB1dFZhbHVlcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG91dHB1dFZhbHVlcyA9IGF3YWl0IChmdWxsVmFsdWVzLnNpZ25hbFxuICAgICAgICAgICAgICAgID8gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbChmdWxsVmFsdWVzLCBydW5NYW5hZ2VyLCBjb25maWcpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsVmFsdWVzLnNpZ25hbD8uYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiQWJvcnRFcnJvclwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICA6IHRoaXMuX2NhbGwoZnVsbFZhbHVlcywgcnVuTWFuYWdlciwgY29uZmlnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGF3YWl0IHJ1bk1hbmFnZXI/LmhhbmRsZUNoYWluRXJyb3IoZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHRoaXMubWVtb3J5ID09IG51bGwpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1lbW9yeS5zYXZlQ29udGV4dCh0aGlzLl9zZWxlY3RNZW1vcnlJbnB1dHMoaW5wdXQpLCBvdXRwdXRWYWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHJ1bk1hbmFnZXI/LmhhbmRsZUNoYWluRW5kKG91dHB1dFZhbHVlcyk7XG4gICAgICAgIC8vIGFkZCB0aGUgcnVuTWFuYWdlcidzIGN1cnJlbnRSdW5JZCB0byB0aGUgb3V0cHV0VmFsdWVzXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvdXRwdXRWYWx1ZXMsIFJVTl9LRVksIHtcbiAgICAgICAgICAgIHZhbHVlOiBydW5NYW5hZ2VyID8geyBydW5JZDogcnVuTWFuYWdlcj8ucnVuSWQgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXRwdXRWYWx1ZXM7XG4gICAgfVxuICAgIF92YWxpZGF0ZU91dHB1dHMob3V0cHV0cykge1xuICAgICAgICBjb25zdCBtaXNzaW5nS2V5cyA9IHRoaXMub3V0cHV0S2V5cy5maWx0ZXIoKGspID0+ICEoayBpbiBvdXRwdXRzKSk7XG4gICAgICAgIGlmIChtaXNzaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBvdXRwdXQga2V5czogJHttaXNzaW5nS2V5cy5qb2luKFwiLCBcIil9IGZyb20gY2hhaW4gJHt0aGlzLl9jaGFpblR5cGUoKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBwcmVwT3V0cHV0cyhpbnB1dHMsIG91dHB1dHMsIHJldHVybk9ubHlPdXRwdXRzID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGVPdXRwdXRzKG91dHB1dHMpO1xuICAgICAgICBpZiAodGhpcy5tZW1vcnkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWVtb3J5LnNhdmVDb250ZXh0KGlucHV0cywgb3V0cHV0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldHVybk9ubHlPdXRwdXRzKSB7XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyAuLi5pbnB1dHMsIC4uLm91dHB1dHMgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEganNvbi1saWtlIG9iamVjdCByZXByZXNlbnRpbmcgdGhpcyBjaGFpbi5cbiAgICAgKi9cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIC5pbnZva2UoKSBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gMC4yLjAuICovXG4gICAgYXN5bmMgcnVuKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBjb25zdCBpbnB1dEtleXMgPSB0aGlzLmlucHV0S2V5cy5maWx0ZXIoKGspID0+ICF0aGlzLm1lbW9yeT8ubWVtb3J5S2V5cy5pbmNsdWRlcyhrKSA/PyB0cnVlKTtcbiAgICAgICAgY29uc3QgaXNLZXlsZXNzSW5wdXQgPSBpbnB1dEtleXMubGVuZ3RoIDw9IDE7XG4gICAgICAgIGlmICghaXNLZXlsZXNzSW5wdXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhaW4gJHt0aGlzLl9jaGFpblR5cGUoKX0gZXhwZWN0cyBtdWx0aXBsZSBpbnB1dHMsIGNhbm5vdCB1c2UgJ3J1bicgYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgdmFsdWVzID0gaW5wdXRLZXlzLmxlbmd0aCA/IHsgW2lucHV0S2V5c1swXV06IGlucHV0IH0gOiB7fTtcbiAgICAgICAgY29uc3QgcmV0dXJuVmFsdWVzID0gYXdhaXQgdGhpcy5jYWxsKHZhbHVlcywgY29uZmlnKTtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJldHVyblZhbHVlcyk7XG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlc1trZXlzWzBdXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXR1cm4gdmFsdWVzIGhhdmUgbXVsdGlwbGUga2V5cywgYHJ1bmAgb25seSBzdXBwb3J0ZWQgd2hlbiBvbmUga2V5IGN1cnJlbnRseVwiKTtcbiAgICB9XG4gICAgYXN5bmMgX2Zvcm1hdFZhbHVlcyh2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgZnVsbFZhbHVlcyA9IHsgLi4udmFsdWVzIH07XG4gICAgICAgIGlmIChmdWxsVmFsdWVzLnRpbWVvdXQgJiYgIWZ1bGxWYWx1ZXMuc2lnbmFsKSB7XG4gICAgICAgICAgICBmdWxsVmFsdWVzLnNpZ25hbCA9IEFib3J0U2lnbmFsLnRpbWVvdXQoZnVsbFZhbHVlcy50aW1lb3V0KTtcbiAgICAgICAgICAgIGRlbGV0ZSBmdWxsVmFsdWVzLnRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodGhpcy5tZW1vcnkgPT0gbnVsbCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlcyA9IGF3YWl0IHRoaXMubWVtb3J5LmxvYWRNZW1vcnlWYXJpYWJsZXModGhpcy5fc2VsZWN0TWVtb3J5SW5wdXRzKHZhbHVlcykpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobmV3VmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGZ1bGxWYWx1ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdWxsVmFsdWVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgLmludm9rZSgpIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjIuMC5cbiAgICAgKlxuICAgICAqIFJ1biB0aGUgY29yZSBsb2dpYyBvZiB0aGlzIGNoYWluIGFuZCBhZGQgdG8gb3V0cHV0IGlmIGRlc2lyZWQuXG4gICAgICpcbiAgICAgKiBXcmFwcyBfY2FsbCBhbmQgaGFuZGxlcyBtZW1vcnkuXG4gICAgICovXG4gICAgYXN5bmMgY2FsbCh2YWx1ZXMsIGNvbmZpZywgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAgdGFncykge1xuICAgICAgICBjb25zdCBwYXJzZWRDb25maWcgPSB7IHRhZ3MsIC4uLnBhcnNlQ2FsbGJhY2tDb25maWdBcmcoY29uZmlnKSB9O1xuICAgICAgICByZXR1cm4gdGhpcy5pbnZva2UodmFsdWVzLCBwYXJzZWRDb25maWcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgLmJhdGNoKCkgaW5zdGVhZC4gV2lsbCBiZSByZW1vdmVkIGluIDAuMi4wLlxuICAgICAqXG4gICAgICogQ2FsbCB0aGUgY2hhaW4gb24gYWxsIGlucHV0cyBpbiB0aGUgbGlzdFxuICAgICAqL1xuICAgIGFzeW5jIGFwcGx5KGlucHV0cywgY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChpbnB1dHMubWFwKGFzeW5jIChpLCBpZHgpID0+IHRoaXMuY2FsbChpLCBjb25maWc/LltpZHhdKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkIGEgY2hhaW4gZnJvbSBhIGpzb24tbGlrZSBvYmplY3QgZGVzY3JpYmluZyBpdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZGVzZXJpYWxpemUoZGF0YSwgdmFsdWVzID0ge30pIHtcbiAgICAgICAgc3dpdGNoIChkYXRhLl90eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwibGxtX2NoYWluXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IExMTUNoYWluIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2xsbV9jaGFpbi5qc1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTExNQ2hhaW4uZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwic2VxdWVudGlhbF9jaGFpblwiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBTZXF1ZW50aWFsQ2hhaW4gfSA9IGF3YWl0IGltcG9ydChcIi4vc2VxdWVudGlhbF9jaGFpbi5qc1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2VxdWVudGlhbENoYWluLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcInNpbXBsZV9zZXF1ZW50aWFsX2NoYWluXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IFNpbXBsZVNlcXVlbnRpYWxDaGFpbiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9zZXF1ZW50aWFsX2NoYWluLmpzXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBTaW1wbGVTZXF1ZW50aWFsQ2hhaW4uZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwic3R1ZmZfZG9jdW1lbnRzX2NoYWluXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IFN0dWZmRG9jdW1lbnRzQ2hhaW4gfSA9IGF3YWl0IGltcG9ydChcIi4vY29tYmluZV9kb2NzX2NoYWluLmpzXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHVmZkRvY3VtZW50c0NoYWluLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIm1hcF9yZWR1Y2VfZG9jdW1lbnRzX2NoYWluXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IE1hcFJlZHVjZURvY3VtZW50c0NoYWluIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NvbWJpbmVfZG9jc19jaGFpbi5qc1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWFwUmVkdWNlRG9jdW1lbnRzQ2hhaW4uZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwicmVmaW5lX2RvY3VtZW50c19jaGFpblwiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBSZWZpbmVEb2N1bWVudHNDaGFpbiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jb21iaW5lX2RvY3NfY2hhaW4uanNcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlZmluZURvY3VtZW50c0NoYWluLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcInZlY3Rvcl9kYl9xYVwiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBWZWN0b3JEQlFBQ2hhaW4gfSA9IGF3YWl0IGltcG9ydChcIi4vdmVjdG9yX2RiX3FhLmpzXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBWZWN0b3JEQlFBQ2hhaW4uZGVzZXJpYWxpemUoZGF0YSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJhcGlfY2hhaW5cIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgQVBJQ2hhaW4gfSA9IGF3YWl0IGltcG9ydChcIi4vYXBpL2FwaV9jaGFpbi5qc1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQVBJQ2hhaW4uZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcm9tcHQgdHlwZSBpbiBjb25maWc6ICR7ZGF0YS5fdHlwZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJSVU5fS0VZIiwiQ2FsbGJhY2tNYW5hZ2VyIiwicGFyc2VDYWxsYmFja0NvbmZpZ0FyZyIsImVuc3VyZUNvbmZpZyIsIkJhc2VMYW5nQ2hhaW4iLCJCYXNlQ2hhaW4iLCJsY19uYW1lc3BhY2UiLCJfY2hhaW5UeXBlIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJ2ZXJib3NlIiwiY2FsbGJhY2tzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwibWVtb3J5IiwiY2FsbGJhY2tNYW5hZ2VyIiwicmVzdCIsIl9zZWxlY3RNZW1vcnlJbnB1dHMiLCJ2YWx1ZXMiLCJ2YWx1ZXNGb3JNZW1vcnkiLCJzaWduYWwiLCJ0aW1lb3V0IiwiaW52b2tlIiwiaW5wdXQiLCJvcHRpb25zIiwiY29uZmlnIiwiZnVsbFZhbHVlcyIsIl9mb3JtYXRWYWx1ZXMiLCJjYWxsYmFja01hbmFnZXJfIiwiY29uZmlndXJlIiwidGFncyIsIm1ldGFkYXRhIiwicnVuTWFuYWdlciIsImhhbmRsZUNoYWluU3RhcnQiLCJ0b0pTT04iLCJ1bmRlZmluZWQiLCJydW5OYW1lIiwib3V0cHV0VmFsdWVzIiwiUHJvbWlzZSIsInJhY2UiLCJfY2FsbCIsIl8iLCJyZWplY3QiLCJhZGRFdmVudExpc3RlbmVyIiwiRXJyb3IiLCJlIiwiaGFuZGxlQ2hhaW5FcnJvciIsInNhdmVDb250ZXh0IiwiaGFuZGxlQ2hhaW5FbmQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicnVuSWQiLCJjb25maWd1cmFibGUiLCJfdmFsaWRhdGVPdXRwdXRzIiwib3V0cHV0cyIsIm1pc3NpbmdLZXlzIiwib3V0cHV0S2V5cyIsImZpbHRlciIsImsiLCJqb2luIiwicHJlcE91dHB1dHMiLCJpbnB1dHMiLCJyZXR1cm5Pbmx5T3V0cHV0cyIsInNlcmlhbGl6ZSIsInJ1biIsImlucHV0S2V5cyIsIm1lbW9yeUtleXMiLCJpbmNsdWRlcyIsImlzS2V5bGVzc0lucHV0IiwicmV0dXJuVmFsdWVzIiwiY2FsbCIsImtleXMiLCJBYm9ydFNpZ25hbCIsIm5ld1ZhbHVlcyIsImxvYWRNZW1vcnlWYXJpYWJsZXMiLCJrZXkiLCJlbnRyaWVzIiwicGFyc2VkQ29uZmlnIiwiYXBwbHkiLCJhbGwiLCJtYXAiLCJpIiwiaWR4IiwiZGVzZXJpYWxpemUiLCJkYXRhIiwiX3R5cGUiLCJMTE1DaGFpbiIsIlNlcXVlbnRpYWxDaGFpbiIsIlNpbXBsZVNlcXVlbnRpYWxDaGFpbiIsIlN0dWZmRG9jdW1lbnRzQ2hhaW4iLCJNYXBSZWR1Y2VEb2N1bWVudHNDaGFpbiIsIlJlZmluZURvY3VtZW50c0NoYWluIiwiVmVjdG9yREJRQUNoYWluIiwiQVBJQ2hhaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/combine_docs_chain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapReduceDocumentsChain: () => (/* binding */ MapReduceDocumentsChain),\n/* harmony export */   RefineDocumentsChain: () => (/* binding */ RefineDocumentsChain),\n/* harmony export */   StuffDocumentsChain: () => (/* binding */ StuffDocumentsChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n\n\n\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */ class StuffDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [\n            this.inputKey,\n            ...this.llmChain.inputKeys\n        ].filter((key)=>key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */ _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent })=>pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text\n        };\n    }\n    /** @ignore */ async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(data.llm_chain)\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize()\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */ class MapReduceDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [\n            this.inputKey,\n            ...this.combineDocumentChain.inputKeys\n        ];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */ async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for(let i = 0; i < this.maxIterations; i += 1){\n            const inputs = currentDocs.map((d)=>({\n                    [this.documentVariableName]: d.pageContent,\n                    ...rest\n                }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager ? Array.from({\n                length: inputs.length\n            }, (_, i)=>runManager.getChild(`map_${i + 1}`)) : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r)=>r[outputKey]));\n            }\n            currentDocs = results.map((r)=>({\n                    pageContent: r[outputKey],\n                    metadata: {}\n                }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return {\n                ...result,\n                intermediateSteps\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain)\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize()\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */ class RefineDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            inputVariables: [\n                \"page_content\"\n            ],\n            template: \"{page_content}\"\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys\n            ])\n        ].filter((key)=>key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [\n            this.outputKey\n        ];\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName = fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */ async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value)=>{\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo\n            })\n        };\n        const inputs = {\n            ...baseInputs,\n            ...rest\n        };\n        return inputs;\n    }\n    /** @ignore */ async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value)=>{\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo\n            })\n        };\n        const inputs = {\n            [this.initialResponseName]: res,\n            ...baseInputs\n        };\n        return inputs;\n    }\n    /** @ignore */ async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({\n            ...initialInputs\n        }, runManager?.getChild(\"answer\"));\n        const refineSteps = [\n            res\n        ];\n        for(let i = 1; i < currentDocs.length; i += 1){\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = {\n                ...refineInputs,\n                ...rest\n            };\n            res = await this.refineLLMChain.predict({\n                ...inputs\n            }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return {\n            [this.outputKey]: res\n        };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(SerializedRefineDocumentChain)\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize()\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/llm_chain.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/dist/chains/llm_chain.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMChain: () => (/* binding */ LLMChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _output_parsers_noop_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../output_parsers/noop.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/noop.js\");\n\n\n\n\n\nfunction isBaseLanguageModel(llmLike) {\n    return typeof llmLike._llmType === \"function\";\n}\nfunction _getLanguageModel(llmLike) {\n    if (isBaseLanguageModel(llmLike)) {\n        return llmLike;\n    } else if (\"bound\" in llmLike && _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.bound)) {\n        return _getLanguageModel(llmLike.bound);\n    } else if (\"runnable\" in llmLike && \"fallbacks\" in llmLike && _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.runnable)) {\n        return _getLanguageModel(llmLike.runnable);\n    } else if (\"default\" in llmLike && _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.default)) {\n        return _getLanguageModel(llmLike.default);\n    } else {\n        throw new Error(\"Unable to extract BaseLanguageModel from llmLike object.\");\n    }\n}\n/**\n * Chain to run queries against LLMs.\n *\n * @example\n * ```ts\n * import { LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * const prompt = PromptTemplate.fromTemplate(\"Tell me a {adjective} joke\");\n * const llm = new LLMChain({ llm: new OpenAI(), prompt });\n * ```\n */ class LLMChain extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChain {\n    static lc_name() {\n        return \"LLMChain\";\n    }\n    get inputKeys() {\n        return this.prompt.inputVariables;\n    }\n    get outputKeys() {\n        return [\n            this.outputKey\n        ];\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llmKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text\"\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n        this.llm = fields.llm;\n        this.llmKwargs = fields.llmKwargs;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.outputParser = fields.outputParser ?? new _output_parsers_noop_js__WEBPACK_IMPORTED_MODULE_4__.NoOpOutputParser();\n        if (this.prompt.outputParser) {\n            if (fields.outputParser) {\n                throw new Error(\"Cannot set both outputParser and prompt.outputParser\");\n            }\n            this.outputParser = this.prompt.outputParser;\n        }\n    }\n    getCallKeys() {\n        const callKeys = \"callKeys\" in this.llm ? this.llm.callKeys : [];\n        return callKeys;\n    }\n    /** @ignore */ _selectMemoryInputs(values) {\n        const valuesForMemory = super._selectMemoryInputs(values);\n        const callKeys = this.getCallKeys();\n        for (const key of callKeys){\n            if (key in values) {\n                delete valuesForMemory[key];\n            }\n        }\n        return valuesForMemory;\n    }\n    /** @ignore */ async _getFinalOutput(generations, promptValue, runManager) {\n        let finalCompletion;\n        if (this.outputParser) {\n            finalCompletion = await this.outputParser.parseResultWithPrompt(generations, promptValue, runManager?.getChild());\n        } else {\n            finalCompletion = generations[0].text;\n        }\n        return finalCompletion;\n    }\n    /**\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */ call(values, config) {\n        return super.call(values, config);\n    }\n    /** @ignore */ async _call(values, runManager) {\n        const valuesForPrompt = {\n            ...values\n        };\n        const valuesForLLM = {\n            ...this.llmKwargs\n        };\n        const callKeys = this.getCallKeys();\n        for (const key of callKeys){\n            if (key in values) {\n                if (valuesForLLM) {\n                    valuesForLLM[key] = values[key];\n                    delete valuesForPrompt[key];\n                }\n            }\n        }\n        const promptValue = await this.prompt.formatPromptValue(valuesForPrompt);\n        if (\"generatePrompt\" in this.llm) {\n            const { generations } = await this.llm.generatePrompt([\n                promptValue\n            ], valuesForLLM, runManager?.getChild());\n            return {\n                [this.outputKey]: await this._getFinalOutput(generations[0], promptValue, runManager)\n            };\n        }\n        const modelWithParser = this.outputParser ? this.llm.pipe(this.outputParser) : this.llm;\n        const response = await modelWithParser.invoke(promptValue, runManager?.getChild());\n        return {\n            [this.outputKey]: response\n        };\n    }\n    /**\n     * Format prompt with values and pass to LLM\n     *\n     * @param values - keys to pass to prompt template\n     * @param callbackManager - CallbackManager to use\n     * @returns Completion from LLM.\n     *\n     * @example\n     * ```ts\n     * llm.predict({ adjective: \"funny\" })\n     * ```\n     */ async predict(values, callbackManager) {\n        const output = await this.call(values, callbackManager);\n        return output[this.outputKey];\n    }\n    _chainType() {\n        return \"llm\";\n    }\n    static async deserialize(data) {\n        const { llm, prompt } = data;\n        if (!llm) {\n            throw new Error(\"LLMChain must have llm\");\n        }\n        if (!prompt) {\n            throw new Error(\"LLMChain must have prompt\");\n        }\n        return new LLMChain({\n            llm: await _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__.BaseLanguageModel.deserialize(llm),\n            prompt: await _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.BasePromptTemplate.deserialize(prompt)\n        });\n    }\n    /** @deprecated */ serialize() {\n        const serialize = \"serialize\" in this.llm ? this.llm.serialize() : undefined;\n        return {\n            _type: `${this._chainType()}_chain`,\n            llm: serialize,\n            prompt: this.prompt.serialize()\n        };\n    }\n    _getNumTokens(text) {\n        return _getLanguageModel(this.llm).getNumTokens(text);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js":
/*!***********************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/load.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadQAChain: () => (/* binding */ loadQAChain),\n/* harmony export */   loadQAMapReduceChain: () => (/* binding */ loadQAMapReduceChain),\n/* harmony export */   loadQARefineChain: () => (/* binding */ loadQARefineChain),\n/* harmony export */   loadQAStuffChain: () => (/* binding */ loadQAStuffChain)\n/* harmony export */ });\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\");\n/* harmony import */ var _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stuff_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js\");\n/* harmony import */ var _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map_reduce_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js\");\n/* harmony import */ var _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./refine_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js\");\n\n\n\n\n\nconst loadQAChain = (llm, params = {\n    type: \"stuff\"\n})=>{\n    const { type } = params;\n    if (type === \"stuff\") {\n        return loadQAStuffChain(llm, params);\n    }\n    if (type === \"map_reduce\") {\n        return loadQAMapReduceChain(llm, params);\n    }\n    if (type === \"refine\") {\n        return loadQARefineChain(llm, params);\n    }\n    throw new Error(`Invalid _type: ${type}`);\n};\n/**\n * Loads a StuffQAChain based on the provided parameters. It takes an LLM\n * instance and StuffQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a StuffQAChain.\n * @returns A StuffQAChain instance.\n */ function loadQAStuffChain(llm, params = {}) {\n    const { prompt = _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__.QA_PROMPT_SELECTOR.getPrompt(llm), verbose } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt,\n        llm,\n        verbose\n    });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.StuffDocumentsChain({\n        llmChain,\n        verbose\n    });\n    return chain;\n}\n/**\n * Loads a MapReduceQAChain based on the provided parameters. It takes an\n * LLM instance and MapReduceQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a MapReduceQAChain.\n * @returns A MapReduceQAChain instance.\n */ function loadQAMapReduceChain(llm, params = {}) {\n    const { combineMapPrompt = _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__.COMBINE_QA_PROMPT_SELECTOR.getPrompt(llm), combinePrompt = _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__.COMBINE_PROMPT_SELECTOR.getPrompt(llm), verbose, combineLLM, returnIntermediateSteps } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt: combineMapPrompt,\n        llm,\n        verbose\n    });\n    const combineLLMChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt: combinePrompt,\n        llm: combineLLM ?? llm,\n        verbose\n    });\n    const combineDocumentChain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.StuffDocumentsChain({\n        llmChain: combineLLMChain,\n        documentVariableName: \"summaries\",\n        verbose\n    });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.MapReduceDocumentsChain({\n        llmChain,\n        combineDocumentChain,\n        returnIntermediateSteps,\n        verbose\n    });\n    return chain;\n}\n/**\n * Loads a RefineQAChain based on the provided parameters. It takes an LLM\n * instance and RefineQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a RefineQAChain.\n * @returns A RefineQAChain instance.\n */ function loadQARefineChain(llm, params = {}) {\n    const { questionPrompt = _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__.QUESTION_PROMPT_SELECTOR.getPrompt(llm), refinePrompt = _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__.REFINE_PROMPT_SELECTOR.getPrompt(llm), refineLLM, verbose } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt: questionPrompt,\n        llm,\n        verbose\n    });\n    const refineLLMChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt: refinePrompt,\n        llm: refineLLM ?? llm,\n        verbose\n    });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.RefineDocumentsChain({\n        llmChain,\n        refineLLMChain,\n        verbose\n    });\n    return chain;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9sb2FkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUEyQztBQUNvRTtBQUN2RDtBQUN1QztBQUNQO0FBQ2pGLE1BQU1TLGNBQWMsQ0FBQ0MsS0FBS0MsU0FBUztJQUFFQyxNQUFNO0FBQVEsQ0FBQztJQUN2RCxNQUFNLEVBQUVBLElBQUksRUFBRSxHQUFHRDtJQUNqQixJQUFJQyxTQUFTLFNBQVM7UUFDbEIsT0FBT0MsaUJBQWlCSCxLQUFLQztJQUNqQztJQUNBLElBQUlDLFNBQVMsY0FBYztRQUN2QixPQUFPRSxxQkFBcUJKLEtBQUtDO0lBQ3JDO0lBQ0EsSUFBSUMsU0FBUyxVQUFVO1FBQ25CLE9BQU9HLGtCQUFrQkwsS0FBS0M7SUFDbEM7SUFDQSxNQUFNLElBQUlLLE1BQU0sQ0FBQyxlQUFlLEVBQUVKLEtBQUssQ0FBQztBQUM1QyxFQUFFO0FBQ0Y7Ozs7OztDQU1DLEdBQ00sU0FBU0MsaUJBQWlCSCxHQUFHLEVBQUVDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sRUFBRU0sU0FBU2IsaUVBQWtCQSxDQUFDYyxTQUFTLENBQUNSLElBQUksRUFBRVMsT0FBTyxFQUFFLEdBQUdSO0lBQ2hFLE1BQU1TLFdBQVcsSUFBSXBCLG1EQUFRQSxDQUFDO1FBQUVpQjtRQUFRUDtRQUFLUztJQUFRO0lBQ3JELE1BQU1FLFFBQVEsSUFBSXBCLHVFQUFtQkEsQ0FBQztRQUFFbUI7UUFBVUQ7SUFBUTtJQUMxRCxPQUFPRTtBQUNYO0FBQ0E7Ozs7OztDQU1DLEdBQ00sU0FBU1AscUJBQXFCSixHQUFHLEVBQUVDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sRUFBRVcsbUJBQW1CaEIsOEVBQTBCQSxDQUFDWSxTQUFTLENBQUNSLElBQUksRUFBRWEsZ0JBQWdCbEIsMkVBQXVCQSxDQUFDYSxTQUFTLENBQUNSLElBQUksRUFBRVMsT0FBTyxFQUFFSyxVQUFVLEVBQUVDLHVCQUF1QixFQUFHLEdBQUdkO0lBQ2hMLE1BQU1TLFdBQVcsSUFBSXBCLG1EQUFRQSxDQUFDO1FBQUVpQixRQUFRSztRQUFrQlo7UUFBS1M7SUFBUTtJQUN2RSxNQUFNTyxrQkFBa0IsSUFBSTFCLG1EQUFRQSxDQUFDO1FBQ2pDaUIsUUFBUU07UUFDUmIsS0FBS2MsY0FBY2Q7UUFDbkJTO0lBQ0o7SUFDQSxNQUFNUSx1QkFBdUIsSUFBSTFCLHVFQUFtQkEsQ0FBQztRQUNqRG1CLFVBQVVNO1FBQ1ZFLHNCQUFzQjtRQUN0QlQ7SUFDSjtJQUNBLE1BQU1FLFFBQVEsSUFBSW5CLDJFQUF1QkEsQ0FBQztRQUN0Q2tCO1FBQ0FPO1FBQ0FGO1FBQ0FOO0lBQ0o7SUFDQSxPQUFPRTtBQUNYO0FBQ0E7Ozs7OztDQU1DLEdBQ00sU0FBU04sa0JBQWtCTCxHQUFHLEVBQUVDLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sRUFBRWtCLGlCQUFpQnRCLHdFQUF3QkEsQ0FBQ1csU0FBUyxDQUFDUixJQUFJLEVBQUVvQixlQUFldEIsc0VBQXNCQSxDQUFDVSxTQUFTLENBQUNSLElBQUksRUFBRXFCLFNBQVMsRUFBRVosT0FBTyxFQUFHLEdBQUdSO0lBQ2hKLE1BQU1TLFdBQVcsSUFBSXBCLG1EQUFRQSxDQUFDO1FBQUVpQixRQUFRWTtRQUFnQm5CO1FBQUtTO0lBQVE7SUFDckUsTUFBTWEsaUJBQWlCLElBQUloQyxtREFBUUEsQ0FBQztRQUNoQ2lCLFFBQVFhO1FBQ1JwQixLQUFLcUIsYUFBYXJCO1FBQ2xCUztJQUNKO0lBQ0EsTUFBTUUsUUFBUSxJQUFJbEIsd0VBQW9CQSxDQUFDO1FBQ25DaUI7UUFDQVk7UUFDQWI7SUFDSjtJQUNBLE9BQU9FO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9sb2FkLmpzPzFmOWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi4vbGxtX2NoYWluLmpzXCI7XG5pbXBvcnQgeyBTdHVmZkRvY3VtZW50c0NoYWluLCBNYXBSZWR1Y2VEb2N1bWVudHNDaGFpbiwgUmVmaW5lRG9jdW1lbnRzQ2hhaW4sIH0gZnJvbSBcIi4uL2NvbWJpbmVfZG9jc19jaGFpbi5qc1wiO1xuaW1wb3J0IHsgUUFfUFJPTVBUX1NFTEVDVE9SIH0gZnJvbSBcIi4vc3R1ZmZfcHJvbXB0cy5qc1wiO1xuaW1wb3J0IHsgQ09NQklORV9QUk9NUFRfU0VMRUNUT1IsIENPTUJJTkVfUUFfUFJPTVBUX1NFTEVDVE9SLCB9IGZyb20gXCIuL21hcF9yZWR1Y2VfcHJvbXB0cy5qc1wiO1xuaW1wb3J0IHsgUVVFU1RJT05fUFJPTVBUX1NFTEVDVE9SLCBSRUZJTkVfUFJPTVBUX1NFTEVDVE9SLCB9IGZyb20gXCIuL3JlZmluZV9wcm9tcHRzLmpzXCI7XG5leHBvcnQgY29uc3QgbG9hZFFBQ2hhaW4gPSAobGxtLCBwYXJhbXMgPSB7IHR5cGU6IFwic3R1ZmZcIiB9KSA9PiB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSBwYXJhbXM7XG4gICAgaWYgKHR5cGUgPT09IFwic3R1ZmZcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBU3R1ZmZDaGFpbihsbG0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcIm1hcF9yZWR1Y2VcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBTWFwUmVkdWNlQ2hhaW4obGxtLCBwYXJhbXMpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gXCJyZWZpbmVcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBUmVmaW5lQ2hhaW4obGxtLCBwYXJhbXMpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgX3R5cGU6ICR7dHlwZX1gKTtcbn07XG4vKipcbiAqIExvYWRzIGEgU3R1ZmZRQUNoYWluIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiBJdCB0YWtlcyBhbiBMTE1cbiAqIGluc3RhbmNlIGFuZCBTdHVmZlFBQ2hhaW5QYXJhbXMgYXMgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBsbG0gQW4gaW5zdGFuY2Ugb2YgQmFzZUxhbmd1YWdlTW9kZWwuXG4gKiBAcGFyYW0gcGFyYW1zIFBhcmFtZXRlcnMgZm9yIGNyZWF0aW5nIGEgU3R1ZmZRQUNoYWluLlxuICogQHJldHVybnMgQSBTdHVmZlFBQ2hhaW4gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkUUFTdHVmZkNoYWluKGxsbSwgcGFyYW1zID0ge30pIHtcbiAgICBjb25zdCB7IHByb21wdCA9IFFBX1BST01QVF9TRUxFQ1RPUi5nZXRQcm9tcHQobGxtKSwgdmVyYm9zZSB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGxsbUNoYWluID0gbmV3IExMTUNoYWluKHsgcHJvbXB0LCBsbG0sIHZlcmJvc2UgfSk7XG4gICAgY29uc3QgY2hhaW4gPSBuZXcgU3R1ZmZEb2N1bWVudHNDaGFpbih7IGxsbUNoYWluLCB2ZXJib3NlIH0pO1xuICAgIHJldHVybiBjaGFpbjtcbn1cbi8qKlxuICogTG9hZHMgYSBNYXBSZWR1Y2VRQUNoYWluIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiBJdCB0YWtlcyBhblxuICogTExNIGluc3RhbmNlIGFuZCBNYXBSZWR1Y2VRQUNoYWluUGFyYW1zIGFzIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0gbGxtIEFuIGluc3RhbmNlIG9mIEJhc2VMYW5ndWFnZU1vZGVsLlxuICogQHBhcmFtIHBhcmFtcyBQYXJhbWV0ZXJzIGZvciBjcmVhdGluZyBhIE1hcFJlZHVjZVFBQ2hhaW4uXG4gKiBAcmV0dXJucyBBIE1hcFJlZHVjZVFBQ2hhaW4gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkUUFNYXBSZWR1Y2VDaGFpbihsbG0sIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgeyBjb21iaW5lTWFwUHJvbXB0ID0gQ09NQklORV9RQV9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIGNvbWJpbmVQcm9tcHQgPSBDT01CSU5FX1BST01QVF9TRUxFQ1RPUi5nZXRQcm9tcHQobGxtKSwgdmVyYm9zZSwgY29tYmluZUxMTSwgcmV0dXJuSW50ZXJtZWRpYXRlU3RlcHMsIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgbGxtQ2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBwcm9tcHQ6IGNvbWJpbmVNYXBQcm9tcHQsIGxsbSwgdmVyYm9zZSB9KTtcbiAgICBjb25zdCBjb21iaW5lTExNQ2hhaW4gPSBuZXcgTExNQ2hhaW4oe1xuICAgICAgICBwcm9tcHQ6IGNvbWJpbmVQcm9tcHQsXG4gICAgICAgIGxsbTogY29tYmluZUxMTSA/PyBsbG0sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgY29uc3QgY29tYmluZURvY3VtZW50Q2hhaW4gPSBuZXcgU3R1ZmZEb2N1bWVudHNDaGFpbih7XG4gICAgICAgIGxsbUNoYWluOiBjb21iaW5lTExNQ2hhaW4sXG4gICAgICAgIGRvY3VtZW50VmFyaWFibGVOYW1lOiBcInN1bW1hcmllc1wiLFxuICAgICAgICB2ZXJib3NlLFxuICAgIH0pO1xuICAgIGNvbnN0IGNoYWluID0gbmV3IE1hcFJlZHVjZURvY3VtZW50c0NoYWluKHtcbiAgICAgICAgbGxtQ2hhaW4sXG4gICAgICAgIGNvbWJpbmVEb2N1bWVudENoYWluLFxuICAgICAgICByZXR1cm5JbnRlcm1lZGlhdGVTdGVwcyxcbiAgICAgICAgdmVyYm9zZSxcbiAgICB9KTtcbiAgICByZXR1cm4gY2hhaW47XG59XG4vKipcbiAqIExvYWRzIGEgUmVmaW5lUUFDaGFpbiBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycy4gSXQgdGFrZXMgYW4gTExNXG4gKiBpbnN0YW5jZSBhbmQgUmVmaW5lUUFDaGFpblBhcmFtcyBhcyBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIGxsbSBBbiBpbnN0YW5jZSBvZiBCYXNlTGFuZ3VhZ2VNb2RlbC5cbiAqIEBwYXJhbSBwYXJhbXMgUGFyYW1ldGVycyBmb3IgY3JlYXRpbmcgYSBSZWZpbmVRQUNoYWluLlxuICogQHJldHVybnMgQSBSZWZpbmVRQUNoYWluIGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZFFBUmVmaW5lQ2hhaW4obGxtLCBwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHsgcXVlc3Rpb25Qcm9tcHQgPSBRVUVTVElPTl9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIHJlZmluZVByb21wdCA9IFJFRklORV9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIHJlZmluZUxMTSwgdmVyYm9zZSwgfSA9IHBhcmFtcztcbiAgICBjb25zdCBsbG1DaGFpbiA9IG5ldyBMTE1DaGFpbih7IHByb21wdDogcXVlc3Rpb25Qcm9tcHQsIGxsbSwgdmVyYm9zZSB9KTtcbiAgICBjb25zdCByZWZpbmVMTE1DaGFpbiA9IG5ldyBMTE1DaGFpbih7XG4gICAgICAgIHByb21wdDogcmVmaW5lUHJvbXB0LFxuICAgICAgICBsbG06IHJlZmluZUxMTSA/PyBsbG0sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgY29uc3QgY2hhaW4gPSBuZXcgUmVmaW5lRG9jdW1lbnRzQ2hhaW4oe1xuICAgICAgICBsbG1DaGFpbixcbiAgICAgICAgcmVmaW5lTExNQ2hhaW4sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgcmV0dXJuIGNoYWluO1xufVxuIl0sIm5hbWVzIjpbIkxMTUNoYWluIiwiU3R1ZmZEb2N1bWVudHNDaGFpbiIsIk1hcFJlZHVjZURvY3VtZW50c0NoYWluIiwiUmVmaW5lRG9jdW1lbnRzQ2hhaW4iLCJRQV9QUk9NUFRfU0VMRUNUT1IiLCJDT01CSU5FX1BST01QVF9TRUxFQ1RPUiIsIkNPTUJJTkVfUUFfUFJPTVBUX1NFTEVDVE9SIiwiUVVFU1RJT05fUFJPTVBUX1NFTEVDVE9SIiwiUkVGSU5FX1BST01QVF9TRUxFQ1RPUiIsImxvYWRRQUNoYWluIiwibGxtIiwicGFyYW1zIiwidHlwZSIsImxvYWRRQVN0dWZmQ2hhaW4iLCJsb2FkUUFNYXBSZWR1Y2VDaGFpbiIsImxvYWRRQVJlZmluZUNoYWluIiwiRXJyb3IiLCJwcm9tcHQiLCJnZXRQcm9tcHQiLCJ2ZXJib3NlIiwibGxtQ2hhaW4iLCJjaGFpbiIsImNvbWJpbmVNYXBQcm9tcHQiLCJjb21iaW5lUHJvbXB0IiwiY29tYmluZUxMTSIsInJldHVybkludGVybWVkaWF0ZVN0ZXBzIiwiY29tYmluZUxMTUNoYWluIiwiY29tYmluZURvY3VtZW50Q2hhaW4iLCJkb2N1bWVudFZhcmlhYmxlTmFtZSIsInF1ZXN0aW9uUHJvbXB0IiwicmVmaW5lUHJvbXB0IiwicmVmaW5lTExNIiwicmVmaW5lTExNQ2hhaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COMBINE_PROMPT: () => (/* binding */ COMBINE_PROMPT),\n/* harmony export */   COMBINE_PROMPT_SELECTOR: () => (/* binding */ COMBINE_PROMPT_SELECTOR),\n/* harmony export */   COMBINE_QA_PROMPT_SELECTOR: () => (/* binding */ COMBINE_QA_PROMPT_SELECTOR),\n/* harmony export */   DEFAULT_COMBINE_QA_PROMPT: () => (/* binding */ DEFAULT_COMBINE_QA_PROMPT)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */ \n\nconst qa_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:`;\nconst DEFAULT_COMBINE_QA_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(qa_template);\nconst system_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n----------------\n{context}`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\")\n];\nconst CHAT_QA_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst COMBINE_QA_PROMPT_SELECTOR = /*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_COMBINE_QA_PROMPT, [\n    [\n        _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel,\n        CHAT_QA_PROMPT\n    ]\n]);\nconst combine_prompt = `Given the following extracted parts of a long document and a question, create a final answer. \nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\n\nQUESTION: Which state/country's law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\n\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\\n\\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\\n\\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\\n\\n11.9 No Third-Party Beneficiaries.\n\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\n=========\nFINAL ANSWER: This Agreement is governed by English law.\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \\n\\nLast year COVID-19 kept us apart. This year we are finally together again. \\n\\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \\n\\nWith a duty to one another to the American people to the Constitution. \\n\\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \\n\\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \\n\\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \\n\\nHe met the Ukrainian people. \\n\\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \\n\\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\n\nContent: And we won’t stop. \\n\\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \\n\\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \\n\\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \\n\\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \\n\\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \\n\\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \\n\\nOfficer Mora was 27 years old. \\n\\nOfficer Rivera was 22. \\n\\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \\n\\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\n\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \\n\\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \\n\\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \\n\\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \\n\\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \\n\\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \\n\\nBut I want you to know that we are going to be okay.\n\nContent: More support for patients and families. \\n\\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \\n\\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \\n\\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \\n\\nA unity agenda for the nation. \\n\\nWe can do this. \\n\\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \\n\\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \\n\\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \\n\\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \\n\\nNow is the hour. \\n\\nOur moment of responsibility. \\n\\nOur test of resolve and conscience, of history itself. \\n\\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \\n\\nWell I know this nation.\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:`;\nconst COMBINE_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(combine_prompt);\nconst system_combine_template = `Given the following extracted parts of a long document and a question, create a final answer. \nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\n----------------\n{summaries}`;\nconst combine_messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_combine_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\")\n];\nconst CHAT_COMBINE_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(combine_messages);\nconst COMBINE_PROMPT_SELECTOR = /*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(COMBINE_PROMPT, [\n    [\n        _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel,\n        CHAT_COMBINE_PROMPT\n    ]\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/refine_prompts.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHAT_QUESTION_PROMPT: () => (/* binding */ CHAT_QUESTION_PROMPT),\n/* harmony export */   CHAT_REFINE_PROMPT: () => (/* binding */ CHAT_REFINE_PROMPT),\n/* harmony export */   DEFAULT_REFINE_PROMPT: () => (/* binding */ DEFAULT_REFINE_PROMPT),\n/* harmony export */   DEFAULT_REFINE_PROMPT_TMPL: () => (/* binding */ DEFAULT_REFINE_PROMPT_TMPL),\n/* harmony export */   DEFAULT_TEXT_QA_PROMPT: () => (/* binding */ DEFAULT_TEXT_QA_PROMPT),\n/* harmony export */   DEFAULT_TEXT_QA_PROMPT_TMPL: () => (/* binding */ DEFAULT_TEXT_QA_PROMPT_TMPL),\n/* harmony export */   QUESTION_PROMPT_SELECTOR: () => (/* binding */ QUESTION_PROMPT_SELECTOR),\n/* harmony export */   REFINE_PROMPT_SELECTOR: () => (/* binding */ REFINE_PROMPT_SELECTOR)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */ \n\nconst DEFAULT_REFINE_PROMPT_TMPL = `The original question is as follows: {question}\nWe have provided an existing answer: {existing_answer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the question. \nIf the context isn't useful, return the original answer.`;\nconst DEFAULT_REFINE_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\n        \"question\",\n        \"existing_answer\",\n        \"context\"\n    ],\n    template: DEFAULT_REFINE_PROMPT_TMPL\n});\nconst refineTemplate = `The original question is as follows: {question}\nWe have provided an existing answer: {existing_answer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the question. \nIf the context isn't useful, return the original answer.`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.AIMessagePromptTemplate.fromTemplate(\"{existing_answer}\"),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(refineTemplate)\n];\nconst CHAT_REFINE_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst REFINE_PROMPT_SELECTOR = /*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_REFINE_PROMPT, [\n    [\n        _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel,\n        CHAT_REFINE_PROMPT\n    ]\n]);\nconst DEFAULT_TEXT_QA_PROMPT_TMPL = `Context information is below. \n---------------------\n{context}\n---------------------\nGiven the context information and no prior knowledge, answer the question: {question}`;\nconst DEFAULT_TEXT_QA_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\n        \"context\",\n        \"question\"\n    ],\n    template: DEFAULT_TEXT_QA_PROMPT_TMPL\n});\nconst chat_qa_prompt_template = `Context information is below. \n---------------------\n{context}\n---------------------\nGiven the context information and no prior knowledge, answer any questions`;\nconst chat_messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(chat_qa_prompt_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\")\n];\nconst CHAT_QUESTION_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(chat_messages);\nconst QUESTION_PROMPT_SELECTOR = /*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_TEXT_QA_PROMPT, [\n    [\n        _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel,\n        CHAT_QUESTION_PROMPT\n    ]\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9yZWZpbmVfcHJvbXB0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQWlDLEdBQytIO0FBQ3BFO0FBQ3JGLE1BQU1PLDZCQUE2QixDQUFDOzs7Ozs7Ozt3REFRYSxDQUFDLENBQUM7QUFDbkQsTUFBTUMsd0JBQXdCLFdBQVcsR0FBRyxJQUFJUixtRUFBY0EsQ0FBQztJQUNsRVMsZ0JBQWdCO1FBQUM7UUFBWTtRQUFtQjtLQUFVO0lBQzFEQyxVQUFVSDtBQUNkLEdBQUc7QUFDSCxNQUFNSSxpQkFBaUIsQ0FBQzs7Ozs7Ozs7d0RBUWdDLENBQUM7QUFDekQsTUFBTUMsV0FBVztJQUNiLFdBQVcsR0FBR1QsK0VBQTBCQSxDQUFDVSxZQUFZLENBQUM7SUFDdEQsV0FBVyxHQUFHVCw0RUFBdUJBLENBQUNTLFlBQVksQ0FBQztJQUNuRCxXQUFXLEdBQUdWLCtFQUEwQkEsQ0FBQ1UsWUFBWSxDQUFDRjtDQUN6RDtBQUNNLE1BQU1HLHFCQUNiLFdBQVcsR0FBR2IsdUVBQWtCQSxDQUFDYyxZQUFZLENBQUNILFVBQVU7QUFDakQsTUFBTUkseUJBQ2IsV0FBVyxHQUFHLElBQUlYLHdGQUF5QkEsQ0FBQ0csdUJBQXVCO0lBQy9EO1FBQUNGLDBFQUFXQTtRQUFFUTtLQUFtQjtDQUNwQyxFQUFFO0FBQ0ksTUFBTUcsOEJBQThCLENBQUM7Ozs7cUZBSXlDLENBQUMsQ0FBQztBQUNoRixNQUFNQyx5QkFBeUIsV0FBVyxHQUFHLElBQUlsQixtRUFBY0EsQ0FBQztJQUNuRVMsZ0JBQWdCO1FBQUM7UUFBVztLQUFXO0lBQ3ZDQyxVQUFVTztBQUNkLEdBQUc7QUFDSCxNQUFNRSwwQkFBMEIsQ0FBQzs7OzswRUFJeUMsQ0FBQztBQUMzRSxNQUFNQyxnQkFBZ0I7SUFDbEIsV0FBVyxHQUFHbEIsZ0ZBQTJCQSxDQUFDVyxZQUFZLENBQUNNO0lBQ3ZELFdBQVcsR0FBR2hCLCtFQUEwQkEsQ0FBQ1UsWUFBWSxDQUFDO0NBQ3pEO0FBQ00sTUFBTVEsdUJBQ2IsV0FBVyxHQUFHcEIsdUVBQWtCQSxDQUFDYyxZQUFZLENBQUNLLGVBQWU7QUFDdEQsTUFBTUUsMkJBQ2IsV0FBVyxHQUFHLElBQUlqQix3RkFBeUJBLENBQUNhLHdCQUF3QjtJQUNoRTtRQUFDWiwwRUFBV0E7UUFBRWU7S0FBcUI7Q0FDdEMsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvcXVlc3Rpb25fYW5zd2VyaW5nL3JlZmluZV9wcm9tcHRzLmpzP2IzNWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgc3BhY2VkLWNvbW1lbnQgKi9cbmltcG9ydCB7IFByb21wdFRlbXBsYXRlLCBDaGF0UHJvbXB0VGVtcGxhdGUsIFN5c3RlbU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZSwgSHVtYW5NZXNzYWdlUHJvbXB0VGVtcGxhdGUsIEFJTWVzc2FnZVByb21wdFRlbXBsYXRlLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuaW1wb3J0IHsgQ29uZGl0aW9uYWxQcm9tcHRTZWxlY3RvciwgaXNDaGF0TW9kZWwsIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9leGFtcGxlX3NlbGVjdG9yc1wiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkVGSU5FX1BST01QVF9UTVBMID0gYFRoZSBvcmlnaW5hbCBxdWVzdGlvbiBpcyBhcyBmb2xsb3dzOiB7cXVlc3Rpb259XG5XZSBoYXZlIHByb3ZpZGVkIGFuIGV4aXN0aW5nIGFuc3dlcjoge2V4aXN0aW5nX2Fuc3dlcn1cbldlIGhhdmUgdGhlIG9wcG9ydHVuaXR5IHRvIHJlZmluZSB0aGUgZXhpc3RpbmcgYW5zd2VyXG4ob25seSBpZiBuZWVkZWQpIHdpdGggc29tZSBtb3JlIGNvbnRleHQgYmVsb3cuXG4tLS0tLS0tLS0tLS1cbntjb250ZXh0fVxuLS0tLS0tLS0tLS0tXG5HaXZlbiB0aGUgbmV3IGNvbnRleHQsIHJlZmluZSB0aGUgb3JpZ2luYWwgYW5zd2VyIHRvIGJldHRlciBhbnN3ZXIgdGhlIHF1ZXN0aW9uLiBcbklmIHRoZSBjb250ZXh0IGlzbid0IHVzZWZ1bCwgcmV0dXJuIHRoZSBvcmlnaW5hbCBhbnN3ZXIuYDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFRklORV9QUk9NUFQgPSAvKiNfX1BVUkVfXyovIG5ldyBQcm9tcHRUZW1wbGF0ZSh7XG4gICAgaW5wdXRWYXJpYWJsZXM6IFtcInF1ZXN0aW9uXCIsIFwiZXhpc3RpbmdfYW5zd2VyXCIsIFwiY29udGV4dFwiXSxcbiAgICB0ZW1wbGF0ZTogREVGQVVMVF9SRUZJTkVfUFJPTVBUX1RNUEwsXG59KTtcbmNvbnN0IHJlZmluZVRlbXBsYXRlID0gYFRoZSBvcmlnaW5hbCBxdWVzdGlvbiBpcyBhcyBmb2xsb3dzOiB7cXVlc3Rpb259XG5XZSBoYXZlIHByb3ZpZGVkIGFuIGV4aXN0aW5nIGFuc3dlcjoge2V4aXN0aW5nX2Fuc3dlcn1cbldlIGhhdmUgdGhlIG9wcG9ydHVuaXR5IHRvIHJlZmluZSB0aGUgZXhpc3RpbmcgYW5zd2VyXG4ob25seSBpZiBuZWVkZWQpIHdpdGggc29tZSBtb3JlIGNvbnRleHQgYmVsb3cuXG4tLS0tLS0tLS0tLS1cbntjb250ZXh0fVxuLS0tLS0tLS0tLS0tXG5HaXZlbiB0aGUgbmV3IGNvbnRleHQsIHJlZmluZSB0aGUgb3JpZ2luYWwgYW5zd2VyIHRvIGJldHRlciBhbnN3ZXIgdGhlIHF1ZXN0aW9uLiBcbklmIHRoZSBjb250ZXh0IGlzbid0IHVzZWZ1bCwgcmV0dXJuIHRoZSBvcmlnaW5hbCBhbnN3ZXIuYDtcbmNvbnN0IG1lc3NhZ2VzID0gW1xuICAgIC8qI19fUFVSRV9fKi8gSHVtYW5NZXNzYWdlUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKFwie3F1ZXN0aW9ufVwiKSxcbiAgICAvKiNfX1BVUkVfXyovIEFJTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcIntleGlzdGluZ19hbnN3ZXJ9XCIpLFxuICAgIC8qI19fUFVSRV9fKi8gSHVtYW5NZXNzYWdlUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKHJlZmluZVRlbXBsYXRlKSxcbl07XG5leHBvcnQgY29uc3QgQ0hBVF9SRUZJTkVfUFJPTVBUID0gXG4vKiNfX1BVUkVfXyovIENoYXRQcm9tcHRUZW1wbGF0ZS5mcm9tTWVzc2FnZXMobWVzc2FnZXMpO1xuZXhwb3J0IGNvbnN0IFJFRklORV9QUk9NUFRfU0VMRUNUT1IgPSBcbi8qI19fUFVSRV9fKi8gbmV3IENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IoREVGQVVMVF9SRUZJTkVfUFJPTVBULCBbXG4gICAgW2lzQ2hhdE1vZGVsLCBDSEFUX1JFRklORV9QUk9NUFRdLFxuXSk7XG5leHBvcnQgY29uc3QgREVGQVVMVF9URVhUX1FBX1BST01QVF9UTVBMID0gYENvbnRleHQgaW5mb3JtYXRpb24gaXMgYmVsb3cuIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG57Y29udGV4dH1cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuR2l2ZW4gdGhlIGNvbnRleHQgaW5mb3JtYXRpb24gYW5kIG5vIHByaW9yIGtub3dsZWRnZSwgYW5zd2VyIHRoZSBxdWVzdGlvbjoge3F1ZXN0aW9ufWA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9URVhUX1FBX1BST01QVCA9IC8qI19fUFVSRV9fKi8gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICBpbnB1dFZhcmlhYmxlczogW1wiY29udGV4dFwiLCBcInF1ZXN0aW9uXCJdLFxuICAgIHRlbXBsYXRlOiBERUZBVUxUX1RFWFRfUUFfUFJPTVBUX1RNUEwsXG59KTtcbmNvbnN0IGNoYXRfcWFfcHJvbXB0X3RlbXBsYXRlID0gYENvbnRleHQgaW5mb3JtYXRpb24gaXMgYmVsb3cuIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG57Y29udGV4dH1cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuR2l2ZW4gdGhlIGNvbnRleHQgaW5mb3JtYXRpb24gYW5kIG5vIHByaW9yIGtub3dsZWRnZSwgYW5zd2VyIGFueSBxdWVzdGlvbnNgO1xuY29uc3QgY2hhdF9tZXNzYWdlcyA9IFtcbiAgICAvKiNfX1BVUkVfXyovIFN5c3RlbU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZS5mcm9tVGVtcGxhdGUoY2hhdF9xYV9wcm9tcHRfdGVtcGxhdGUpLFxuICAgIC8qI19fUFVSRV9fKi8gSHVtYW5NZXNzYWdlUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKFwie3F1ZXN0aW9ufVwiKSxcbl07XG5leHBvcnQgY29uc3QgQ0hBVF9RVUVTVElPTl9QUk9NUFQgPSBcbi8qI19fUFVSRV9fKi8gQ2hhdFByb21wdFRlbXBsYXRlLmZyb21NZXNzYWdlcyhjaGF0X21lc3NhZ2VzKTtcbmV4cG9ydCBjb25zdCBRVUVTVElPTl9QUk9NUFRfU0VMRUNUT1IgPSBcbi8qI19fUFVSRV9fKi8gbmV3IENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IoREVGQVVMVF9URVhUX1FBX1BST01QVCwgW1xuICAgIFtpc0NoYXRNb2RlbCwgQ0hBVF9RVUVTVElPTl9QUk9NUFRdLFxuXSk7XG4iXSwibmFtZXMiOlsiUHJvbXB0VGVtcGxhdGUiLCJDaGF0UHJvbXB0VGVtcGxhdGUiLCJTeXN0ZW1NZXNzYWdlUHJvbXB0VGVtcGxhdGUiLCJIdW1hbk1lc3NhZ2VQcm9tcHRUZW1wbGF0ZSIsIkFJTWVzc2FnZVByb21wdFRlbXBsYXRlIiwiQ29uZGl0aW9uYWxQcm9tcHRTZWxlY3RvciIsImlzQ2hhdE1vZGVsIiwiREVGQVVMVF9SRUZJTkVfUFJPTVBUX1RNUEwiLCJERUZBVUxUX1JFRklORV9QUk9NUFQiLCJpbnB1dFZhcmlhYmxlcyIsInRlbXBsYXRlIiwicmVmaW5lVGVtcGxhdGUiLCJtZXNzYWdlcyIsImZyb21UZW1wbGF0ZSIsIkNIQVRfUkVGSU5FX1BST01QVCIsImZyb21NZXNzYWdlcyIsIlJFRklORV9QUk9NUFRfU0VMRUNUT1IiLCJERUZBVUxUX1RFWFRfUUFfUFJPTVBUX1RNUEwiLCJERUZBVUxUX1RFWFRfUUFfUFJPTVBUIiwiY2hhdF9xYV9wcm9tcHRfdGVtcGxhdGUiLCJjaGF0X21lc3NhZ2VzIiwiQ0hBVF9RVUVTVElPTl9QUk9NUFQiLCJRVUVTVElPTl9QUk9NUFRfU0VMRUNUT1IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js":
/*!********************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_QA_PROMPT: () => (/* binding */ DEFAULT_QA_PROMPT),\n/* harmony export */   QA_PROMPT_SELECTOR: () => (/* binding */ QA_PROMPT_SELECTOR)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */ \n\nconst DEFAULT_QA_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    template: \"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\\n\\n{context}\\n\\nQuestion: {question}\\nHelpful Answer:\",\n    inputVariables: [\n        \"context\",\n        \"question\"\n    ]\n});\nconst system_template = `Use the following pieces of context to answer the users question. \nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\")\n];\nconst CHAT_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst QA_PROMPT_SELECTOR = /*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_QA_PROMPT, [\n    [\n        _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel,\n        CHAT_PROMPT\n    ]\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9zdHVmZl9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxpQ0FBaUMsR0FDc0c7QUFDM0M7QUFDckYsTUFBTU0sb0JBQW9CLFdBQVcsR0FBRyxJQUFJSCxtRUFBY0EsQ0FBQztJQUM5REksVUFBVTtJQUNWQyxnQkFBZ0I7UUFBQztRQUFXO0tBQVc7QUFDM0MsR0FBRztBQUNILE1BQU1DLGtCQUFrQixDQUFDOzs7U0FHaEIsQ0FBQztBQUNWLE1BQU1DLFdBQVc7SUFDYixXQUFXLEdBQUdULGdGQUEyQkEsQ0FBQ1UsWUFBWSxDQUFDRjtJQUN2RCxXQUFXLEdBQUdQLCtFQUEwQkEsQ0FBQ1MsWUFBWSxDQUFDO0NBQ3pEO0FBQ0QsTUFBTUMsY0FBYyxXQUFXLEdBQUdaLHVFQUFrQkEsQ0FBQ2EsWUFBWSxDQUFDSDtBQUMzRCxNQUFNSSxxQkFBcUIsV0FBVyxHQUFHLElBQUlWLHdGQUF5QkEsQ0FBQ0UsbUJBQW1CO0lBQUM7UUFBQ0QsMEVBQVdBO1FBQUVPO0tBQVk7Q0FBQyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9xdWVzdGlvbl9hbnN3ZXJpbmcvc3R1ZmZfcHJvbXB0cy5qcz85NzllIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHNwYWNlZC1jb21tZW50ICovXG5pbXBvcnQgeyBDaGF0UHJvbXB0VGVtcGxhdGUsIFN5c3RlbU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZSwgSHVtYW5NZXNzYWdlUHJvbXB0VGVtcGxhdGUsIFByb21wdFRlbXBsYXRlLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuaW1wb3J0IHsgQ29uZGl0aW9uYWxQcm9tcHRTZWxlY3RvciwgaXNDaGF0TW9kZWwsIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9leGFtcGxlX3NlbGVjdG9yc1wiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUUFfUFJPTVBUID0gLyojX19QVVJFX18qLyBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICAgIHRlbXBsYXRlOiBcIlVzZSB0aGUgZm9sbG93aW5nIHBpZWNlcyBvZiBjb250ZXh0IHRvIGFuc3dlciB0aGUgcXVlc3Rpb24gYXQgdGhlIGVuZC4gSWYgeW91IGRvbid0IGtub3cgdGhlIGFuc3dlciwganVzdCBzYXkgdGhhdCB5b3UgZG9uJ3Qga25vdywgZG9uJ3QgdHJ5IHRvIG1ha2UgdXAgYW4gYW5zd2VyLlxcblxcbntjb250ZXh0fVxcblxcblF1ZXN0aW9uOiB7cXVlc3Rpb259XFxuSGVscGZ1bCBBbnN3ZXI6XCIsXG4gICAgaW5wdXRWYXJpYWJsZXM6IFtcImNvbnRleHRcIiwgXCJxdWVzdGlvblwiXSxcbn0pO1xuY29uc3Qgc3lzdGVtX3RlbXBsYXRlID0gYFVzZSB0aGUgZm9sbG93aW5nIHBpZWNlcyBvZiBjb250ZXh0IHRvIGFuc3dlciB0aGUgdXNlcnMgcXVlc3Rpb24uIFxuSWYgeW91IGRvbid0IGtub3cgdGhlIGFuc3dlciwganVzdCBzYXkgdGhhdCB5b3UgZG9uJ3Qga25vdywgZG9uJ3QgdHJ5IHRvIG1ha2UgdXAgYW4gYW5zd2VyLlxuLS0tLS0tLS0tLS0tLS0tLVxue2NvbnRleHR9YDtcbmNvbnN0IG1lc3NhZ2VzID0gW1xuICAgIC8qI19fUFVSRV9fKi8gU3lzdGVtTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShzeXN0ZW1fdGVtcGxhdGUpLFxuICAgIC8qI19fUFVSRV9fKi8gSHVtYW5NZXNzYWdlUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKFwie3F1ZXN0aW9ufVwiKSxcbl07XG5jb25zdCBDSEFUX1BST01QVCA9IC8qI19fUFVSRV9fKi8gQ2hhdFByb21wdFRlbXBsYXRlLmZyb21NZXNzYWdlcyhtZXNzYWdlcyk7XG5leHBvcnQgY29uc3QgUUFfUFJPTVBUX1NFTEVDVE9SID0gLyojX19QVVJFX18qLyBuZXcgQ29uZGl0aW9uYWxQcm9tcHRTZWxlY3RvcihERUZBVUxUX1FBX1BST01QVCwgW1tpc0NoYXRNb2RlbCwgQ0hBVF9QUk9NUFRdXSk7XG4iXSwibmFtZXMiOlsiQ2hhdFByb21wdFRlbXBsYXRlIiwiU3lzdGVtTWVzc2FnZVByb21wdFRlbXBsYXRlIiwiSHVtYW5NZXNzYWdlUHJvbXB0VGVtcGxhdGUiLCJQcm9tcHRUZW1wbGF0ZSIsIkNvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IiLCJpc0NoYXRNb2RlbCIsIkRFRkFVTFRfUUFfUFJPTVBUIiwidGVtcGxhdGUiLCJpbnB1dFZhcmlhYmxlcyIsInN5c3RlbV90ZW1wbGF0ZSIsIm1lc3NhZ2VzIiwiZnJvbVRlbXBsYXRlIiwiQ0hBVF9QUk9NUFQiLCJmcm9tTWVzc2FnZXMiLCJRQV9QUk9NUFRfU0VMRUNUT1IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/sequential_chain.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SequentialChain: () => (/* binding */ SequentialChain),\n/* harmony export */   SimpleSequentialChain: () => (/* binding */ SimpleSequentialChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _util_set_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/set.js */ \"(rsc)/./node_modules/langchain/dist/util/set.js\");\n\n\nfunction formatSet(input) {\n    return Array.from(input).map((i)=>`\"${i}\"`).join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n * @example\n * ```typescript\n * const promptTemplate = new PromptTemplate({\n *   template: `You are a playwright. Given the title of play and the era it is set in, it is your job to write a synopsis for that title.\n * Title: {title}\n * Era: {era}\n * Playwright: This is a synopsis for the above play:`,\n *   inputVariables: [\"title\", \"era\"],\n * });\n\n * const reviewPromptTemplate = new PromptTemplate({\n *   template: `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n *     Play Synopsis:\n *     {synopsis}\n *     Review from a New York Times play critic of the above play:`,\n *   inputVariables: [\"synopsis\"],\n * });\n\n * const overallChain = new SequentialChain({\n *   chains: [\n *     new LLMChain({\n *       llm: new ChatOpenAI({ temperature: 0 }),\n *       prompt: promptTemplate,\n *       outputKey: \"synopsis\",\n *     }),\n *     new LLMChain({\n *       llm: new OpenAI({ temperature: 0 }),\n *       prompt: reviewPromptTemplate,\n *       outputKey: \"review\",\n *     }),\n *   ],\n *   inputVariables: [\"era\", \"title\"],\n *   outputVariables: [\"synopsis\", \"review\"],\n *   verbose: true,\n * });\n\n * const chainExecutionResult = await overallChain.call({\n *   title: \"Tragedy at sunset on the beach\",\n *   era: \"Victorian England\",\n * });\n * console.log(chainExecutionResult);\n * ```\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/expression_language/ | expression language}.\n * Will be removed in 0.2.0\n */ class SequentialChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"SequentialChain\";\n    }\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */ _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.intersection)(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.union)(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains){\n            let missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(new Set(chain.inputKeys), availableKeys);\n            if (chain.memory) {\n                missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(missingKeys, new Set(chain.memory.memoryKeys));\n            }\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappingOutputKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.intersection)(availableKeys, outputKeysSet);\n            if (overlappingOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet){\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            } else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        } else {\n            const missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */ async _call(values, runManager) {\n        let input = {};\n        const allChainValues = values;\n        let i = 0;\n        for (const chain of this.chains){\n            i += 1;\n            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));\n            for (const key of Object.keys(input)){\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables){\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains){\n            const deserializedChain = await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({\n            chains,\n            inputVariables,\n            outputVariables\n        });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains){\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains\n        };\n    }\n}\n/**\n * @deprecated Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */ class SimpleSequentialChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"SimpleSequentialChain\";\n    }\n    get inputKeys() {\n        return [\n            this.inputKey\n        ];\n    }\n    get outputKeys() {\n        return [\n            this.outputKey\n        ];\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */ _validateChains() {\n        for (const chain of this.chains){\n            if (chain.inputKeys.filter((k)=>!chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */ async _call(values, runManager) {\n        let input = values[this.inputKey];\n        let i = 0;\n        for (const chain of this.chains){\n            i += 1;\n            input = (await chain.call({\n                [chain.inputKeys[0]]: input,\n                signal: values.signal\n            }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return {\n            [this.outputKey]: input\n        };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains){\n            const deserializedChain = await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({\n            chains\n        });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains){\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3NlcXVlbnRpYWxfY2hhaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzQztBQUMyQjtBQUNqRSxTQUFTSSxVQUFVQyxLQUFLO0lBQ3BCLE9BQU9DLE1BQU1DLElBQUksQ0FBQ0YsT0FDYkcsR0FBRyxDQUFDLENBQUNDLElBQU0sQ0FBQyxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxDQUFDLEVBQ25CQyxJQUFJLENBQUM7QUFDZDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBaURDLEdBQ00sTUFBTUMsd0JBQXdCWCwrQ0FBU0E7SUFDMUMsT0FBT1ksVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBLElBQUlDLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQ0MsY0FBYztJQUM5QjtJQUNBLElBQUlDLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQ0MsZUFBZTtJQUMvQjtJQUNBQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQjtZQUMxQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLE1BQU0sR0FB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N0QsUUFBUUEsTUFBTWtFLElBQUk7WUFDdEI7WUFDQSxNQUFNeEIsWUFBWXlCLFdBQVduRTtRQUNqQztRQUNBLE9BQU87WUFBRSxDQUFDLElBQUksQ0FBQ3NDLFNBQVMsQ0FBQyxFQUFFdEM7UUFBTTtJQUNyQztJQUNBbUMsYUFBYTtRQUNULE9BQU87SUFDWDtJQUNBLGFBQWFjLFlBQVlDLElBQUksRUFBRTtRQUMzQixNQUFNOUIsU0FBUyxFQUFFO1FBQ2pCLE1BQU1pQyxtQkFBbUJILEtBQUs5QixNQUFNO1FBQ3BDLEtBQUssTUFBTWtDLG1CQUFtQkQsaUJBQWtCO1lBQzVDLE1BQU1FLG9CQUFvQixNQUFNNUQsK0NBQVNBLENBQUNzRCxXQUFXLENBQUNLO1lBQ3REbEMsT0FBT29DLElBQUksQ0FBQ0Q7UUFDaEI7UUFDQSxPQUFPLElBQUlJLHNCQUFzQjtZQUFFdkM7UUFBTztJQUM5QztJQUNBcUMsWUFBWTtRQUNSLE1BQU1yQyxTQUFTLEVBQUU7UUFDakIsS0FBSyxNQUFNYSxTQUFTLElBQUksQ0FBQ2IsTUFBTSxDQUFFO1lBQzdCQSxPQUFPb0MsSUFBSSxDQUFDdkIsTUFBTXdCLFNBQVM7UUFDL0I7UUFDQSxPQUFPO1lBQ0hDLE9BQU8sSUFBSSxDQUFDdkIsVUFBVTtZQUN0QmY7UUFDSjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3NlcXVlbnRpYWxfY2hhaW4uanM/Y2YzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ2hhaW4gfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5pbXBvcnQgeyBpbnRlcnNlY3Rpb24sIHVuaW9uLCBkaWZmZXJlbmNlIH0gZnJvbSBcIi4uL3V0aWwvc2V0LmpzXCI7XG5mdW5jdGlvbiBmb3JtYXRTZXQoaW5wdXQpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShpbnB1dClcbiAgICAgICAgLm1hcCgoaSkgPT4gYFwiJHtpfVwiYClcbiAgICAgICAgLmpvaW4oXCIsIFwiKTtcbn1cbi8qKlxuICogQ2hhaW4gd2hlcmUgdGhlIG91dHB1dHMgb2Ygb25lIGNoYWluIGZlZWQgZGlyZWN0bHkgaW50byBuZXh0LlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IHByb21wdFRlbXBsYXRlID0gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAqICAgdGVtcGxhdGU6IGBZb3UgYXJlIGEgcGxheXdyaWdodC4gR2l2ZW4gdGhlIHRpdGxlIG9mIHBsYXkgYW5kIHRoZSBlcmEgaXQgaXMgc2V0IGluLCBpdCBpcyB5b3VyIGpvYiB0byB3cml0ZSBhIHN5bm9wc2lzIGZvciB0aGF0IHRpdGxlLlxuICogVGl0bGU6IHt0aXRsZX1cbiAqIEVyYToge2VyYX1cbiAqIFBsYXl3cmlnaHQ6IFRoaXMgaXMgYSBzeW5vcHNpcyBmb3IgdGhlIGFib3ZlIHBsYXk6YCxcbiAqICAgaW5wdXRWYXJpYWJsZXM6IFtcInRpdGxlXCIsIFwiZXJhXCJdLFxuICogfSk7XG5cbiAqIGNvbnN0IHJldmlld1Byb21wdFRlbXBsYXRlID0gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAqICAgdGVtcGxhdGU6IGBZb3UgYXJlIGEgcGxheSBjcml0aWMgZnJvbSB0aGUgTmV3IFlvcmsgVGltZXMuIEdpdmVuIHRoZSBzeW5vcHNpcyBvZiBwbGF5LCBpdCBpcyB5b3VyIGpvYiB0byB3cml0ZSBhIHJldmlldyBmb3IgdGhhdCBwbGF5LlxuICpcbiAqICAgICBQbGF5IFN5bm9wc2lzOlxuICogICAgIHtzeW5vcHNpc31cbiAqICAgICBSZXZpZXcgZnJvbSBhIE5ldyBZb3JrIFRpbWVzIHBsYXkgY3JpdGljIG9mIHRoZSBhYm92ZSBwbGF5OmAsXG4gKiAgIGlucHV0VmFyaWFibGVzOiBbXCJzeW5vcHNpc1wiXSxcbiAqIH0pO1xuXG4gKiBjb25zdCBvdmVyYWxsQ2hhaW4gPSBuZXcgU2VxdWVudGlhbENoYWluKHtcbiAqICAgY2hhaW5zOiBbXG4gKiAgICAgbmV3IExMTUNoYWluKHtcbiAqICAgICAgIGxsbTogbmV3IENoYXRPcGVuQUkoeyB0ZW1wZXJhdHVyZTogMCB9KSxcbiAqICAgICAgIHByb21wdDogcHJvbXB0VGVtcGxhdGUsXG4gKiAgICAgICBvdXRwdXRLZXk6IFwic3lub3BzaXNcIixcbiAqICAgICB9KSxcbiAqICAgICBuZXcgTExNQ2hhaW4oe1xuICogICAgICAgbGxtOiBuZXcgT3BlbkFJKHsgdGVtcGVyYXR1cmU6IDAgfSksXG4gKiAgICAgICBwcm9tcHQ6IHJldmlld1Byb21wdFRlbXBsYXRlLFxuICogICAgICAgb3V0cHV0S2V5OiBcInJldmlld1wiLFxuICogICAgIH0pLFxuICogICBdLFxuICogICBpbnB1dFZhcmlhYmxlczogW1wiZXJhXCIsIFwidGl0bGVcIl0sXG4gKiAgIG91dHB1dFZhcmlhYmxlczogW1wic3lub3BzaXNcIiwgXCJyZXZpZXdcIl0sXG4gKiAgIHZlcmJvc2U6IHRydWUsXG4gKiB9KTtcblxuICogY29uc3QgY2hhaW5FeGVjdXRpb25SZXN1bHQgPSBhd2FpdCBvdmVyYWxsQ2hhaW4uY2FsbCh7XG4gKiAgIHRpdGxlOiBcIlRyYWdlZHkgYXQgc3Vuc2V0IG9uIHRoZSBiZWFjaFwiLFxuICogICBlcmE6IFwiVmljdG9yaWFuIEVuZ2xhbmRcIixcbiAqIH0pO1xuICogY29uc29sZS5sb2coY2hhaW5FeGVjdXRpb25SZXN1bHQpO1xuICogYGBgXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIFN3aXRjaCB0byB7QGxpbmsgaHR0cHM6Ly9qcy5sYW5nY2hhaW4uY29tL2RvY3MvZXhwcmVzc2lvbl9sYW5ndWFnZS8gfCBleHByZXNzaW9uIGxhbmd1YWdlfS5cbiAqIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjIuMFxuICovXG5leHBvcnQgY2xhc3MgU2VxdWVudGlhbENoYWluIGV4dGVuZHMgQmFzZUNoYWluIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU2VxdWVudGlhbENoYWluXCI7XG4gICAgfVxuICAgIGdldCBpbnB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0VmFyaWFibGVzO1xuICAgIH1cbiAgICBnZXQgb3V0cHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0VmFyaWFibGVzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2hhaW5zXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlucHV0VmFyaWFibGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm91dHB1dFZhcmlhYmxlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXR1cm5BbGxcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGFpbnMgPSBmaWVsZHMuY2hhaW5zO1xuICAgICAgICB0aGlzLmlucHV0VmFyaWFibGVzID0gZmllbGRzLmlucHV0VmFyaWFibGVzO1xuICAgICAgICB0aGlzLm91dHB1dFZhcmlhYmxlcyA9IGZpZWxkcy5vdXRwdXRWYXJpYWJsZXMgPz8gW107XG4gICAgICAgIGlmICh0aGlzLm91dHB1dFZhcmlhYmxlcy5sZW5ndGggPiAwICYmIGZpZWxkcy5yZXR1cm5BbGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVpdGhlciBzcGVjaWZ5IHZhcmlhYmxlcyB0byByZXR1cm4gdXNpbmcgYG91dHB1dFZhcmlhYmxlc2Agb3IgdXNlIGByZXR1cm5BbGxgIHBhcmFtLiBDYW5ub3QgYXBwbHkgYm90aCBjb25kaXRpb25zIGF0IHRoZSBzYW1lIHRpbWUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmV0dXJuQWxsID0gZmllbGRzLnJldHVybkFsbCA/PyBmYWxzZTtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGVDaGFpbnMoKTtcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBfdmFsaWRhdGVDaGFpbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYWlucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlcXVlbnRpYWwgY2hhaW4gbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBjaGFpbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtb3J5S2V5cyA9IHRoaXMubWVtb3J5Py5tZW1vcnlLZXlzID8/IFtdO1xuICAgICAgICBjb25zdCBpbnB1dEtleXNTZXQgPSBuZXcgU2V0KHRoaXMuaW5wdXRLZXlzKTtcbiAgICAgICAgY29uc3QgbWVtb3J5S2V5c1NldCA9IG5ldyBTZXQobWVtb3J5S2V5cyk7XG4gICAgICAgIGNvbnN0IGtleXNJbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb24oaW5wdXRLZXlzU2V0LCBtZW1vcnlLZXlzU2V0KTtcbiAgICAgICAgaWYgKGtleXNJbnRlcnNlY3Rpb24uc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZvbGxvd2luZyBrZXlzOiAke2Zvcm1hdFNldChrZXlzSW50ZXJzZWN0aW9uKX0gYXJlIG92ZXJsYXBwaW5nIGJldHdlZW4gbWVtb3J5IGFuZCBpbnB1dCBrZXlzIG9mIHRoZSBjaGFpbiB2YXJpYWJsZXMuIFRoaXMgY2FuIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvdXIuIFBsZWFzZSB1c2UgaW5wdXQgYW5kIG1lbW9yeSBrZXlzIHRoYXQgZG9uJ3Qgb3ZlcmxhcC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdmFpbGFibGVLZXlzID0gdW5pb24oaW5wdXRLZXlzU2V0LCBtZW1vcnlLZXlzU2V0KTtcbiAgICAgICAgZm9yIChjb25zdCBjaGFpbiBvZiB0aGlzLmNoYWlucykge1xuICAgICAgICAgICAgbGV0IG1pc3NpbmdLZXlzID0gZGlmZmVyZW5jZShuZXcgU2V0KGNoYWluLmlucHV0S2V5cyksIGF2YWlsYWJsZUtleXMpO1xuICAgICAgICAgICAgaWYgKGNoYWluLm1lbW9yeSkge1xuICAgICAgICAgICAgICAgIG1pc3NpbmdLZXlzID0gZGlmZmVyZW5jZShtaXNzaW5nS2V5cywgbmV3IFNldChjaGFpbi5tZW1vcnkubWVtb3J5S2V5cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1pc3NpbmdLZXlzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIHZhcmlhYmxlcyBmb3IgY2hhaW4gXCIke2NoYWluLl9jaGFpblR5cGUoKX1cIjogJHtmb3JtYXRTZXQobWlzc2luZ0tleXMpfS4gT25seSBnb3QgdGhlIGZvbGxvd2luZyB2YXJpYWJsZXM6ICR7Zm9ybWF0U2V0KGF2YWlsYWJsZUtleXMpfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG91dHB1dEtleXNTZXQgPSBuZXcgU2V0KGNoYWluLm91dHB1dEtleXMpO1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmxhcHBpbmdPdXRwdXRLZXlzID0gaW50ZXJzZWN0aW9uKGF2YWlsYWJsZUtleXMsIG91dHB1dEtleXNTZXQpO1xuICAgICAgICAgICAgaWYgKG92ZXJsYXBwaW5nT3V0cHV0S2V5cy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZvbGxvd2luZyBvdXRwdXQgdmFyaWFibGVzIGZvciBjaGFpbiBcIiR7Y2hhaW4uX2NoYWluVHlwZSgpfVwiIGFyZSBvdmVybGFwcGluZzogJHtmb3JtYXRTZXQob3ZlcmxhcHBpbmdPdXRwdXRLZXlzKX0uIFRoaXMgY2FuIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvdXIuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG91dHB1dEtleSBvZiBvdXRwdXRLZXlzU2V0KSB7XG4gICAgICAgICAgICAgICAgYXZhaWxhYmxlS2V5cy5hZGQob3V0cHV0S2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vdXRwdXRWYXJpYWJsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXR1cm5BbGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXRLZXlzID0gZGlmZmVyZW5jZShhdmFpbGFibGVLZXlzLCBpbnB1dEtleXNTZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0VmFyaWFibGVzID0gQXJyYXkuZnJvbShvdXRwdXRLZXlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0VmFyaWFibGVzID0gdGhpcy5jaGFpbnNbdGhpcy5jaGFpbnMubGVuZ3RoIC0gMV0ub3V0cHV0S2V5cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmdLZXlzID0gZGlmZmVyZW5jZShuZXcgU2V0KHRoaXMub3V0cHV0VmFyaWFibGVzKSwgbmV3IFNldChhdmFpbGFibGVLZXlzKSk7XG4gICAgICAgICAgICBpZiAobWlzc2luZ0tleXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBmb2xsb3dpbmcgb3V0cHV0IHZhcmlhYmxlcyB3ZXJlIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmaW5hbCBjaGFpbiBvdXRwdXQgYnV0IHdlcmUgbm90IGZvdW5kOiAke2Zvcm1hdFNldChtaXNzaW5nS2V5cyl9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaWdub3JlICovXG4gICAgYXN5bmMgX2NhbGwodmFsdWVzLCBydW5NYW5hZ2VyKSB7XG4gICAgICAgIGxldCBpbnB1dCA9IHt9O1xuICAgICAgICBjb25zdCBhbGxDaGFpblZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGNoYWluIG9mIHRoaXMuY2hhaW5zKSB7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICBpbnB1dCA9IGF3YWl0IGNoYWluLmNhbGwoYWxsQ2hhaW5WYWx1ZXMsIHJ1bk1hbmFnZXI/LmdldENoaWxkKGBzdGVwXyR7aX1gKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBhbGxDaGFpblZhbHVlc1trZXldID0gaW5wdXRba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5vdXRwdXRWYXJpYWJsZXMpIHtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gYWxsQ2hhaW5WYWx1ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgICBfY2hhaW5UeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJzZXF1ZW50aWFsX2NoYWluXCI7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gICAgICAgIGNvbnN0IGNoYWlucyA9IFtdO1xuICAgICAgICBjb25zdCBpbnB1dFZhcmlhYmxlcyA9IGRhdGEuaW5wdXRfdmFyaWFibGVzO1xuICAgICAgICBjb25zdCBvdXRwdXRWYXJpYWJsZXMgPSBkYXRhLm91dHB1dF92YXJpYWJsZXM7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRDaGFpbnMgPSBkYXRhLmNoYWlucztcbiAgICAgICAgZm9yIChjb25zdCBzZXJpYWxpemVkQ2hhaW4gb2Ygc2VyaWFsaXplZENoYWlucykge1xuICAgICAgICAgICAgY29uc3QgZGVzZXJpYWxpemVkQ2hhaW4gPSBhd2FpdCBCYXNlQ2hhaW4uZGVzZXJpYWxpemUoc2VyaWFsaXplZENoYWluKTtcbiAgICAgICAgICAgIGNoYWlucy5wdXNoKGRlc2VyaWFsaXplZENoYWluKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlcXVlbnRpYWxDaGFpbih7IGNoYWlucywgaW5wdXRWYXJpYWJsZXMsIG91dHB1dFZhcmlhYmxlcyB9KTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICBjb25zdCBjaGFpbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBjaGFpbiBvZiB0aGlzLmNoYWlucykge1xuICAgICAgICAgICAgY2hhaW5zLnB1c2goY2hhaW4uc2VyaWFsaXplKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogdGhpcy5fY2hhaW5UeXBlKCksXG4gICAgICAgICAgICBpbnB1dF92YXJpYWJsZXM6IHRoaXMuaW5wdXRWYXJpYWJsZXMsXG4gICAgICAgICAgICBvdXRwdXRfdmFyaWFibGVzOiB0aGlzLm91dHB1dFZhcmlhYmxlcyxcbiAgICAgICAgICAgIGNoYWlucyxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFN3aXRjaCB0byBleHByZXNzaW9uIGxhbmd1YWdlOiBodHRwczovL2pzLmxhbmdjaGFpbi5jb20vZG9jcy9leHByZXNzaW9uX2xhbmd1YWdlL1xuICogU2ltcGxlIGNoYWluIHdoZXJlIGEgc2luZ2xlIHN0cmluZyBvdXRwdXQgb2Ygb25lIGNoYWluIGlzIGZlZCBkaXJlY3RseSBpbnRvIHRoZSBuZXh0LlxuICogQGF1Z21lbnRzIEJhc2VDaGFpblxuICogQGF1Z21lbnRzIFNpbXBsZVNlcXVlbnRpYWxDaGFpbklucHV0XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBTaW1wbGVTZXF1ZW50aWFsQ2hhaW4sIExMTUNoYWluIH0gZnJvbSBcImxhbmdjaGFpbi9jaGFpbnNcIjtcbiAqIGltcG9ydCB7IE9wZW5BSSB9IGZyb20gXCJsYW5nY2hhaW4vbGxtcy9vcGVuYWlcIjtcbiAqIGltcG9ydCB7IFByb21wdFRlbXBsYXRlIH0gZnJvbSBcImxhbmdjaGFpbi9wcm9tcHRzXCI7XG4gKlxuICogLy8gVGhpcyBpcyBhbiBMTE1DaGFpbiB0byB3cml0ZSBhIHN5bm9wc2lzIGdpdmVuIGEgdGl0bGUgb2YgYSBwbGF5LlxuICogY29uc3QgbGxtID0gbmV3IE9wZW5BSSh7IHRlbXBlcmF0dXJlOiAwIH0pO1xuICogY29uc3QgdGVtcGxhdGUgPSBgWW91IGFyZSBhIHBsYXl3cmlnaHQuIEdpdmVuIHRoZSB0aXRsZSBvZiBwbGF5LCBpdCBpcyB5b3VyIGpvYiB0byB3cml0ZSBhIHN5bm9wc2lzIGZvciB0aGF0IHRpdGxlLlxuICpcbiAqIFRpdGxlOiB7dGl0bGV9XG4gKiBQbGF5d3JpZ2h0OiBUaGlzIGlzIGEgc3lub3BzaXMgZm9yIHRoZSBhYm92ZSBwbGF5OmBcbiAqIGNvbnN0IHByb21wdFRlbXBsYXRlID0gbmV3IFByb21wdFRlbXBsYXRlKHsgdGVtcGxhdGUsIGlucHV0VmFyaWFibGVzOiBbXCJ0aXRsZVwiXSB9KTtcbiAqIGNvbnN0IHN5bm9wc2lzQ2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBsbG0sIHByb21wdDogcHJvbXB0VGVtcGxhdGUgfSk7XG4gKlxuICpcbiAqIC8vIFRoaXMgaXMgYW4gTExNQ2hhaW4gdG8gd3JpdGUgYSByZXZpZXcgb2YgYSBwbGF5IGdpdmVuIGEgc3lub3BzaXMuXG4gKiBjb25zdCByZXZpZXdMTE0gPSBuZXcgT3BlbkFJKHsgdGVtcGVyYXR1cmU6IDAgfSlcbiAqIGNvbnN0IHJldmlld1RlbXBsYXRlID0gYFlvdSBhcmUgYSBwbGF5IGNyaXRpYyBmcm9tIHRoZSBOZXcgWW9yayBUaW1lcy4gR2l2ZW4gdGhlIHN5bm9wc2lzIG9mIHBsYXksIGl0IGlzIHlvdXIgam9iIHRvIHdyaXRlIGEgcmV2aWV3IGZvciB0aGF0IHBsYXkuXG4gKlxuICogUGxheSBTeW5vcHNpczpcbiAqIHtzeW5vcHNpc31cbiAqIFJldmlldyBmcm9tIGEgTmV3IFlvcmsgVGltZXMgcGxheSBjcml0aWMgb2YgdGhlIGFib3ZlIHBsYXk6YFxuICogY29uc3QgcmV2aWV3UHJvbXB0VGVtcGxhdGUgPSBuZXcgUHJvbXB0VGVtcGxhdGUoeyB0ZW1wbGF0ZTogcmV2aWV3VGVtcGxhdGUsIGlucHV0VmFyaWFibGVzOiBbXCJzeW5vcHNpc1wiXSB9KTtcbiAqIGNvbnN0IHJldmlld0NoYWluID0gbmV3IExMTUNoYWluKHsgbGxtOiByZXZpZXdMTE0sIHByb21wdDogcmV2aWV3UHJvbXB0VGVtcGxhdGUgfSk7XG4gKlxuICogY29uc3Qgb3ZlcmFsbENoYWluID0gbmV3IFNpbXBsZVNlcXVlbnRpYWxDaGFpbih7Y2hhaW5zOiBbc3lub3BzaXNDaGFpbiwgcmV2aWV3Q2hhaW5dLCB2ZXJib3NlOnRydWV9KVxuICogY29uc3QgcmV2aWV3ID0gYXdhaXQgb3ZlcmFsbENoYWluLnJ1bihcIlRyYWdlZHkgYXQgc3Vuc2V0IG9uIHRoZSBiZWFjaFwiKVxuICogLy8gdGhlIHZhcmlhYmxlIHJldmlldyBjb250YWlucyByZXN1bHRpbmcgcGxheSByZXZpZXcuXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNpbXBsZVNlcXVlbnRpYWxDaGFpbiBleHRlbmRzIEJhc2VDaGFpbiB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlNpbXBsZVNlcXVlbnRpYWxDaGFpblwiO1xuICAgIH1cbiAgICBnZXQgaW5wdXRLZXlzKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMuaW5wdXRLZXldO1xuICAgIH1cbiAgICBnZXQgb3V0cHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLm91dHB1dEtleV07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjaGFpbnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5wdXRLZXlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiaW5wdXRcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib3V0cHV0S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIm91dHB1dFwiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0cmltT3V0cHV0c1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNoYWlucyA9IGZpZWxkcy5jaGFpbnM7XG4gICAgICAgIHRoaXMudHJpbU91dHB1dHMgPSBmaWVsZHMudHJpbU91dHB1dHMgPz8gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlQ2hhaW5zKCk7XG4gICAgfVxuICAgIC8qKiBAaWdub3JlICovXG4gICAgX3ZhbGlkYXRlQ2hhaW5zKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoYWluIG9mIHRoaXMuY2hhaW5zKSB7XG4gICAgICAgICAgICBpZiAoY2hhaW4uaW5wdXRLZXlzLmZpbHRlcigoaykgPT4gIWNoYWluLm1lbW9yeT8ubWVtb3J5S2V5cy5pbmNsdWRlcyhrKSA/PyB0cnVlKS5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENoYWlucyB1c2VkIGluIFNpbXBsZVNlcXVlbnRpYWxDaGFpbiBzaG91bGQgYWxsIGhhdmUgb25lIGlucHV0LCBnb3QgJHtjaGFpbi5pbnB1dEtleXMubGVuZ3RofSBmb3IgJHtjaGFpbi5fY2hhaW5UeXBlKCl9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYWluLm91dHB1dEtleXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaGFpbnMgdXNlZCBpbiBTaW1wbGVTZXF1ZW50aWFsQ2hhaW4gc2hvdWxkIGFsbCBoYXZlIG9uZSBvdXRwdXQsIGdvdCAke2NoYWluLm91dHB1dEtleXMubGVuZ3RofSBmb3IgJHtjaGFpbi5fY2hhaW5UeXBlKCl9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaWdub3JlICovXG4gICAgYXN5bmMgX2NhbGwodmFsdWVzLCBydW5NYW5hZ2VyKSB7XG4gICAgICAgIGxldCBpbnB1dCA9IHZhbHVlc1t0aGlzLmlucHV0S2V5XTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGNoYWluIG9mIHRoaXMuY2hhaW5zKSB7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICBpbnB1dCA9IChhd2FpdCBjaGFpbi5jYWxsKHsgW2NoYWluLmlucHV0S2V5c1swXV06IGlucHV0LCBzaWduYWw6IHZhbHVlcy5zaWduYWwgfSwgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoYHN0ZXBfJHtpfWApKSlbY2hhaW4ub3V0cHV0S2V5c1swXV07XG4gICAgICAgICAgICBpZiAodGhpcy50cmltT3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQudHJpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgcnVuTWFuYWdlcj8uaGFuZGxlVGV4dChpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgW3RoaXMub3V0cHV0S2V5XTogaW5wdXQgfTtcbiAgICB9XG4gICAgX2NoYWluVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwic2ltcGxlX3NlcXVlbnRpYWxfY2hhaW5cIjtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY2hhaW5zID0gW107XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRDaGFpbnMgPSBkYXRhLmNoYWlucztcbiAgICAgICAgZm9yIChjb25zdCBzZXJpYWxpemVkQ2hhaW4gb2Ygc2VyaWFsaXplZENoYWlucykge1xuICAgICAgICAgICAgY29uc3QgZGVzZXJpYWxpemVkQ2hhaW4gPSBhd2FpdCBCYXNlQ2hhaW4uZGVzZXJpYWxpemUoc2VyaWFsaXplZENoYWluKTtcbiAgICAgICAgICAgIGNoYWlucy5wdXNoKGRlc2VyaWFsaXplZENoYWluKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNpbXBsZVNlcXVlbnRpYWxDaGFpbih7IGNoYWlucyB9KTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICBjb25zdCBjaGFpbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBjaGFpbiBvZiB0aGlzLmNoYWlucykge1xuICAgICAgICAgICAgY2hhaW5zLnB1c2goY2hhaW4uc2VyaWFsaXplKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogdGhpcy5fY2hhaW5UeXBlKCksXG4gICAgICAgICAgICBjaGFpbnMsXG4gICAgICAgIH07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VDaGFpbiIsImludGVyc2VjdGlvbiIsInVuaW9uIiwiZGlmZmVyZW5jZSIsImZvcm1hdFNldCIsImlucHV0IiwiQXJyYXkiLCJmcm9tIiwibWFwIiwiaSIsImpvaW4iLCJTZXF1ZW50aWFsQ2hhaW4iLCJsY19uYW1lIiwiaW5wdXRLZXlzIiwiaW5wdXRWYXJpYWJsZXMiLCJvdXRwdXRLZXlzIiwib3V0cHV0VmFyaWFibGVzIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiY2hhaW5zIiwibGVuZ3RoIiwicmV0dXJuQWxsIiwiRXJyb3IiLCJfdmFsaWRhdGVDaGFpbnMiLCJtZW1vcnlLZXlzIiwibWVtb3J5IiwiaW5wdXRLZXlzU2V0IiwiU2V0IiwibWVtb3J5S2V5c1NldCIsImtleXNJbnRlcnNlY3Rpb24iLCJzaXplIiwiYXZhaWxhYmxlS2V5cyIsImNoYWluIiwibWlzc2luZ0tleXMiLCJfY2hhaW5UeXBlIiwib3V0cHV0S2V5c1NldCIsIm92ZXJsYXBwaW5nT3V0cHV0S2V5cyIsIm91dHB1dEtleSIsImFkZCIsIl9jYWxsIiwidmFsdWVzIiwicnVuTWFuYWdlciIsImFsbENoYWluVmFsdWVzIiwiY2FsbCIsImdldENoaWxkIiwia2V5Iiwia2V5cyIsIm91dHB1dCIsImRlc2VyaWFsaXplIiwiZGF0YSIsImlucHV0X3ZhcmlhYmxlcyIsIm91dHB1dF92YXJpYWJsZXMiLCJzZXJpYWxpemVkQ2hhaW5zIiwic2VyaWFsaXplZENoYWluIiwiZGVzZXJpYWxpemVkQ2hhaW4iLCJwdXNoIiwic2VyaWFsaXplIiwiX3R5cGUiLCJTaW1wbGVTZXF1ZW50aWFsQ2hhaW4iLCJpbnB1dEtleSIsInRyaW1PdXRwdXRzIiwiZmlsdGVyIiwiayIsImluY2x1ZGVzIiwic2lnbmFsIiwidHJpbSIsImhhbmRsZVRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/vector_db_qa.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorDBQAChain: () => (/* binding */ VectorDBQAChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _question_answering_load_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./question_answering/load.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\");\n\n\n/**\n * Class that represents a VectorDBQAChain. It extends the `BaseChain`\n * class and implements the `VectorDBQAChainInput` interface. It performs\n * a similarity search using a vector store and combines the search\n * results using a specified combine documents chain.\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/modules/chains/ | createRetrievalChain}\n * Will be removed in 0.2.0\n */ class VectorDBQAChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"VectorDBQAChain\";\n    }\n    get inputKeys() {\n        return [\n            this.inputKey\n        ];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [\n            \"sourceDocuments\"\n        ] : []);\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query\"\n        });\n        Object.defineProperty(this, \"vectorstore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnSourceDocuments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.vectorstore = fields.vectorstore;\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.k = fields.k ?? this.k;\n        this.returnSourceDocuments = fields.returnSourceDocuments ?? this.returnSourceDocuments;\n    }\n    /** @ignore */ async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key ${this.inputKey} not found.`);\n        }\n        const question = values[this.inputKey];\n        const docs = await this.vectorstore.similaritySearch(question, this.k, values.filter, runManager?.getChild(\"vectorstore\"));\n        const inputs = {\n            question,\n            input_documents: docs\n        };\n        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n        if (this.returnSourceDocuments) {\n            return {\n                ...result,\n                sourceDocuments: docs\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"vector_db_qa\";\n    }\n    static async deserialize(data, values) {\n        if (!(\"vectorstore\" in values)) {\n            throw new Error(`Need to pass in a vectorstore to deserialize VectorDBQAChain`);\n        }\n        const { vectorstore } = values;\n        if (!data.combine_documents_chain) {\n            throw new Error(`VectorDBQAChain must have combine_documents_chain in serialized data`);\n        }\n        return new VectorDBQAChain({\n            combineDocumentsChain: await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(data.combine_documents_chain),\n            k: data.k,\n            vectorstore\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            combine_documents_chain: this.combineDocumentsChain.serialize(),\n            k: this.k\n        };\n    }\n    /**\n     * Static method that creates a VectorDBQAChain instance from a\n     * BaseLanguageModel and a vector store. It also accepts optional options\n     * to customize the chain.\n     * @param llm The BaseLanguageModel instance.\n     * @param vectorstore The vector store used for similarity search.\n     * @param options Optional options to customize the chain.\n     * @returns A new instance of VectorDBQAChain.\n     */ static fromLLM(llm, vectorstore, options) {\n        const qaChain = (0,_question_answering_load_js__WEBPACK_IMPORTED_MODULE_1__.loadQAStuffChain)(llm);\n        return new this({\n            vectorstore,\n            combineDocumentsChain: qaChain,\n            ...options\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentLoader: () => (/* binding */ BaseDocumentLoader)\n/* harmony export */ });\n/* harmony import */ var _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text_splitter.js */ \"(rsc)/./node_modules/langchain/dist/text_splitter.js\");\n\n/**\n * Abstract class that provides a default implementation for the\n * loadAndSplit() method from the DocumentLoader interface. The load()\n * method is left abstract and needs to be implemented by subclasses.\n */ class BaseDocumentLoader {\n    /**\n     * Loads the documents and splits them using a specified text splitter.\n     * @param textSplitter The TextSplitter instance to use for splitting the loaded documents. Defaults to a RecursiveCharacterTextSplitter instance.\n     * @returns A Promise that resolves with an array of Document instances, each split according to the provided TextSplitter.\n     */ async loadAndSplit(splitter = new _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.RecursiveCharacterTextSplitter()) {\n        const docs = await this.load();\n        return splitter.splitDocuments(docs);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNFO0FBQ3RFOzs7O0NBSUMsR0FDTSxNQUFNQztJQUNUOzs7O0tBSUMsR0FDRCxNQUFNQyxhQUFhQyxXQUFXLElBQUlILDZFQUE4QkEsRUFBRSxFQUFFO1FBQ2hFLE1BQU1JLE9BQU8sTUFBTSxJQUFJLENBQUNDLElBQUk7UUFDNUIsT0FBT0YsU0FBU0csY0FBYyxDQUFDRjtJQUNuQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2RvY3VtZW50X2xvYWRlcnMvYmFzZS5qcz8yNGExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlciwgfSBmcm9tIFwiLi4vdGV4dF9zcGxpdHRlci5qc1wiO1xuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB0aGF0IHByb3ZpZGVzIGEgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlXG4gKiBsb2FkQW5kU3BsaXQoKSBtZXRob2QgZnJvbSB0aGUgRG9jdW1lbnRMb2FkZXIgaW50ZXJmYWNlLiBUaGUgbG9hZCgpXG4gKiBtZXRob2QgaXMgbGVmdCBhYnN0cmFjdCBhbmQgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3Nlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VEb2N1bWVudExvYWRlciB7XG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIGRvY3VtZW50cyBhbmQgc3BsaXRzIHRoZW0gdXNpbmcgYSBzcGVjaWZpZWQgdGV4dCBzcGxpdHRlci5cbiAgICAgKiBAcGFyYW0gdGV4dFNwbGl0dGVyIFRoZSBUZXh0U3BsaXR0ZXIgaW5zdGFuY2UgdG8gdXNlIGZvciBzcGxpdHRpbmcgdGhlIGxvYWRlZCBkb2N1bWVudHMuIERlZmF1bHRzIHRvIGEgUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYW4gYXJyYXkgb2YgRG9jdW1lbnQgaW5zdGFuY2VzLCBlYWNoIHNwbGl0IGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgVGV4dFNwbGl0dGVyLlxuICAgICAqL1xuICAgIGFzeW5jIGxvYWRBbmRTcGxpdChzcGxpdHRlciA9IG5ldyBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIoKSkge1xuICAgICAgICBjb25zdCBkb2NzID0gYXdhaXQgdGhpcy5sb2FkKCk7XG4gICAgICAgIHJldHVybiBzcGxpdHRlci5zcGxpdERvY3VtZW50cyhkb2NzKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyIiwiQmFzZURvY3VtZW50TG9hZGVyIiwibG9hZEFuZFNwbGl0Iiwic3BsaXR0ZXIiLCJkb2NzIiwibG9hZCIsInNwbGl0RG9jdW1lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/buffer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferLoader: () => (/* binding */ BufferLoader)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/base.js\");\n\n\n/**\n * Abstract class that extends the `BaseDocumentLoader` class. It\n * represents a document loader that loads documents from a buffer. The\n * `load()` method is implemented to read the buffer contents and metadata\n * based on the type of `filePathOrBlob`, and then calls the `parse()`\n * method to parse the buffer and return the documents.\n */ class BufferLoader extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseDocumentLoader {\n    constructor(filePathOrBlob){\n        super();\n        Object.defineProperty(this, \"filePathOrBlob\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: filePathOrBlob\n        });\n    }\n    /**\n     * Method that reads the buffer contents and metadata based on the type of\n     * `filePathOrBlob`, and then calls the `parse()` method to parse the\n     * buffer and return the documents.\n     * @returns Promise that resolves with an array of `Document` objects.\n     */ async load() {\n        let buffer;\n        let metadata;\n        if (typeof this.filePathOrBlob === \"string\") {\n            const { readFile } = await BufferLoader.imports();\n            buffer = await readFile(this.filePathOrBlob);\n            metadata = {\n                source: this.filePathOrBlob\n            };\n        } else {\n            buffer = await this.filePathOrBlob.arrayBuffer().then((ab)=>Buffer.from(ab));\n            metadata = {\n                source: \"blob\",\n                blobType: this.filePathOrBlob.type\n            };\n        }\n        return this.parse(buffer, metadata);\n    }\n    /**\n     * Static method that imports the `readFile` function from the\n     * `fs/promises` module in Node.js. It is used to dynamically import the\n     * function when needed. If the import fails, it throws an error\n     * indicating that the `fs/promises` module is not available in the\n     * current environment.\n     * @returns Promise that resolves with an object containing the `readFile` function.\n     */ static async imports() {\n        try {\n            const { readFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs/promises */ \"node:fs/promises\", 19));\n            return {\n                readFile\n            };\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Failed to load fs/promises. TextLoader available only on environment 'node'. It appears you are running environment '${(0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)()}'. See https://<link to docs> for alternatives.`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9idWZmZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ0g7QUFDaEQ7Ozs7OztDQU1DLEdBQ00sTUFBTUUscUJBQXFCRCx3REFBa0JBO0lBQ2hERSxZQUFZQyxjQUFjLENBQUU7UUFDeEIsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQjtZQUMxQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBT047UUFDWDtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNTyxPQUFPO1FBQ1QsSUFBSUM7UUFDSixJQUFJQztRQUNKLElBQUksT0FBTyxJQUFJLENBQUNULGNBQWMsS0FBSyxVQUFVO1lBQ3pDLE1BQU0sRUFBRVUsUUFBUSxFQUFFLEdBQUcsTUFBTVosYUFBYWEsT0FBTztZQUMvQ0gsU0FBUyxNQUFNRSxTQUFTLElBQUksQ0FBQ1YsY0FBYztZQUMzQ1MsV0FBVztnQkFBRUcsUUFBUSxJQUFJLENBQUNaLGNBQWM7WUFBQztRQUM3QyxPQUNLO1lBQ0RRLFNBQVMsTUFBTSxJQUFJLENBQUNSLGNBQWMsQ0FDN0JhLFdBQVcsR0FDWEMsSUFBSSxDQUFDLENBQUNDLEtBQU9DLE9BQU9DLElBQUksQ0FBQ0Y7WUFDOUJOLFdBQVc7Z0JBQUVHLFFBQVE7Z0JBQVFNLFVBQVUsSUFBSSxDQUFDbEIsY0FBYyxDQUFDbUIsSUFBSTtZQUFDO1FBQ3BFO1FBQ0EsT0FBTyxJQUFJLENBQUNDLEtBQUssQ0FBQ1osUUFBUUM7SUFDOUI7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsYUFBYUUsVUFBVTtRQUNuQixJQUFJO1lBQ0EsTUFBTSxFQUFFRCxRQUFRLEVBQUUsR0FBRyxNQUFNLHNJQUEwQjtZQUNyRCxPQUFPO2dCQUFFQTtZQUFTO1FBQ3RCLEVBQ0EsT0FBT1csR0FBRztZQUNOQyxRQUFRQyxLQUFLLENBQUNGO1lBQ2QsTUFBTSxJQUFJRyxNQUFNLENBQUMscUhBQXFILEVBQUU1QixpRUFBTUEsR0FBRywrQ0FBK0MsQ0FBQztRQUNyTTtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9idWZmZXIuanM/OGE0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFbnYgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2VudlwiO1xuaW1wb3J0IHsgQmFzZURvY3VtZW50TG9hZGVyIH0gZnJvbSBcIi4uL2Jhc2UuanNcIjtcbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCBleHRlbmRzIHRoZSBgQmFzZURvY3VtZW50TG9hZGVyYCBjbGFzcy4gSXRcbiAqIHJlcHJlc2VudHMgYSBkb2N1bWVudCBsb2FkZXIgdGhhdCBsb2FkcyBkb2N1bWVudHMgZnJvbSBhIGJ1ZmZlci4gVGhlXG4gKiBgbG9hZCgpYCBtZXRob2QgaXMgaW1wbGVtZW50ZWQgdG8gcmVhZCB0aGUgYnVmZmVyIGNvbnRlbnRzIGFuZCBtZXRhZGF0YVxuICogYmFzZWQgb24gdGhlIHR5cGUgb2YgYGZpbGVQYXRoT3JCbG9iYCwgYW5kIHRoZW4gY2FsbHMgdGhlIGBwYXJzZSgpYFxuICogbWV0aG9kIHRvIHBhcnNlIHRoZSBidWZmZXIgYW5kIHJldHVybiB0aGUgZG9jdW1lbnRzLlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyTG9hZGVyIGV4dGVuZHMgQmFzZURvY3VtZW50TG9hZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aE9yQmxvYikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJmaWxlUGF0aE9yQmxvYlwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmlsZVBhdGhPckJsb2JcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHJlYWRzIHRoZSBidWZmZXIgY29udGVudHMgYW5kIG1ldGFkYXRhIGJhc2VkIG9uIHRoZSB0eXBlIG9mXG4gICAgICogYGZpbGVQYXRoT3JCbG9iYCwgYW5kIHRoZW4gY2FsbHMgdGhlIGBwYXJzZSgpYCBtZXRob2QgdG8gcGFyc2UgdGhlXG4gICAgICogYnVmZmVyIGFuZCByZXR1cm4gdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBgRG9jdW1lbnRgIG9iamVjdHMuXG4gICAgICovXG4gICAgYXN5bmMgbG9hZCgpIHtcbiAgICAgICAgbGV0IGJ1ZmZlcjtcbiAgICAgICAgbGV0IG1ldGFkYXRhO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZmlsZVBhdGhPckJsb2IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVhZEZpbGUgfSA9IGF3YWl0IEJ1ZmZlckxvYWRlci5pbXBvcnRzKCk7XG4gICAgICAgICAgICBidWZmZXIgPSBhd2FpdCByZWFkRmlsZSh0aGlzLmZpbGVQYXRoT3JCbG9iKTtcbiAgICAgICAgICAgIG1ldGFkYXRhID0geyBzb3VyY2U6IHRoaXMuZmlsZVBhdGhPckJsb2IgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGF3YWl0IHRoaXMuZmlsZVBhdGhPckJsb2JcbiAgICAgICAgICAgICAgICAuYXJyYXlCdWZmZXIoKVxuICAgICAgICAgICAgICAgIC50aGVuKChhYikgPT4gQnVmZmVyLmZyb20oYWIpKTtcbiAgICAgICAgICAgIG1ldGFkYXRhID0geyBzb3VyY2U6IFwiYmxvYlwiLCBibG9iVHlwZTogdGhpcy5maWxlUGF0aE9yQmxvYi50eXBlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoYnVmZmVyLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBtZXRob2QgdGhhdCBpbXBvcnRzIHRoZSBgcmVhZEZpbGVgIGZ1bmN0aW9uIGZyb20gdGhlXG4gICAgICogYGZzL3Byb21pc2VzYCBtb2R1bGUgaW4gTm9kZS5qcy4gSXQgaXMgdXNlZCB0byBkeW5hbWljYWxseSBpbXBvcnQgdGhlXG4gICAgICogZnVuY3Rpb24gd2hlbiBuZWVkZWQuIElmIHRoZSBpbXBvcnQgZmFpbHMsIGl0IHRocm93cyBhbiBlcnJvclxuICAgICAqIGluZGljYXRpbmcgdGhhdCB0aGUgYGZzL3Byb21pc2VzYCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGVcbiAgICAgKiBjdXJyZW50IGVudmlyb25tZW50LlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgcmVhZEZpbGVgIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBpbXBvcnRzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyByZWFkRmlsZSB9ID0gYXdhaXQgaW1wb3J0KFwibm9kZTpmcy9wcm9taXNlc1wiKTtcbiAgICAgICAgICAgIHJldHVybiB7IHJlYWRGaWxlIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGZzL3Byb21pc2VzLiBUZXh0TG9hZGVyIGF2YWlsYWJsZSBvbmx5IG9uIGVudmlyb25tZW50ICdub2RlJy4gSXQgYXBwZWFycyB5b3UgYXJlIHJ1bm5pbmcgZW52aXJvbm1lbnQgJyR7Z2V0RW52KCl9Jy4gU2VlIGh0dHBzOi8vPGxpbmsgdG8gZG9jcz4gZm9yIGFsdGVybmF0aXZlcy5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRFbnYiLCJCYXNlRG9jdW1lbnRMb2FkZXIiLCJCdWZmZXJMb2FkZXIiLCJjb25zdHJ1Y3RvciIsImZpbGVQYXRoT3JCbG9iIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImxvYWQiLCJidWZmZXIiLCJtZXRhZGF0YSIsInJlYWRGaWxlIiwiaW1wb3J0cyIsInNvdXJjZSIsImFycmF5QnVmZmVyIiwidGhlbiIsImFiIiwiQnVmZmVyIiwiZnJvbSIsImJsb2JUeXBlIiwidHlwZSIsInBhcnNlIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/pdf.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFLoader: () => (/* binding */ PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js\");\n/* harmony import */ var _util_document_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/document.js */ \"(rsc)/./node_modules/langchain/dist/util/document.js\");\n\n\n\n/**\n * A class that extends the `BufferLoader` class. It represents a document\n * loader that loads documents from PDF files.\n * @example\n * ```typescript\n * const loader = new PDFLoader(\"path/to/bitcoin.pdf\");\n * const docs = await loader.load();\n * console.log({ docs });\n * ```\n */ class PDFLoader extends _buffer_js__WEBPACK_IMPORTED_MODULE_1__.BufferLoader {\n    constructor(filePathOrBlob, { splitPages = true, pdfjs = PDFLoaderImports, parsedItemSeparator = \"\" } = {}){\n        super(filePathOrBlob);\n        Object.defineProperty(this, \"splitPages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pdfjs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"parsedItemSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.splitPages = splitPages;\n        this.pdfjs = pdfjs;\n        this.parsedItemSeparator = parsedItemSeparator;\n    }\n    /**\n     * A method that takes a `raw` buffer and `metadata` as parameters and\n     * returns a promise that resolves to an array of `Document` instances. It\n     * uses the `getDocument` function from the PDF.js library to load the PDF\n     * from the buffer. It then iterates over each page of the PDF, retrieves\n     * the text content using the `getTextContent` method, and joins the text\n     * items to form the page content. It creates a new `Document` instance\n     * for each page with the extracted text content and metadata, and adds it\n     * to the `documents` array. If `splitPages` is `true`, it returns the\n     * array of `Document` instances. Otherwise, if there are no documents, it\n     * returns an empty array. Otherwise, it concatenates the page content of\n     * all documents and creates a single `Document` instance with the\n     * concatenated content.\n     * @param raw The buffer to be parsed.\n     * @param metadata The metadata of the document.\n     * @returns A promise that resolves to an array of `Document` instances.\n     */ async parse(raw, metadata) {\n        const { getDocument, version } = await this.pdfjs();\n        const pdf = await getDocument({\n            data: new Uint8Array(raw.buffer),\n            useWorkerFetch: false,\n            isEvalSupported: false,\n            useSystemFonts: true\n        }).promise;\n        const meta = await pdf.getMetadata().catch(()=>null);\n        const documents = [];\n        for(let i = 1; i <= pdf.numPages; i += 1){\n            const page = await pdf.getPage(i);\n            const content = await page.getTextContent();\n            if (content.items.length === 0) {\n                continue;\n            }\n            // Eliminate excessive newlines\n            // Source: https://github.com/albertcui/pdf-parse/blob/7086fc1cc9058545cdf41dd0646d6ae5832c7107/lib/pdf-parse.js#L16\n            let lastY;\n            const textItems = [];\n            for (const item of content.items){\n                if (\"str\" in item) {\n                    if (lastY === item.transform[5] || !lastY) {\n                        textItems.push(item.str);\n                    } else {\n                        textItems.push(`\\n${item.str}`);\n                    }\n                    // eslint-disable-next-line prefer-destructuring\n                    lastY = item.transform[5];\n                }\n            }\n            const text = textItems.join(this.parsedItemSeparator);\n            documents.push(new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: text,\n                metadata: {\n                    ...metadata,\n                    pdf: {\n                        version,\n                        info: meta?.info,\n                        metadata: meta?.metadata,\n                        totalPages: pdf.numPages\n                    },\n                    loc: {\n                        pageNumber: i\n                    }\n                }\n            }));\n        }\n        if (this.splitPages) {\n            return documents;\n        }\n        if (documents.length === 0) {\n            return [];\n        }\n        return [\n            new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: (0,_util_document_js__WEBPACK_IMPORTED_MODULE_2__.formatDocumentsAsString)(documents),\n                metadata: {\n                    ...metadata,\n                    pdf: {\n                        version,\n                        info: meta?.info,\n                        metadata: meta?.metadata,\n                        totalPages: pdf.numPages\n                    }\n                }\n            })\n        ];\n    }\n}\nasync function PDFLoaderImports() {\n    try {\n        const { default: mod } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/pdf-parse\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js */ \"(rsc)/./node_modules/pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js\", 19));\n        const { getDocument, version } = mod;\n        return {\n            getDocument,\n            version\n        };\n    } catch (e) {\n        console.error(e);\n        throw new Error(\"Failed to load pdf-parse. Please install it with eg. `npm install pdf-parse`.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/combining.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/combining.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CombiningOutputParser: () => (/* binding */ CombiningOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n/**\n * Class to combine multiple output parsers\n * @augments BaseOutputParser\n */ class CombiningOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    static lc_name() {\n        return \"CombiningOutputParser\";\n    }\n    constructor(fields, ...parsers){\n        if (parsers.length > 0 || !(\"parsers\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                parsers: [\n                    fields,\n                    ...parsers\n                ]\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"combining\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"parsers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputDelimiter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"-----\"\n        });\n        this.parsers = fields.parsers;\n    }\n    /**\n     * Method to parse an input string using the parsers in the parsers array.\n     * The parsed outputs are combined into a single object and returned.\n     * @param input The input string to parse.\n     * @param callbacks Optional Callbacks object.\n     * @returns A Promise that resolves to a CombinedOutput object.\n     */ async parse(input, callbacks) {\n        const inputs = input.trim().split(new RegExp(`${this.outputDelimiter}Output \\\\d+${this.outputDelimiter}`)).slice(1);\n        const ret = {};\n        for (const [i, p] of this.parsers.entries()){\n            let parsed;\n            try {\n                let extracted = inputs[i].includes(\"```\") ? inputs[i].trim().split(/```/)[1] : inputs[i].trim();\n                if (extracted.endsWith(this.outputDelimiter)) {\n                    extracted = extracted.slice(0, -this.outputDelimiter.length);\n                }\n                parsed = await p.parse(extracted, callbacks);\n            } catch (e) {\n                parsed = await p.parse(input.trim(), callbacks);\n            }\n            Object.assign(ret, parsed);\n        }\n        return ret;\n    }\n    /**\n     * Method to get instructions on how to format the LLM output. The\n     * instructions are based on the parsers array and the outputDelimiter.\n     * @returns A string with format instructions.\n     */ getFormatInstructions() {\n        return `${[\n            `Return the following ${this.parsers.length} outputs, each formatted as described below. Include the delimiter characters \"${this.outputDelimiter}\" in your response:`,\n            ...this.parsers.map((p, i)=>`${this.outputDelimiter}Output ${i + 1}${this.outputDelimiter}\\n${p.getFormatInstructions().trim()}\\n${this.outputDelimiter}`)\n        ].join(\"\\n\\n\")}\\n`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvY29tYmluaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtFO0FBQ2xFOzs7Q0FHQyxHQUNNLE1BQU1DLDhCQUE4QkQsNEVBQWdCQTtJQUN2RCxPQUFPRSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sRUFBRSxHQUFHQyxPQUFPLENBQUU7UUFDNUIsSUFBSUEsUUFBUUMsTUFBTSxHQUFHLEtBQUssQ0FBRSxjQUFhRixNQUFLLEdBQUk7WUFDOUMsNkNBQTZDO1lBQzdDQSxTQUFTO2dCQUNMQyxTQUFTO29CQUFDRDt1QkFBV0M7aUJBQVE7WUFDakM7UUFDSjtRQUNBLEtBQUssQ0FBQ0Q7UUFDTkcsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWE7Z0JBQWtCO2FBQVk7UUFDdkQ7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLG1CQUFtQjtZQUMzQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDUCxPQUFPLEdBQUdELE9BQU9DLE9BQU87SUFDakM7SUFDQTs7Ozs7O0tBTUMsR0FDRCxNQUFNUSxNQUFNQyxLQUFLLEVBQUVDLFNBQVMsRUFBRTtRQUMxQixNQUFNQyxTQUFTRixNQUNWRyxJQUFJLEdBQ0pDLEtBQUssQ0FBQyxJQUFJQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUNDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDQSxlQUFlLENBQUMsQ0FBQyxHQUM1RUMsS0FBSyxDQUFDO1FBQ1gsTUFBTUMsTUFBTSxDQUFDO1FBQ2IsS0FBSyxNQUFNLENBQUNDLEdBQUdDLEVBQUUsSUFBSSxJQUFJLENBQUNuQixPQUFPLENBQUNvQixPQUFPLEdBQUk7WUFDekMsSUFBSUM7WUFDSixJQUFJO2dCQUNBLElBQUlDLFlBQVlYLE1BQU0sQ0FBQ08sRUFBRSxDQUFDSyxRQUFRLENBQUMsU0FDN0JaLE1BQU0sQ0FBQ08sRUFBRSxDQUFDTixJQUFJLEdBQUdDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUNoQ0YsTUFBTSxDQUFDTyxFQUFFLENBQUNOLElBQUk7Z0JBQ3BCLElBQUlVLFVBQVVFLFFBQVEsQ0FBQyxJQUFJLENBQUNULGVBQWUsR0FBRztvQkFDMUNPLFlBQVlBLFVBQVVOLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDRCxlQUFlLENBQUNkLE1BQU07Z0JBQy9EO2dCQUNBb0IsU0FBUyxNQUFNRixFQUFFWCxLQUFLLENBQUNjLFdBQVdaO1lBQ3RDLEVBQ0EsT0FBT2UsR0FBRztnQkFDTkosU0FBUyxNQUFNRixFQUFFWCxLQUFLLENBQUNDLE1BQU1HLElBQUksSUFBSUY7WUFDekM7WUFDQVIsT0FBT3dCLE1BQU0sQ0FBQ1QsS0FBS0k7UUFDdkI7UUFDQSxPQUFPSjtJQUNYO0lBQ0E7Ozs7S0FJQyxHQUNEVSx3QkFBd0I7UUFDcEIsT0FBTyxDQUFDLEVBQUU7WUFDTixDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQzNCLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLCtFQUErRSxFQUFFLElBQUksQ0FBQ2MsZUFBZSxDQUFDLG1CQUFtQixDQUFDO2VBQ25LLElBQUksQ0FBQ2YsT0FBTyxDQUFDNEIsR0FBRyxDQUFDLENBQUNULEdBQUdELElBQU0sQ0FBQyxFQUFFLElBQUksQ0FBQ0gsZUFBZSxDQUFDLE9BQU8sRUFBRUcsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDSCxlQUFlLENBQUMsRUFBRSxFQUFFSSxFQUMzRlEscUJBQXFCLEdBQ3JCZixJQUFJLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQ0csZUFBZSxDQUFDLENBQUM7U0FDekMsQ0FBQ2MsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3RCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvY29tYmluaW5nLmpzP2RmZGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU91dHB1dFBhcnNlciB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnNcIjtcbi8qKlxuICogQ2xhc3MgdG8gY29tYmluZSBtdWx0aXBsZSBvdXRwdXQgcGFyc2Vyc1xuICogQGF1Z21lbnRzIEJhc2VPdXRwdXRQYXJzZXJcbiAqL1xuZXhwb3J0IGNsYXNzIENvbWJpbmluZ091dHB1dFBhcnNlciBleHRlbmRzIEJhc2VPdXRwdXRQYXJzZXIge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJDb21iaW5pbmdPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCAuLi5wYXJzZXJzKSB7XG4gICAgICAgIGlmIChwYXJzZXJzLmxlbmd0aCA+IDAgfHwgIShcInBhcnNlcnNcIiBpbiBmaWVsZHMpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIGZpZWxkcyA9IHtcbiAgICAgICAgICAgICAgICBwYXJzZXJzOiBbZmllbGRzLCAuLi5wYXJzZXJzXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcImNvbWJpbmluZ1wiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfc2VyaWFsaXphYmxlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYXJzZXJzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm91dHB1dERlbGltaXRlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCItLS0tLVwiXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBhcnNlcnMgPSBmaWVsZHMucGFyc2VycztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIHBhcnNlIGFuIGlucHV0IHN0cmluZyB1c2luZyB0aGUgcGFyc2VycyBpbiB0aGUgcGFyc2VycyBhcnJheS5cbiAgICAgKiBUaGUgcGFyc2VkIG91dHB1dHMgYXJlIGNvbWJpbmVkIGludG8gYSBzaW5nbGUgb2JqZWN0IGFuZCByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IHN0cmluZyB0byBwYXJzZS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tzIE9wdGlvbmFsIENhbGxiYWNrcyBvYmplY3QuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBDb21iaW5lZE91dHB1dCBvYmplY3QuXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2UoaW5wdXQsIGNhbGxiYWNrcykge1xuICAgICAgICBjb25zdCBpbnB1dHMgPSBpbnB1dFxuICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgLnNwbGl0KG5ldyBSZWdFeHAoYCR7dGhpcy5vdXRwdXREZWxpbWl0ZXJ9T3V0cHV0IFxcXFxkKyR7dGhpcy5vdXRwdXREZWxpbWl0ZXJ9YCkpXG4gICAgICAgICAgICAuc2xpY2UoMSk7XG4gICAgICAgIGNvbnN0IHJldCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IFtpLCBwXSBvZiB0aGlzLnBhcnNlcnMuZW50cmllcygpKSB7XG4gICAgICAgICAgICBsZXQgcGFyc2VkO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgZXh0cmFjdGVkID0gaW5wdXRzW2ldLmluY2x1ZGVzKFwiYGBgXCIpXG4gICAgICAgICAgICAgICAgICAgID8gaW5wdXRzW2ldLnRyaW0oKS5zcGxpdCgvYGBgLylbMV1cbiAgICAgICAgICAgICAgICAgICAgOiBpbnB1dHNbaV0udHJpbSgpO1xuICAgICAgICAgICAgICAgIGlmIChleHRyYWN0ZWQuZW5kc1dpdGgodGhpcy5vdXRwdXREZWxpbWl0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZCA9IGV4dHJhY3RlZC5zbGljZSgwLCAtdGhpcy5vdXRwdXREZWxpbWl0ZXIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyc2VkID0gYXdhaXQgcC5wYXJzZShleHRyYWN0ZWQsIGNhbGxiYWNrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZCA9IGF3YWl0IHAucGFyc2UoaW5wdXQudHJpbSgpLCBjYWxsYmFja3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXQsIHBhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGdldCBpbnN0cnVjdGlvbnMgb24gaG93IHRvIGZvcm1hdCB0aGUgTExNIG91dHB1dC4gVGhlXG4gICAgICogaW5zdHJ1Y3Rpb25zIGFyZSBiYXNlZCBvbiB0aGUgcGFyc2VycyBhcnJheSBhbmQgdGhlIG91dHB1dERlbGltaXRlci5cbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyB3aXRoIGZvcm1hdCBpbnN0cnVjdGlvbnMuXG4gICAgICovXG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gYCR7W1xuICAgICAgICAgICAgYFJldHVybiB0aGUgZm9sbG93aW5nICR7dGhpcy5wYXJzZXJzLmxlbmd0aH0gb3V0cHV0cywgZWFjaCBmb3JtYXR0ZWQgYXMgZGVzY3JpYmVkIGJlbG93LiBJbmNsdWRlIHRoZSBkZWxpbWl0ZXIgY2hhcmFjdGVycyBcIiR7dGhpcy5vdXRwdXREZWxpbWl0ZXJ9XCIgaW4geW91ciByZXNwb25zZTpgLFxuICAgICAgICAgICAgLi4udGhpcy5wYXJzZXJzLm1hcCgocCwgaSkgPT4gYCR7dGhpcy5vdXRwdXREZWxpbWl0ZXJ9T3V0cHV0ICR7aSArIDF9JHt0aGlzLm91dHB1dERlbGltaXRlcn1cXG4ke3BcbiAgICAgICAgICAgICAgICAuZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKClcbiAgICAgICAgICAgICAgICAudHJpbSgpfVxcbiR7dGhpcy5vdXRwdXREZWxpbWl0ZXJ9YCksXG4gICAgICAgIF0uam9pbihcIlxcblxcblwiKX1cXG5gO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlT3V0cHV0UGFyc2VyIiwiQ29tYmluaW5nT3V0cHV0UGFyc2VyIiwibGNfbmFtZSIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwicGFyc2VycyIsImxlbmd0aCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJwYXJzZSIsImlucHV0IiwiY2FsbGJhY2tzIiwiaW5wdXRzIiwidHJpbSIsInNwbGl0IiwiUmVnRXhwIiwib3V0cHV0RGVsaW1pdGVyIiwic2xpY2UiLCJyZXQiLCJpIiwicCIsImVudHJpZXMiLCJwYXJzZWQiLCJleHRyYWN0ZWQiLCJpbmNsdWRlcyIsImVuZHNXaXRoIiwiZSIsImFzc2lnbiIsImdldEZvcm1hdEluc3RydWN0aW9ucyIsIm1hcCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/combining.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/datetime.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/datetime.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatetimeOutputParser: () => (/* binding */ DatetimeOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n/**\n * Class to parse the output of an LLM call to a date.\n * @augments BaseOutputParser\n */ class DatetimeOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * ISO 8601 date time standard.\n         */ Object.defineProperty(this, \"format\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"YYYY-MM-DDTHH:mm:ssZ\"\n        });\n    }\n    static lc_name() {\n        return \"DatetimeOutputParser\";\n    }\n    /**\n     * Parses the given text into a Date.\n     * If the parsing fails, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns A date object.\n     */ async parse(text) {\n        const parsedDate = new Date(text.trim());\n        if (Number.isNaN(parsedDate.getTime())) {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`, text);\n        }\n        return parsedDate;\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CommaSeparatedListOutputParser.\n     * @returns A string containing instructions on the expected format of the response.\n     */ getFormatInstructions() {\n        return [\n            `Your response should be a datetime string that matches the following pattern: \"${this.format}\".`,\n            `Examples: 2011-10-05T14:48:00Z, 2019-01-01T00:00:00Z, 1932-04-21T04:42:23Z`,\n            `Return ONLY this string, no other words!`\n        ].join(\"\\n\\n\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvZGF0ZXRpbWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEY7QUFDMUY7OztDQUdDLEdBQ00sTUFBTUUsNkJBQTZCRiw0RUFBZ0JBO0lBQ3RERyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNUQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBYTthQUFpQjtRQUMxQztRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLG1CQUFtQjtZQUMzQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0E7O1NBRUMsR0FDREwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU9DLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1DLE1BQU1DLElBQUksRUFBRTtRQUNkLE1BQU1DLGFBQWEsSUFBSUMsS0FBS0YsS0FBS0csSUFBSTtRQUNyQyxJQUFJQyxPQUFPQyxLQUFLLENBQUNKLFdBQVdLLE9BQU8sS0FBSztZQUNwQyxNQUFNLElBQUlsQixpRkFBcUJBLENBQUMsQ0FBQyx3QkFBd0IsRUFBRVksS0FBSyxDQUFDLEVBQUVBO1FBQ3ZFO1FBQ0EsT0FBT0M7SUFDWDtJQUNBOzs7O0tBSUMsR0FDRE0sd0JBQXdCO1FBQ3BCLE9BQU87WUFDSCxDQUFDLCtFQUErRSxFQUFFLElBQUksQ0FBQ0MsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUNqRyxDQUFDLDBFQUEwRSxDQUFDO1lBQzVFLENBQUMsd0NBQXdDLENBQUM7U0FDN0MsQ0FBQ0MsSUFBSSxDQUFDO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9vdXRwdXRfcGFyc2Vycy9kYXRldGltZS5qcz81ODljIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VPdXRwdXRQYXJzZXIsIE91dHB1dFBhcnNlckV4Y2VwdGlvbiwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzXCI7XG4vKipcbiAqIENsYXNzIHRvIHBhcnNlIHRoZSBvdXRwdXQgb2YgYW4gTExNIGNhbGwgdG8gYSBkYXRlLlxuICogQGF1Z21lbnRzIEJhc2VPdXRwdXRQYXJzZXJcbiAqL1xuZXhwb3J0IGNsYXNzIERhdGV0aW1lT3V0cHV0UGFyc2VyIGV4dGVuZHMgQmFzZU91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwib3V0cHV0X3BhcnNlcnNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElTTyA4NjAxIGRhdGUgdGltZSBzdGFuZGFyZC5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImZvcm1hdFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJZWVlZLU1NLUREVEhIOm1tOnNzWlwiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiRGF0ZXRpbWVPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBnaXZlbiB0ZXh0IGludG8gYSBEYXRlLlxuICAgICAqIElmIHRoZSBwYXJzaW5nIGZhaWxzLCB0aHJvd3MgYW4gT3V0cHV0UGFyc2VyRXhjZXB0aW9uLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRvIHBhcnNlLlxuICAgICAqIEByZXR1cm5zIEEgZGF0ZSBvYmplY3QuXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2UodGV4dCkge1xuICAgICAgICBjb25zdCBwYXJzZWREYXRlID0gbmV3IERhdGUodGV4dC50cmltKCkpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHBhcnNlZERhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE91dHB1dFBhcnNlckV4Y2VwdGlvbihgQ291bGQgbm90IHBhcnNlIG91dHB1dDogJHt0ZXh0fWAsIHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBpbnN0cnVjdGlvbnMgb24gdGhlIGV4cGVjdGVkIGZvcm1hdCBvZiB0aGUgcmVzcG9uc2UgZm9yIHRoZVxuICAgICAqIENvbW1hU2VwYXJhdGVkTGlzdE91dHB1dFBhcnNlci5cbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyBjb250YWluaW5nIGluc3RydWN0aW9ucyBvbiB0aGUgZXhwZWN0ZWQgZm9ybWF0IG9mIHRoZSByZXNwb25zZS5cbiAgICAgKi9cbiAgICBnZXRGb3JtYXRJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBgWW91ciByZXNwb25zZSBzaG91bGQgYmUgYSBkYXRldGltZSBzdHJpbmcgdGhhdCBtYXRjaGVzIHRoZSBmb2xsb3dpbmcgcGF0dGVybjogXCIke3RoaXMuZm9ybWF0fVwiLmAsXG4gICAgICAgICAgICBgRXhhbXBsZXM6IDIwMTEtMTAtMDVUMTQ6NDg6MDBaLCAyMDE5LTAxLTAxVDAwOjAwOjAwWiwgMTkzMi0wNC0yMVQwNDo0MjoyM1pgLFxuICAgICAgICAgICAgYFJldHVybiBPTkxZIHRoaXMgc3RyaW5nLCBubyBvdGhlciB3b3JkcyFgLFxuICAgICAgICBdLmpvaW4oXCJcXG5cXG5cIik7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VPdXRwdXRQYXJzZXIiLCJPdXRwdXRQYXJzZXJFeGNlcHRpb24iLCJEYXRldGltZU91dHB1dFBhcnNlciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImxjX25hbWUiLCJwYXJzZSIsInRleHQiLCJwYXJzZWREYXRlIiwiRGF0ZSIsInRyaW0iLCJOdW1iZXIiLCJpc05hTiIsImdldFRpbWUiLCJnZXRGb3JtYXRJbnN0cnVjdGlvbnMiLCJmb3JtYXQiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/datetime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/fix.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/fix.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OutputFixingParser: () => (/* binding */ OutputFixingParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/prompts.js\");\n\n\n\nfunction isLLMChain(x) {\n    return x.prompt !== undefined && x.llm !== undefined;\n}\n/**\n * Class that extends the BaseOutputParser to handle situations where the\n * initial parsing attempt fails. It contains a retryChain for retrying\n * the parsing process in case of a failure.\n */ class OutputFixingParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    static lc_name() {\n        return \"OutputFixingParser\";\n    }\n    /**\n     * Static method to create a new instance of OutputFixingParser using a\n     * given language model, parser, and optional fields.\n     * @param llm The language model to be used.\n     * @param parser The parser to be used.\n     * @param fields Optional fields which may contain a prompt.\n     * @returns A new instance of OutputFixingParser.\n     */ static fromLLM(llm, parser, fields) {\n        const prompt = fields?.prompt ?? _prompts_js__WEBPACK_IMPORTED_MODULE_2__.NAIVE_FIX_PROMPT;\n        const chain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({\n            llm,\n            prompt\n        });\n        return new OutputFixingParser({\n            parser,\n            retryChain: chain\n        });\n    }\n    constructor({ parser, retryChain }){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"fix\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"parser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"retryChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.parser = parser;\n        this.retryChain = retryChain;\n    }\n    /**\n     * Method to parse the completion using the parser. If the initial parsing\n     * fails, it uses the retryChain to attempt to fix the output and retry\n     * the parsing process.\n     * @param completion The completion to be parsed.\n     * @param callbacks Optional callbacks to be used during parsing.\n     * @returns The parsed output.\n     */ async parse(completion, callbacks) {\n        try {\n            return await this.parser.parse(completion, callbacks);\n        } catch (e) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (e instanceof _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.OutputParserException) {\n                const retryInput = {\n                    instructions: this.parser.getFormatInstructions(),\n                    completion,\n                    error: e\n                };\n                if (isLLMChain(this.retryChain)) {\n                    const result = await this.retryChain.call(retryInput, callbacks);\n                    const newCompletion = result[this.retryChain.outputKey];\n                    return this.parser.parse(newCompletion, callbacks);\n                } else {\n                    const result = await this.retryChain.invoke(retryInput, {\n                        callbacks\n                    });\n                    return result;\n                }\n            }\n            throw e;\n        }\n    }\n    /**\n     * Method to get the format instructions for the parser.\n     * @returns The format instructions for the parser.\n     */ getFormatInstructions() {\n        return this.parser.getFormatInstructions();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/fix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/http_response.js":
/*!*********************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/http_response.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpResponseOutputParser: () => (/* binding */ HttpResponseOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n/**\n * OutputParser that formats chunks emitted from an LLM for different HTTP content types.\n */ class HttpResponseOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {\n    static lc_name() {\n        return \"HttpResponseOutputParser\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parser\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.StringOutputParser()\n        });\n        Object.defineProperty(this, \"contentType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text/plain\"\n        });\n        this.outputParser = fields?.outputParser ?? this.outputParser;\n        this.contentType = fields?.contentType ?? this.contentType;\n    }\n    async *_transform(inputGenerator) {\n        for await (const chunk of this.outputParser._transform(inputGenerator)){\n            if (typeof chunk === \"string\") {\n                yield this.parse(chunk);\n            } else {\n                yield this.parse(JSON.stringify(chunk));\n            }\n        }\n        if (this.contentType === \"text/event-stream\") {\n            const encoder = new TextEncoder();\n            yield encoder.encode(`event: end\\n\\n`);\n        }\n    }\n    /**\n     * Parses a string output from an LLM call. This method is meant to be\n     * implemented by subclasses to define how a string output from an LLM\n     * should be parsed.\n     * @param text The string output from an LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */ async parse(text) {\n        const chunk = await this.outputParser.parse(text);\n        const encoder = new TextEncoder();\n        if (this.contentType === \"text/event-stream\") {\n            return encoder.encode(`event: data\\ndata: ${JSON.stringify(chunk)}\\n\\n`);\n        }\n        let parsedChunk;\n        if (typeof chunk === \"string\") {\n            parsedChunk = chunk;\n        } else {\n            parsedChunk = JSON.stringify(chunk);\n        }\n        return encoder.encode(parsedChunk);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaHR0cF9yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRztBQUNoRzs7Q0FFQyxHQUNNLE1BQU1FLGlDQUFpQ0YscUZBQXlCQTtJQUNuRSxPQUFPRyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFhO2FBQWdCO1FBQ3pDO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sSUFBSVYsOEVBQWtCQTtRQUNqQztRQUNBSyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQ0MsWUFBWSxHQUFHUCxRQUFRTyxnQkFBZ0IsSUFBSSxDQUFDQSxZQUFZO1FBQzdELElBQUksQ0FBQ0MsV0FBVyxHQUFHUixRQUFRUSxlQUFlLElBQUksQ0FBQ0EsV0FBVztJQUM5RDtJQUNBLE9BQU9DLFdBQVdDLGNBQWMsRUFBRTtRQUM5QixXQUFXLE1BQU1DLFNBQVMsSUFBSSxDQUFDSixZQUFZLENBQUNFLFVBQVUsQ0FBQ0MsZ0JBQWlCO1lBQ3BFLElBQUksT0FBT0MsVUFBVSxVQUFVO2dCQUMzQixNQUFNLElBQUksQ0FBQ0MsS0FBSyxDQUFDRDtZQUNyQixPQUNLO2dCQUNELE1BQU0sSUFBSSxDQUFDQyxLQUFLLENBQUNDLEtBQUtDLFNBQVMsQ0FBQ0g7WUFDcEM7UUFDSjtRQUNBLElBQUksSUFBSSxDQUFDSCxXQUFXLEtBQUsscUJBQXFCO1lBQzFDLE1BQU1PLFVBQVUsSUFBSUM7WUFDcEIsTUFBTUQsUUFBUUUsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDO1FBQ3pDO0lBQ0o7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsTUFBTUwsTUFBTU0sSUFBSSxFQUFFO1FBQ2QsTUFBTVAsUUFBUSxNQUFNLElBQUksQ0FBQ0osWUFBWSxDQUFDSyxLQUFLLENBQUNNO1FBQzVDLE1BQU1ILFVBQVUsSUFBSUM7UUFDcEIsSUFBSSxJQUFJLENBQUNSLFdBQVcsS0FBSyxxQkFBcUI7WUFDMUMsT0FBT08sUUFBUUUsTUFBTSxDQUFDLENBQUMsbUJBQW1CLEVBQUVKLEtBQUtDLFNBQVMsQ0FBQ0gsT0FBTyxJQUFJLENBQUM7UUFDM0U7UUFDQSxJQUFJUTtRQUNKLElBQUksT0FBT1IsVUFBVSxVQUFVO1lBQzNCUSxjQUFjUjtRQUNsQixPQUNLO1lBQ0RRLGNBQWNOLEtBQUtDLFNBQVMsQ0FBQ0g7UUFDakM7UUFDQSxPQUFPSSxRQUFRRSxNQUFNLENBQUNFO0lBQzFCO0lBQ0FDLHdCQUF3QjtRQUNwQixPQUFPO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9vdXRwdXRfcGFyc2Vycy9odHRwX3Jlc3BvbnNlLmpzP2NkZWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciwgU3RyaW5nT3V0cHV0UGFyc2VyLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnNcIjtcbi8qKlxuICogT3V0cHV0UGFyc2VyIHRoYXQgZm9ybWF0cyBjaHVua3MgZW1pdHRlZCBmcm9tIGFuIExMTSBmb3IgZGlmZmVyZW50IEhUVFAgY29udGVudCB0eXBlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEh0dHBSZXNwb25zZU91dHB1dFBhcnNlciBleHRlbmRzIEJhc2VUcmFuc2Zvcm1PdXRwdXRQYXJzZXIge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJIdHRwUmVzcG9uc2VPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwib3V0cHV0X3BhcnNlclwiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfc2VyaWFsaXphYmxlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJvdXRwdXRQYXJzZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBTdHJpbmdPdXRwdXRQYXJzZXIoKVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29udGVudFR5cGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwidGV4dC9wbGFpblwiXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm91dHB1dFBhcnNlciA9IGZpZWxkcz8ub3V0cHV0UGFyc2VyID8/IHRoaXMub3V0cHV0UGFyc2VyO1xuICAgICAgICB0aGlzLmNvbnRlbnRUeXBlID0gZmllbGRzPy5jb250ZW50VHlwZSA/PyB0aGlzLmNvbnRlbnRUeXBlO1xuICAgIH1cbiAgICBhc3luYyAqX3RyYW5zZm9ybShpbnB1dEdlbmVyYXRvcikge1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHRoaXMub3V0cHV0UGFyc2VyLl90cmFuc2Zvcm0oaW5wdXRHZW5lcmF0b3IpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5wYXJzZShjaHVuayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNodW5rKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29udGVudFR5cGUgPT09IFwidGV4dC9ldmVudC1zdHJlYW1cIikge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICAgICAgeWllbGQgZW5jb2Rlci5lbmNvZGUoYGV2ZW50OiBlbmRcXG5cXG5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzdHJpbmcgb3V0cHV0IGZyb20gYW4gTExNIGNhbGwuIFRoaXMgbWV0aG9kIGlzIG1lYW50IHRvIGJlXG4gICAgICogaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3NlcyB0byBkZWZpbmUgaG93IGEgc3RyaW5nIG91dHB1dCBmcm9tIGFuIExMTVxuICAgICAqIHNob3VsZCBiZSBwYXJzZWQuXG4gICAgICogQHBhcmFtIHRleHQgVGhlIHN0cmluZyBvdXRwdXQgZnJvbSBhbiBMTE0gY2FsbC5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tzIE9wdGlvbmFsIGNhbGxiYWNrcy5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2Ugb2YgdGhlIHBhcnNlZCBvdXRwdXQuXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2UodGV4dCkge1xuICAgICAgICBjb25zdCBjaHVuayA9IGF3YWl0IHRoaXMub3V0cHV0UGFyc2VyLnBhcnNlKHRleHQpO1xuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRUeXBlID09PSBcInRleHQvZXZlbnQtc3RyZWFtXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVyLmVuY29kZShgZXZlbnQ6IGRhdGFcXG5kYXRhOiAke0pTT04uc3RyaW5naWZ5KGNodW5rKX1cXG5cXG5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyc2VkQ2h1bms7XG4gICAgICAgIGlmICh0eXBlb2YgY2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHBhcnNlZENodW5rID0gY2h1bms7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWRDaHVuayA9IEpTT04uc3RyaW5naWZ5KGNodW5rKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5jb2Rlci5lbmNvZGUocGFyc2VkQ2h1bmspO1xuICAgIH1cbiAgICBnZXRGb3JtYXRJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIiwiU3RyaW5nT3V0cHV0UGFyc2VyIiwiSHR0cFJlc3BvbnNlT3V0cHV0UGFyc2VyIiwibGNfbmFtZSIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIm91dHB1dFBhcnNlciIsImNvbnRlbnRUeXBlIiwiX3RyYW5zZm9ybSIsImlucHV0R2VuZXJhdG9yIiwiY2h1bmsiLCJwYXJzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJ0ZXh0IiwicGFyc2VkQ2h1bmsiLCJnZXRGb3JtYXRJbnN0cnVjdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/http_response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_2__.AsymmetricStructuredOutputParser),\n/* harmony export */   CombiningOutputParser: () => (/* reexport safe */ _combining_js__WEBPACK_IMPORTED_MODULE_4__.CombiningOutputParser),\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_0__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_0__.CustomListOutputParser),\n/* harmony export */   DatetimeOutputParser: () => (/* reexport safe */ _datetime_js__WEBPACK_IMPORTED_MODULE_9__.DatetimeOutputParser),\n/* harmony export */   HttpResponseOutputParser: () => (/* reexport safe */ _http_response_js__WEBPACK_IMPORTED_MODULE_8__.HttpResponseOutputParser),\n/* harmony export */   JsonKeyOutputFunctionsParser: () => (/* reexport safe */ _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_6__.JsonKeyOutputFunctionsParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_2__.JsonMarkdownStructuredOutputParser),\n/* harmony export */   JsonOutputFunctionsParser: () => (/* reexport safe */ _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_6__.JsonOutputFunctionsParser),\n/* harmony export */   JsonOutputKeyToolsParser: () => (/* reexport safe */ _output_parsers_openai_tools_js__WEBPACK_IMPORTED_MODULE_7__.JsonOutputKeyToolsParser),\n/* harmony export */   JsonOutputToolsParser: () => (/* reexport safe */ _output_parsers_openai_tools_js__WEBPACK_IMPORTED_MODULE_7__.JsonOutputToolsParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_0__.ListOutputParser),\n/* harmony export */   OutputFixingParser: () => (/* reexport safe */ _fix_js__WEBPACK_IMPORTED_MODULE_3__.OutputFixingParser),\n/* harmony export */   OutputFunctionsParser: () => (/* reexport safe */ _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_6__.OutputFunctionsParser),\n/* harmony export */   RegexParser: () => (/* reexport safe */ _regex_js__WEBPACK_IMPORTED_MODULE_1__.RegexParser),\n/* harmony export */   RouterOutputParser: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_5__.RouterOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_2__.StructuredOutputParser)\n/* harmony export */ });\n/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/list.js\");\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./regex.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/regex.js\");\n/* harmony import */ var _structured_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./structured.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/structured.js\");\n/* harmony import */ var _fix_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fix.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/fix.js\");\n/* harmony import */ var _combining_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./combining.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/combining.js\");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./router.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/router.js\");\n/* harmony import */ var _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../output_parsers/openai_functions.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/openai_functions.js\");\n/* harmony import */ var _output_parsers_openai_tools_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../output_parsers/openai_tools.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/openai_tools.js\");\n/* harmony import */ var _http_response_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./http_response.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/http_response.js\");\n/* harmony import */ var _datetime_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./datetime.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/datetime.js\");\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZFO0FBQ3BDO0FBQ3VGO0FBQ2xGO0FBQ1M7QUFDTjtBQUNFO0FBQ3FGO0FBQ25DO0FBQ3RDO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguanM/MDYwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBMaXN0T3V0cHV0UGFyc2VyLCBDb21tYVNlcGFyYXRlZExpc3RPdXRwdXRQYXJzZXIgfSBmcm9tIFwiLi9saXN0LmpzXCI7XG5leHBvcnQgeyBSZWdleFBhcnNlciB9IGZyb20gXCIuL3JlZ2V4LmpzXCI7XG5leHBvcnQgeyBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyLCBBc3ltbWV0cmljU3RydWN0dXJlZE91dHB1dFBhcnNlciwgSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlciwgfSBmcm9tIFwiLi9zdHJ1Y3R1cmVkLmpzXCI7XG5leHBvcnQgeyBPdXRwdXRGaXhpbmdQYXJzZXIgfSBmcm9tIFwiLi9maXguanNcIjtcbmV4cG9ydCB7IENvbWJpbmluZ091dHB1dFBhcnNlciB9IGZyb20gXCIuL2NvbWJpbmluZy5qc1wiO1xuZXhwb3J0IHsgUm91dGVyT3V0cHV0UGFyc2VyIH0gZnJvbSBcIi4vcm91dGVyLmpzXCI7XG5leHBvcnQgeyBDdXN0b21MaXN0T3V0cHV0UGFyc2VyIH0gZnJvbSBcIi4vbGlzdC5qc1wiO1xuZXhwb3J0IHsgT3V0cHV0RnVuY3Rpb25zUGFyc2VyLCBKc29uT3V0cHV0RnVuY3Rpb25zUGFyc2VyLCBKc29uS2V5T3V0cHV0RnVuY3Rpb25zUGFyc2VyLCB9IGZyb20gXCIuLi9vdXRwdXRfcGFyc2Vycy9vcGVuYWlfZnVuY3Rpb25zLmpzXCI7XG5leHBvcnQgeyBKc29uT3V0cHV0VG9vbHNQYXJzZXIsIEpzb25PdXRwdXRLZXlUb29sc1BhcnNlciwgfSBmcm9tIFwiLi4vb3V0cHV0X3BhcnNlcnMvb3BlbmFpX3Rvb2xzLmpzXCI7XG5leHBvcnQgeyBIdHRwUmVzcG9uc2VPdXRwdXRQYXJzZXIsIH0gZnJvbSBcIi4vaHR0cF9yZXNwb25zZS5qc1wiO1xuZXhwb3J0IHsgRGF0ZXRpbWVPdXRwdXRQYXJzZXIgfSBmcm9tIFwiLi9kYXRldGltZS5qc1wiO1xuIl0sIm5hbWVzIjpbIkxpc3RPdXRwdXRQYXJzZXIiLCJDb21tYVNlcGFyYXRlZExpc3RPdXRwdXRQYXJzZXIiLCJSZWdleFBhcnNlciIsIlN0cnVjdHVyZWRPdXRwdXRQYXJzZXIiLCJBc3ltbWV0cmljU3RydWN0dXJlZE91dHB1dFBhcnNlciIsIkpzb25NYXJrZG93blN0cnVjdHVyZWRPdXRwdXRQYXJzZXIiLCJPdXRwdXRGaXhpbmdQYXJzZXIiLCJDb21iaW5pbmdPdXRwdXRQYXJzZXIiLCJSb3V0ZXJPdXRwdXRQYXJzZXIiLCJDdXN0b21MaXN0T3V0cHV0UGFyc2VyIiwiT3V0cHV0RnVuY3Rpb25zUGFyc2VyIiwiSnNvbk91dHB1dEZ1bmN0aW9uc1BhcnNlciIsIkpzb25LZXlPdXRwdXRGdW5jdGlvbnNQYXJzZXIiLCJKc29uT3V0cHV0VG9vbHNQYXJzZXIiLCJKc29uT3V0cHV0S2V5VG9vbHNQYXJzZXIiLCJIdHRwUmVzcG9uc2VPdXRwdXRQYXJzZXIiLCJEYXRldGltZU91dHB1dFBhcnNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/list.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/list.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.CustomListOutputParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.ListOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvbGlzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L291dHB1dF9wYXJzZXJzL2xpc3QuanM/OTNkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBMaXN0T3V0cHV0UGFyc2VyLCBDb21tYVNlcGFyYXRlZExpc3RPdXRwdXRQYXJzZXIsIEN1c3RvbUxpc3RPdXRwdXRQYXJzZXIsIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9vdXRwdXRfcGFyc2Vyc1wiO1xuIl0sIm5hbWVzIjpbIkxpc3RPdXRwdXRQYXJzZXIiLCJDb21tYVNlcGFyYXRlZExpc3RPdXRwdXRQYXJzZXIiLCJDdXN0b21MaXN0T3V0cHV0UGFyc2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/noop.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/noop.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoOpOutputParser: () => (/* binding */ NoOpOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n/**\n * The NoOpOutputParser class is a type of output parser that does not\n * perform any operations on the output. It extends the BaseOutputParser\n * class and is part of the LangChain's output parsers module. This class\n * is useful in scenarios where the raw output of the Large Language\n * Models (LLMs) is required.\n */ class NoOpOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"default\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"NoOpOutputParser\";\n    }\n    /**\n     * This method takes a string as input and returns the same string as\n     * output. It does not perform any operations on the input string.\n     * @param text The input string to be parsed.\n     * @returns The same input string without any operations performed on it.\n     */ parse(text) {\n        return Promise.resolve(text);\n    }\n    /**\n     * This method returns an empty string. It does not provide any formatting\n     * instructions.\n     * @returns An empty string, indicating no formatting instructions.\n     */ getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvbm9vcC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRTtBQUNsRTs7Ozs7O0NBTUMsR0FDTSxNQUFNQyx5QkFBeUJELDRFQUFnQkE7SUFDbERFLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFhO2dCQUFrQjthQUFVO1FBQ3JEO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU9DLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQTs7Ozs7S0FLQyxHQUNEQyxNQUFNQyxJQUFJLEVBQUU7UUFDUixPQUFPQyxRQUFRQyxPQUFPLENBQUNGO0lBQzNCO0lBQ0E7Ozs7S0FJQyxHQUNERyx3QkFBd0I7UUFDcEIsT0FBTztJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvbm9vcC5qcz9jZmQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VPdXRwdXRQYXJzZXIgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzXCI7XG4vKipcbiAqIFRoZSBOb09wT3V0cHV0UGFyc2VyIGNsYXNzIGlzIGEgdHlwZSBvZiBvdXRwdXQgcGFyc2VyIHRoYXQgZG9lcyBub3RcbiAqIHBlcmZvcm0gYW55IG9wZXJhdGlvbnMgb24gdGhlIG91dHB1dC4gSXQgZXh0ZW5kcyB0aGUgQmFzZU91dHB1dFBhcnNlclxuICogY2xhc3MgYW5kIGlzIHBhcnQgb2YgdGhlIExhbmdDaGFpbidzIG91dHB1dCBwYXJzZXJzIG1vZHVsZS4gVGhpcyBjbGFzc1xuICogaXMgdXNlZnVsIGluIHNjZW5hcmlvcyB3aGVyZSB0aGUgcmF3IG91dHB1dCBvZiB0aGUgTGFyZ2UgTGFuZ3VhZ2VcbiAqIE1vZGVscyAoTExNcykgaXMgcmVxdWlyZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb09wT3V0cHV0UGFyc2VyIGV4dGVuZHMgQmFzZU91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwib3V0cHV0X3BhcnNlcnNcIiwgXCJkZWZhdWx0XCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJOb09wT3V0cHV0UGFyc2VyXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHRha2VzIGEgc3RyaW5nIGFzIGlucHV0IGFuZCByZXR1cm5zIHRoZSBzYW1lIHN0cmluZyBhc1xuICAgICAqIG91dHB1dC4gSXQgZG9lcyBub3QgcGVyZm9ybSBhbnkgb3BlcmF0aW9ucyBvbiB0aGUgaW5wdXQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSBpbnB1dCBzdHJpbmcgdG8gYmUgcGFyc2VkLlxuICAgICAqIEByZXR1cm5zIFRoZSBzYW1lIGlucHV0IHN0cmluZyB3aXRob3V0IGFueSBvcGVyYXRpb25zIHBlcmZvcm1lZCBvbiBpdC5cbiAgICAgKi9cbiAgICBwYXJzZSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGV4dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLiBJdCBkb2VzIG5vdCBwcm92aWRlIGFueSBmb3JtYXR0aW5nXG4gICAgICogaW5zdHJ1Y3Rpb25zLlxuICAgICAqIEByZXR1cm5zIEFuIGVtcHR5IHN0cmluZywgaW5kaWNhdGluZyBubyBmb3JtYXR0aW5nIGluc3RydWN0aW9ucy5cbiAgICAgKi9cbiAgICBnZXRGb3JtYXRJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlT3V0cHV0UGFyc2VyIiwiTm9PcE91dHB1dFBhcnNlciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImxjX25hbWUiLCJwYXJzZSIsInRleHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldEZvcm1hdEluc3RydWN0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/noop.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/openai_functions.js":
/*!************************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/openai_functions.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonKeyOutputFunctionsParser: () => (/* binding */ JsonKeyOutputFunctionsParser),\n/* harmony export */   JsonOutputFunctionsParser: () => (/* binding */ JsonOutputFunctionsParser),\n/* harmony export */   OutputFunctionsParser: () => (/* binding */ OutputFunctionsParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_json_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/json_patch */ \"(rsc)/./node_modules/@langchain/core/utils/json_patch.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n\n\n/**\n * Class for parsing the output of an LLM. Can be configured to return\n * only the arguments of the function call in the output.\n */ class OutputFunctionsParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseLLMOutputParser {\n    static lc_name() {\n        return \"OutputFunctionsParser\";\n    }\n    constructor(config){\n        super();\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"openai_functions\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"argsOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.argsOnly = config?.argsOnly ?? this.argsOnly;\n    }\n    /**\n     * Parses the output and returns a string representation of the function\n     * call or its arguments.\n     * @param generations The output of the LLM to parse.\n     * @returns A string representation of the function call or its arguments.\n     */ async parseResult(generations) {\n        if (\"message\" in generations[0]) {\n            const gen = generations[0];\n            const functionCall = gen.message.additional_kwargs.function_call;\n            if (!functionCall) {\n                throw new Error(`No function_call in message ${JSON.stringify(generations)}`);\n            }\n            if (!functionCall.arguments) {\n                throw new Error(`No arguments in function_call ${JSON.stringify(generations)}`);\n            }\n            if (this.argsOnly) {\n                return functionCall.arguments;\n            }\n            return JSON.stringify(functionCall);\n        } else {\n            throw new Error(`No message in generations ${JSON.stringify(generations)}`);\n        }\n    }\n}\n/**\n * Class for parsing the output of an LLM into a JSON object. Uses an\n * instance of `OutputFunctionsParser` to parse the output.\n */ class JsonOutputFunctionsParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseCumulativeTransformOutputParser {\n    static lc_name() {\n        return \"JsonOutputFunctionsParser\";\n    }\n    constructor(config){\n        super(config);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"openai_functions\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argsOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.argsOnly = config?.argsOnly ?? this.argsOnly;\n        this.outputParser = new OutputFunctionsParser(config);\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        const ops = (0,_langchain_core_utils_json_patch__WEBPACK_IMPORTED_MODULE_0__.compare)(prev ?? {}, next);\n        return ops;\n    }\n    async parsePartialResult(generations) {\n        const generation = generations[0];\n        if (!generation.message) {\n            return undefined;\n        }\n        const { message } = generation;\n        const functionCall = message.additional_kwargs.function_call;\n        if (!functionCall) {\n            return undefined;\n        }\n        if (this.argsOnly) {\n            return (0,_langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.parsePartialJson)(functionCall.arguments);\n        }\n        return {\n            ...functionCall,\n            arguments: (0,_langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.parsePartialJson)(functionCall.arguments)\n        };\n    }\n    /**\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\n     * only the arguments of the function call are returned.\n     * @param generations The output of the LLM to parse.\n     * @returns A JSON object representation of the function call or its arguments.\n     */ async parseResult(generations) {\n        const result = await this.outputParser.parseResult(generations);\n        if (!result) {\n            throw new Error(`No result from \"OutputFunctionsParser\" ${JSON.stringify(generations)}`);\n        }\n        return this.parse(result);\n    }\n    async parse(text) {\n        const parsedResult = JSON.parse(text);\n        if (this.argsOnly) {\n            return parsedResult;\n        }\n        parsedResult.arguments = JSON.parse(parsedResult.arguments);\n        return parsedResult;\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n/**\n * Class for parsing the output of an LLM into a JSON object and returning\n * a specific attribute. Uses an instance of `JsonOutputFunctionsParser`\n * to parse the output.\n */ class JsonKeyOutputFunctionsParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseLLMOutputParser {\n    static lc_name() {\n        return \"JsonKeyOutputFunctionsParser\";\n    }\n    get lc_aliases() {\n        return {\n            attrName: \"key_name\"\n        };\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"openai_functions\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new JsonOutputFunctionsParser()\n        });\n        Object.defineProperty(this, \"attrName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.attrName = fields.attrName;\n    }\n    /**\n     * Parses the output and returns a specific attribute of the parsed JSON\n     * object.\n     * @param generations The output of the LLM to parse.\n     * @returns The value of a specific attribute of the parsed JSON object.\n     */ async parseResult(generations) {\n        const result = await this.outputParser.parseResult(generations);\n        return result[this.attrName];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX2Z1bmN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RDtBQUMrQztBQUN6QztBQUNsRTs7O0NBR0MsR0FDTSxNQUFNSSw4QkFBOEJGLCtFQUFtQkE7SUFDMUQsT0FBT0csVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBYTtnQkFBa0I7YUFBbUI7UUFDOUQ7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQ0MsUUFBUSxHQUFHUCxRQUFRTyxZQUFZLElBQUksQ0FBQ0EsUUFBUTtJQUNyRDtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTUMsWUFBWUMsV0FBVyxFQUFFO1FBQzNCLElBQUksYUFBYUEsV0FBVyxDQUFDLEVBQUUsRUFBRTtZQUM3QixNQUFNQyxNQUFNRCxXQUFXLENBQUMsRUFBRTtZQUMxQixNQUFNRSxlQUFlRCxJQUFJRSxPQUFPLENBQUNDLGlCQUFpQixDQUFDQyxhQUFhO1lBQ2hFLElBQUksQ0FBQ0gsY0FBYztnQkFDZixNQUFNLElBQUlJLE1BQU0sQ0FBQyw0QkFBNEIsRUFBRUMsS0FBS0MsU0FBUyxDQUFDUixhQUFhLENBQUM7WUFDaEY7WUFDQSxJQUFJLENBQUNFLGFBQWFPLFNBQVMsRUFBRTtnQkFDekIsTUFBTSxJQUFJSCxNQUFN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SUMsR0FDTSxNQUFNQyxxQ0FBcUN0QywrRUFBbUJBO0lBQ2pFLE9BQU9HLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQSxJQUFJb0MsYUFBYTtRQUNiLE9BQU87WUFDSEMsVUFBVTtRQUNkO0lBQ0o7SUFDQXBDLFlBQVlxQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNObkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWE7Z0JBQWtCO2FBQW1CO1FBQzlEO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sSUFBSWE7UUFDZjtRQUNBbEIsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUM2QixRQUFRLEdBQUdDLE9BQU9ELFFBQVE7SUFDbkM7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU0zQixZQUFZQyxXQUFXLEVBQUU7UUFDM0IsTUFBTW1CLFNBQVMsTUFBTSxJQUFJLENBQUNSLFlBQVksQ0FBQ1osV0FBVyxDQUFDQztRQUNuRCxPQUFPbUIsTUFBTSxDQUFDLElBQUksQ0FBQ08sUUFBUSxDQUFDO0lBQ2hDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX2Z1bmN0aW9ucy5qcz8xMjNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXBhcmUsIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS91dGlscy9qc29uX3BhdGNoXCI7XG5pbXBvcnQgeyBCYXNlQ3VtdWxhdGl2ZVRyYW5zZm9ybU91dHB1dFBhcnNlciwgQmFzZUxMTU91dHB1dFBhcnNlciwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzXCI7XG5pbXBvcnQgeyBwYXJzZVBhcnRpYWxKc29uIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9vdXRwdXRfcGFyc2Vyc1wiO1xuLyoqXG4gKiBDbGFzcyBmb3IgcGFyc2luZyB0aGUgb3V0cHV0IG9mIGFuIExMTS4gQ2FuIGJlIGNvbmZpZ3VyZWQgdG8gcmV0dXJuXG4gKiBvbmx5IHRoZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uIGNhbGwgaW4gdGhlIG91dHB1dC5cbiAqL1xuZXhwb3J0IGNsYXNzIE91dHB1dEZ1bmN0aW9uc1BhcnNlciBleHRlbmRzIEJhc2VMTE1PdXRwdXRQYXJzZXIge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJPdXRwdXRGdW5jdGlvbnNQYXJzZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwib3V0cHV0X3BhcnNlcnNcIiwgXCJvcGVuYWlfZnVuY3Rpb25zXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFyZ3NPbmx5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFyZ3NPbmx5ID0gY29uZmlnPy5hcmdzT25seSA/PyB0aGlzLmFyZ3NPbmx5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIG91dHB1dCBhbmQgcmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZnVuY3Rpb25cbiAgICAgKiBjYWxsIG9yIGl0cyBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIGdlbmVyYXRpb25zIFRoZSBvdXRwdXQgb2YgdGhlIExMTSB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZnVuY3Rpb24gY2FsbCBvciBpdHMgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGFzeW5jIHBhcnNlUmVzdWx0KGdlbmVyYXRpb25zKSB7XG4gICAgICAgIGlmIChcIm1lc3NhZ2VcIiBpbiBnZW5lcmF0aW9uc1swXSkge1xuICAgICAgICAgICAgY29uc3QgZ2VuID0gZ2VuZXJhdGlvbnNbMF07XG4gICAgICAgICAgICBjb25zdCBmdW5jdGlvbkNhbGwgPSBnZW4ubWVzc2FnZS5hZGRpdGlvbmFsX2t3YXJncy5mdW5jdGlvbl9jYWxsO1xuICAgICAgICAgICAgaWYgKCFmdW5jdGlvbkNhbGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGZ1bmN0aW9uX2NhbGwgaW4gbWVzc2FnZSAke0pTT04uc3RyaW5naWZ5KGdlbmVyYXRpb25zKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZnVuY3Rpb25DYWxsLmFyZ3VtZW50cykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gYXJndW1lbnRzIGluIGZ1bmN0aW9uX2NhbGwgJHtKU09OLnN0cmluZ2lmeShnZW5lcmF0aW9ucyl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hcmdzT25seSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbkNhbGwuYXJndW1lbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGZ1bmN0aW9uQ2FsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1lc3NhZ2UgaW4gZ2VuZXJhdGlvbnMgJHtKU09OLnN0cmluZ2lmeShnZW5lcmF0aW9ucyl9YCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIENsYXNzIGZvciBwYXJzaW5nIHRoZSBvdXRwdXQgb2YgYW4gTExNIGludG8gYSBKU09OIG9iamVjdC4gVXNlcyBhblxuICogaW5zdGFuY2Ugb2YgYE91dHB1dEZ1bmN0aW9uc1BhcnNlcmAgdG8gcGFyc2UgdGhlIG91dHB1dC5cbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25PdXRwdXRGdW5jdGlvbnNQYXJzZXIgZXh0ZW5kcyBCYXNlQ3VtdWxhdGl2ZVRyYW5zZm9ybU91dHB1dFBhcnNlciB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkpzb25PdXRwdXRGdW5jdGlvbnNQYXJzZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwib3V0cHV0X3BhcnNlcnNcIiwgXCJvcGVuYWlfZnVuY3Rpb25zXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm91dHB1dFBhcnNlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdzT25seVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hcmdzT25seSA9IGNvbmZpZz8uYXJnc09ubHkgPz8gdGhpcy5hcmdzT25seTtcbiAgICAgICAgdGhpcy5vdXRwdXRQYXJzZXIgPSBuZXcgT3V0cHV0RnVuY3Rpb25zUGFyc2VyKGNvbmZpZyk7XG4gICAgfVxuICAgIF9kaWZmKHByZXYsIG5leHQpIHtcbiAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wcyA9IGNvbXBhcmUocHJldiA/PyB7fSwgbmV4dCk7XG4gICAgICAgIHJldHVybiBvcHM7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlUGFydGlhbFJlc3VsdChnZW5lcmF0aW9ucykge1xuICAgICAgICBjb25zdCBnZW5lcmF0aW9uID0gZ2VuZXJhdGlvbnNbMF07XG4gICAgICAgIGlmICghZ2VuZXJhdGlvbi5tZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gZ2VuZXJhdGlvbjtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25DYWxsID0gbWVzc2FnZS5hZGRpdGlvbmFsX2t3YXJncy5mdW5jdGlvbl9jYWxsO1xuICAgICAgICBpZiAoIWZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hcmdzT25seSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlUGFydGlhbEpzb24oZnVuY3Rpb25DYWxsLmFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmZ1bmN0aW9uQ2FsbCxcbiAgICAgICAgICAgIGFyZ3VtZW50czogcGFyc2VQYXJ0aWFsSnNvbihmdW5jdGlvbkNhbGwuYXJndW1lbnRzKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBvdXRwdXQgYW5kIHJldHVybnMgYSBKU09OIG9iamVjdC4gSWYgYGFyZ3NPbmx5YCBpcyB0cnVlLFxuICAgICAqIG9ubHkgdGhlIGFyZ3VtZW50cyBvZiB0aGUgZnVuY3Rpb24gY2FsbCBhcmUgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIGdlbmVyYXRpb25zIFRoZSBvdXRwdXQgb2YgdGhlIExMTSB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJucyBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBmdW5jdGlvbiBjYWxsIG9yIGl0cyBhcmd1bWVudHMuXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2VSZXN1bHQoZ2VuZXJhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5vdXRwdXRQYXJzZXIucGFyc2VSZXN1bHQoZ2VuZXJhdGlvbnMpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyByZXN1bHQgZnJvbSBcIk91dHB1dEZ1bmN0aW9uc1BhcnNlclwiICR7SlNPTi5zdHJpbmdpZnkoZ2VuZXJhdGlvbnMpfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlKHJlc3VsdCk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlKHRleHQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkUmVzdWx0ID0gSlNPTi5wYXJzZSh0ZXh0KTtcbiAgICAgICAgaWYgKHRoaXMuYXJnc09ubHkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZWRSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkUmVzdWx0LmFyZ3VtZW50cyA9IEpTT04ucGFyc2UocGFyc2VkUmVzdWx0LmFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBwYXJzZWRSZXN1bHQ7XG4gICAgfVxuICAgIGdldEZvcm1hdEluc3RydWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuLyoqXG4gKiBDbGFzcyBmb3IgcGFyc2luZyB0aGUgb3V0cHV0IG9mIGFuIExMTSBpbnRvIGEgSlNPTiBvYmplY3QgYW5kIHJldHVybmluZ1xuICogYSBzcGVjaWZpYyBhdHRyaWJ1dGUuIFVzZXMgYW4gaW5zdGFuY2Ugb2YgYEpzb25PdXRwdXRGdW5jdGlvbnNQYXJzZXJgXG4gKiB0byBwYXJzZSB0aGUgb3V0cHV0LlxuICovXG5leHBvcnQgY2xhc3MgSnNvbktleU91dHB1dEZ1bmN0aW9uc1BhcnNlciBleHRlbmRzIEJhc2VMTE1PdXRwdXRQYXJzZXIge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJKc29uS2V5T3V0cHV0RnVuY3Rpb25zUGFyc2VyXCI7XG4gICAgfVxuICAgIGdldCBsY19hbGlhc2VzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXR0ck5hbWU6IFwia2V5X25hbWVcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwib3V0cHV0X3BhcnNlcnNcIiwgXCJvcGVuYWlfZnVuY3Rpb25zXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm91dHB1dFBhcnNlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbmV3IEpzb25PdXRwdXRGdW5jdGlvbnNQYXJzZXIoKVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXR0ck5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hdHRyTmFtZSA9IGZpZWxkcy5hdHRyTmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBvdXRwdXQgYW5kIHJldHVybnMgYSBzcGVjaWZpYyBhdHRyaWJ1dGUgb2YgdGhlIHBhcnNlZCBKU09OXG4gICAgICogb2JqZWN0LlxuICAgICAqIEBwYXJhbSBnZW5lcmF0aW9ucyBUaGUgb3V0cHV0IG9mIHRoZSBMTE0gdG8gcGFyc2UuXG4gICAgICogQHJldHVybnMgVGhlIHZhbHVlIG9mIGEgc3BlY2lmaWMgYXR0cmlidXRlIG9mIHRoZSBwYXJzZWQgSlNPTiBvYmplY3QuXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2VSZXN1bHQoZ2VuZXJhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5vdXRwdXRQYXJzZXIucGFyc2VSZXN1bHQoZ2VuZXJhdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0W3RoaXMuYXR0ck5hbWVdO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJjb21wYXJlIiwiQmFzZUN1bXVsYXRpdmVUcmFuc2Zvcm1PdXRwdXRQYXJzZXIiLCJCYXNlTExNT3V0cHV0UGFyc2VyIiwicGFyc2VQYXJ0aWFsSnNvbiIsIk91dHB1dEZ1bmN0aW9uc1BhcnNlciIsImxjX25hbWUiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJhcmdzT25seSIsInBhcnNlUmVzdWx0IiwiZ2VuZXJhdGlvbnMiLCJnZW4iLCJmdW5jdGlvbkNhbGwiLCJtZXNzYWdlIiwiYWRkaXRpb25hbF9rd2FyZ3MiLCJmdW5jdGlvbl9jYWxsIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiYXJndW1lbnRzIiwiSnNvbk91dHB1dEZ1bmN0aW9uc1BhcnNlciIsIm91dHB1dFBhcnNlciIsIl9kaWZmIiwicHJldiIsIm5leHQiLCJ1bmRlZmluZWQiLCJvcHMiLCJwYXJzZVBhcnRpYWxSZXN1bHQiLCJnZW5lcmF0aW9uIiwicmVzdWx0IiwicGFyc2UiLCJ0ZXh0IiwicGFyc2VkUmVzdWx0IiwiZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zIiwiSnNvbktleU91dHB1dEZ1bmN0aW9uc1BhcnNlciIsImxjX2FsaWFzZXMiLCJhdHRyTmFtZSIsImZpZWxkcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/openai_functions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/openai_tools.js":
/*!********************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/openai_tools.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonOutputKeyToolsParser: () => (/* binding */ JsonOutputKeyToolsParser),\n/* harmony export */   JsonOutputToolsParser: () => (/* binding */ JsonOutputToolsParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n/**\n * Class for parsing the output of a tool-calling LLM into a JSON object.\n */ class JsonOutputToolsParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser {\n    static lc_name() {\n        return \"JsonOutputToolsParser\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"openai_tools\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.returnId = fields?.returnId ?? this.returnId;\n    }\n    /**\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\n     * only the arguments of the function call are returned.\n     * @param generations The output of the LLM to parse.\n     * @returns A JSON object representation of the function call or its arguments.\n     */ async parseResult(generations) {\n        const toolCalls = generations[0].message.additional_kwargs.tool_calls;\n        if (!toolCalls) {\n            throw new Error(`No tools_call in message ${JSON.stringify(generations)}`);\n        }\n        const clonedToolCalls = JSON.parse(JSON.stringify(toolCalls));\n        const parsedToolCalls = [];\n        for (const toolCall of clonedToolCalls){\n            if (toolCall.function !== undefined) {\n                // @ts-expect-error name and arguemnts are defined by Object.defineProperty\n                const parsedToolCall = {\n                    type: toolCall.function.name,\n                    args: JSON.parse(toolCall.function.arguments)\n                };\n                if (this.returnId) {\n                    parsedToolCall.id = toolCall.id;\n                }\n                // backward-compatibility with previous\n                // versions of Langchain JS, which uses `name` and `arguments`\n                Object.defineProperty(parsedToolCall, \"name\", {\n                    get () {\n                        return this.type;\n                    }\n                });\n                Object.defineProperty(parsedToolCall, \"arguments\", {\n                    get () {\n                        return this.args;\n                    }\n                });\n                parsedToolCalls.push(parsedToolCall);\n            }\n        }\n        return parsedToolCalls;\n    }\n}\n/**\n * Class for parsing the output of a tool-calling LLM into a JSON object if you are\n * expecting only a single tool to be called.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass JsonOutputKeyToolsParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser {\n    static lc_name() {\n        return \"JsonOutputKeyToolsParser\";\n    }\n    constructor(params){\n        super(params);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"openai_tools\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /** The type of tool calls to return. */ Object.defineProperty(this, \"keyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Whether to return only the first tool call. */ Object.defineProperty(this, \"returnSingle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"initialParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keyName = params.keyName;\n        this.returnSingle = params.returnSingle ?? this.returnSingle;\n        this.initialParser = new JsonOutputToolsParser(params);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async parseResult(generations) {\n        const results = await this.initialParser.parseResult(generations);\n        const matchingResults = results.filter((result)=>result.type === this.keyName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let returnedValues = matchingResults;\n        if (!this.returnId) {\n            returnedValues = matchingResults.map((result)=>result.args);\n        }\n        if (this.returnSingle) {\n            return returnedValues[0];\n        }\n        return returnedValues;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX3Rvb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRTtBQUNyRTs7Q0FFQyxHQUNNLE1BQU1DLDhCQUE4QkQsK0VBQW1CQTtJQUMxRCxPQUFPRSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFhO2dCQUFrQjthQUFlO1FBQzFEO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQSxJQUFJLENBQUNDLFFBQVEsR0FBR1AsUUFBUU8sWUFBWSxJQUFJLENBQUNBLFFBQVE7SUFDckQ7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1DLFlBQVlDLFdBQVcsRUFBRTtRQUMzQixNQUFNQyxZQUFZRCxXQUFXLENBQUMsRUFBRSxDQUFDRSxPQUFPLENBQUNDLGlCQUFpQixDQUFDQyxVQUFVO1FBQ3JFLElBQUksQ0FBQ0gsV0FBVztZQUNaLE1BQU0sSUFBSUksTUFBTSxDQUFDLHlCQUF5QixFQUFFQyxLQUFLQyxTQUFTLENBQUNQLGFBQWEsQ0FBQztRQUM3RTtRQUNBLE1BQU1RLGtCQUFrQkYsS0FBS0csS0FBSyxDQUFDSCxLQUFLQyxTQUFTLENBQUNOO1FBQ2xELE1BQU1TLGtCQUFrQixFQUFFO1FBQzFCLEtBQUssTUFBTUMsWUFBWUgsZ0JBQWlCO1lBQ3BDLElBQUlHLFNBQVND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X21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX3Rvb2xzLmpzPzBiZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUxMTU91dHB1dFBhcnNlciB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnNcIjtcbi8qKlxuICogQ2xhc3MgZm9yIHBhcnNpbmcgdGhlIG91dHB1dCBvZiBhIHRvb2wtY2FsbGluZyBMTE0gaW50byBhIEpTT04gb2JqZWN0LlxuICovXG5leHBvcnQgY2xhc3MgSnNvbk91dHB1dFRvb2xzUGFyc2VyIGV4dGVuZHMgQmFzZUxMTU91dHB1dFBhcnNlciB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkpzb25PdXRwdXRUb29sc1BhcnNlclwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmV0dXJuSWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpblwiLCBcIm91dHB1dF9wYXJzZXJzXCIsIFwib3BlbmFpX3Rvb2xzXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmV0dXJuSWQgPSBmaWVsZHM/LnJldHVybklkID8/IHRoaXMucmV0dXJuSWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgb3V0cHV0IGFuZCByZXR1cm5zIGEgSlNPTiBvYmplY3QuIElmIGBhcmdzT25seWAgaXMgdHJ1ZSxcbiAgICAgKiBvbmx5IHRoZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uIGNhbGwgYXJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBnZW5lcmF0aW9ucyBUaGUgb3V0cHV0IG9mIHRoZSBMTE0gdG8gcGFyc2UuXG4gICAgICogQHJldHVybnMgQSBKU09OIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZnVuY3Rpb24gY2FsbCBvciBpdHMgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGFzeW5jIHBhcnNlUmVzdWx0KGdlbmVyYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRvb2xDYWxscyA9IGdlbmVyYXRpb25zWzBdLm1lc3NhZ2UuYWRkaXRpb25hbF9rd2FyZ3MudG9vbF9jYWxscztcbiAgICAgICAgaWYgKCF0b29sQ2FsbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gdG9vbHNfY2FsbCBpbiBtZXNzYWdlICR7SlNPTi5zdHJpbmdpZnkoZ2VuZXJhdGlvbnMpfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsb25lZFRvb2xDYWxscyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodG9vbENhbGxzKSk7XG4gICAgICAgIGNvbnN0IHBhcnNlZFRvb2xDYWxscyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHRvb2xDYWxsIG9mIGNsb25lZFRvb2xDYWxscykge1xuICAgICAgICAgICAgaWYgKHRvb2xDYWxsLmZ1bmN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5hbWUgYW5kIGFyZ3VlbW50cyBhcmUgZGVmaW5lZCBieSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRUb29sQ2FsbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdG9vbENhbGwuZnVuY3Rpb24ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYXJnczogSlNPTi5wYXJzZSh0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmV0dXJuSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkVG9vbENhbGwuaWQgPSB0b29sQ2FsbC5pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYmFja3dhcmQtY29tcGF0aWJpbGl0eSB3aXRoIHByZXZpb3VzXG4gICAgICAgICAgICAgICAgLy8gdmVyc2lvbnMgb2YgTGFuZ2NoYWluIEpTLCB3aGljaCB1c2VzIGBuYW1lYCBhbmQgYGFyZ3VtZW50c2BcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyc2VkVG9vbENhbGwsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcnNlZFRvb2xDYWxsLCBcImFyZ3VtZW50c1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcGFyc2VkVG9vbENhbGxzLnB1c2gocGFyc2VkVG9vbENhbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWRUb29sQ2FsbHM7XG4gICAgfVxufVxuLyoqXG4gKiBDbGFzcyBmb3IgcGFyc2luZyB0aGUgb3V0cHV0IG9mIGEgdG9vbC1jYWxsaW5nIExMTSBpbnRvIGEgSlNPTiBvYmplY3QgaWYgeW91IGFyZVxuICogZXhwZWN0aW5nIG9ubHkgYSBzaW5nbGUgdG9vbCB0byBiZSBjYWxsZWQuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgY2xhc3MgSnNvbk91dHB1dEtleVRvb2xzUGFyc2VyIGV4dGVuZHMgQmFzZUxMTU91dHB1dFBhcnNlciB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkpzb25PdXRwdXRLZXlUb29sc1BhcnNlclwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1zKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcIm9wZW5haV90b29sc1wiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfc2VyaWFsaXphYmxlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXR1cm5JZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0b29sIGNhbGxzIHRvIHJldHVybi4gKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwia2V5TmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvKiogV2hldGhlciB0byByZXR1cm4gb25seSB0aGUgZmlyc3QgdG9vbCBjYWxsLiAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXR1cm5TaW5nbGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbml0aWFsUGFyc2VyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMua2V5TmFtZSA9IHBhcmFtcy5rZXlOYW1lO1xuICAgICAgICB0aGlzLnJldHVyblNpbmdsZSA9IHBhcmFtcy5yZXR1cm5TaW5nbGUgPz8gdGhpcy5yZXR1cm5TaW5nbGU7XG4gICAgICAgIHRoaXMuaW5pdGlhbFBhcnNlciA9IG5ldyBKc29uT3V0cHV0VG9vbHNQYXJzZXIocGFyYW1zKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhc3luYyBwYXJzZVJlc3VsdChnZW5lcmF0aW9ucykge1xuICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5pbml0aWFsUGFyc2VyLnBhcnNlUmVzdWx0KGdlbmVyYXRpb25zKTtcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdSZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIoKHJlc3VsdCkgPT4gcmVzdWx0LnR5cGUgPT09IHRoaXMua2V5TmFtZSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGxldCByZXR1cm5lZFZhbHVlcyA9IG1hdGNoaW5nUmVzdWx0cztcbiAgICAgICAgaWYgKCF0aGlzLnJldHVybklkKSB7XG4gICAgICAgICAgICByZXR1cm5lZFZhbHVlcyA9IG1hdGNoaW5nUmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4gcmVzdWx0LmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJldHVyblNpbmdsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJldHVybmVkVmFsdWVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXR1cm5lZFZhbHVlcztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZUxMTU91dHB1dFBhcnNlciIsIkpzb25PdXRwdXRUb29sc1BhcnNlciIsImxjX25hbWUiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJyZXR1cm5JZCIsInBhcnNlUmVzdWx0IiwiZ2VuZXJhdGlvbnMiLCJ0b29sQ2FsbHMiLCJtZXNzYWdlIiwiYWRkaXRpb25hbF9rd2FyZ3MiLCJ0b29sX2NhbGxzIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiY2xvbmVkVG9vbENhbGxzIiwicGFyc2UiLCJwYXJzZWRUb29sQ2FsbHMiLCJ0b29sQ2FsbCIsImZ1bmN0aW9uIiwidW5kZWZpbmVkIiwicGFyc2VkVG9vbENhbGwiLCJ0eXBlIiwibmFtZSIsImFyZ3MiLCJhcmd1bWVudHMiLCJpZCIsImdldCIsInB1c2giLCJKc29uT3V0cHV0S2V5VG9vbHNQYXJzZXIiLCJwYXJhbXMiLCJrZXlOYW1lIiwicmV0dXJuU2luZ2xlIiwiaW5pdGlhbFBhcnNlciIsInJlc3VsdHMiLCJtYXRjaGluZ1Jlc3VsdHMiLCJmaWx0ZXIiLCJyZXN1bHQiLCJyZXR1cm5lZFZhbHVlcyIsIm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/openai_tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/prompts.js":
/*!***************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/prompts.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NAIVE_FIX_PROMPT: () => (/* binding */ NAIVE_FIX_PROMPT),\n/* harmony export */   NAIVE_FIX_TEMPLATE: () => (/* binding */ NAIVE_FIX_TEMPLATE)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n\nconst NAIVE_FIX_TEMPLATE = `Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:`;\nconst NAIVE_FIX_PROMPT = /* #__PURE__ */ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(NAIVE_FIX_TEMPLATE);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvcHJvbXB0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUQ7QUFDbEQsTUFBTUMscUJBQXFCLENBQUM7Ozs7Ozs7Ozs7Ozs7OztpSEFlOEUsQ0FBQyxDQUFDO0FBQzVHLE1BQU1DLG1CQUNiLGFBQWEsR0FBR0YsbUVBQWNBLENBQUNHLFlBQVksQ0FBQ0Ysb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L291dHB1dF9wYXJzZXJzL3Byb21wdHMuanM/NDg3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuZXhwb3J0IGNvbnN0IE5BSVZFX0ZJWF9URU1QTEFURSA9IGBJbnN0cnVjdGlvbnM6XG4tLS0tLS0tLS0tLS0tLVxue2luc3RydWN0aW9uc31cbi0tLS0tLS0tLS0tLS0tXG5Db21wbGV0aW9uOlxuLS0tLS0tLS0tLS0tLS1cbntjb21wbGV0aW9ufVxuLS0tLS0tLS0tLS0tLS1cblxuQWJvdmUsIHRoZSBDb21wbGV0aW9uIGRpZCBub3Qgc2F0aXNmeSB0aGUgY29uc3RyYWludHMgZ2l2ZW4gaW4gdGhlIEluc3RydWN0aW9ucy5cbkVycm9yOlxuLS0tLS0tLS0tLS0tLS1cbntlcnJvcn1cbi0tLS0tLS0tLS0tLS0tXG5cblBsZWFzZSB0cnkgYWdhaW4uIFBsZWFzZSBvbmx5IHJlc3BvbmQgd2l0aCBhbiBhbnN3ZXIgdGhhdCBzYXRpc2ZpZXMgdGhlIGNvbnN0cmFpbnRzIGxhaWQgb3V0IGluIHRoZSBJbnN0cnVjdGlvbnM6YDtcbmV4cG9ydCBjb25zdCBOQUlWRV9GSVhfUFJPTVBUID0gXG4vKiAjX19QVVJFX18gKi8gUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKE5BSVZFX0ZJWF9URU1QTEFURSk7XG4iXSwibmFtZXMiOlsiUHJvbXB0VGVtcGxhdGUiLCJOQUlWRV9GSVhfVEVNUExBVEUiLCJOQUlWRV9GSVhfUFJPTVBUIiwiZnJvbVRlbXBsYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/regex.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/regex.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegexParser: () => (/* binding */ RegexParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n/**\n * Class to parse the output of an LLM call into a dictionary.\n * @augments BaseOutputParser\n */ class RegexParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    static lc_name() {\n        return \"RegexParser\";\n    }\n    get lc_attributes() {\n        return {\n            regex: this.lc_kwargs.regex\n        };\n    }\n    constructor(fields, outputKeys, defaultOutputKey){\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (typeof fields === \"string\" || fields instanceof RegExp) {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                regex: fields,\n                outputKeys: outputKeys,\n                defaultOutputKey\n            };\n        }\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (fields.regex instanceof RegExp) {\n            // eslint-disable-next-line no-param-reassign\n            fields.regex = {\n                pattern: fields.regex.source,\n                flags: fields.regex.flags\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"regex\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"regex\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"defaultOutputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.regex = // eslint-disable-next-line no-nested-ternary\n        typeof fields.regex === \"string\" ? new RegExp(fields.regex) : \"pattern\" in fields.regex ? new RegExp(fields.regex.pattern, fields.regex.flags) : fields.regex;\n        this.outputKeys = fields.outputKeys;\n        this.defaultOutputKey = fields.defaultOutputKey;\n    }\n    _type() {\n        return \"regex_parser\";\n    }\n    /**\n     * Parses the given text using the regex pattern and returns a dictionary\n     * with the parsed output. If the regex pattern does not match the text\n     * and no defaultOutputKey is provided, throws an OutputParserException.\n     * @param text The text to be parsed.\n     * @returns A dictionary with the parsed output.\n     */ async parse(text) {\n        const match = text.match(this.regex);\n        if (match) {\n            return this.outputKeys.reduce((acc, key, index)=>{\n                acc[key] = match[index + 1];\n                return acc;\n            }, {});\n        }\n        if (this.defaultOutputKey === undefined) {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`, text);\n        }\n        return this.outputKeys.reduce((acc, key)=>{\n            acc[key] = key === this.defaultOutputKey ? text : \"\";\n            return acc;\n        }, {});\n    }\n    /**\n     * Returns a string with instructions on how the LLM output should be\n     * formatted to match the regex pattern.\n     * @returns A string with formatting instructions.\n     */ getFormatInstructions() {\n        return `Your response should match the following regex: ${this.regex}`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/router.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/router.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterOutputParser: () => (/* binding */ RouterOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n/* harmony import */ var _structured_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./structured.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/structured.js\");\n\n\n/**\n * A type of output parser that extends the\n * JsonMarkdownStructuredOutputParser. It is used to parse the output of a\n * router in LangChain. The class takes a schema and an optional\n * RouterOutputParserInput object as parameters.\n */ class RouterOutputParser extends _structured_js__WEBPACK_IMPORTED_MODULE_1__.JsonMarkdownStructuredOutputParser {\n    constructor(schema, options){\n        super(schema);\n        Object.defineProperty(this, \"defaultDestination\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"DEFAULT\"\n        });\n        this.defaultDestination = options?.defaultDestination ?? this.defaultDestination;\n    }\n    /**\n     * Overrides the parse method from JsonMarkdownStructuredOutputParser.\n     * This method takes a string as input, attempts to parse it, and returns\n     * the parsed text. If the destination of the parsed text matches the\n     * defaultDestination, the destination is set to null. If the parsing\n     * fails, an OutputParserException is thrown.\n     * @param text The text to be parsed.\n     * @returns The parsed text as a Promise.\n     */ async parse(text) {\n        try {\n            const parsedText = await super.parse(text);\n            if (parsedText.destination?.toLowerCase() === this.defaultDestination.toLowerCase()) {\n                parsedText.destination = null;\n            }\n            return parsedText;\n        } catch (e) {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvcm91dGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RTtBQUNGO0FBQ3JFOzs7OztDQUtDLEdBQ00sTUFBTUUsMkJBQTJCRCw4RUFBa0NBO0lBQ3RFRSxZQUFZQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUN6QixLQUFLLENBQUNEO1FBQ05FLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCO1lBQzlDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQSxJQUFJLENBQUNDLGtCQUFrQixHQUNuQlAsU0FBU08sc0JBQXNCLElBQUksQ0FBQ0Esa0JBQWtCO0lBQzlEO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDRCxNQUFNQyxNQUFNQyxJQUFJLEVBQUU7UUFDZCxJQUFJO1lBQ0EsTUFBTUMsYUFBYSxNQUFNLEtBQUssQ0FBQ0YsTUFBTUM7WUFDckMsSUFBSUMsV0FBV0MsV0FBVyxFQUFFQyxrQkFDeEIsSUFBSSxDQUFDTCxrQkFBa0IsQ0FBQ0ssV0FBVyxJQUFJO2dCQUN2Q0YsV0FBV0MsV0FBVyxHQUFHO1lBQzdCO1lBQ0EsT0FBT0Q7UUFDWCxFQUNBLE9BQU9HLEdBQUc7WUFDTixNQUFNLElBQUlsQixpRkFBcUJBLENBQUMsQ0FBQyx3QkFBd0IsRUFBRWMsS0FBSyxVQUFVLEVBQUVJLEVBQUUsQ0FBQyxFQUFFSjtRQUNyRjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvcm91dGVyLmpzPzMxOWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3V0cHV0UGFyc2VyRXhjZXB0aW9uIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9vdXRwdXRfcGFyc2Vyc1wiO1xuaW1wb3J0IHsgSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlciB9IGZyb20gXCIuL3N0cnVjdHVyZWQuanNcIjtcbi8qKlxuICogQSB0eXBlIG9mIG91dHB1dCBwYXJzZXIgdGhhdCBleHRlbmRzIHRoZVxuICogSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlci4gSXQgaXMgdXNlZCB0byBwYXJzZSB0aGUgb3V0cHV0IG9mIGFcbiAqIHJvdXRlciBpbiBMYW5nQ2hhaW4uIFRoZSBjbGFzcyB0YWtlcyBhIHNjaGVtYSBhbmQgYW4gb3B0aW9uYWxcbiAqIFJvdXRlck91dHB1dFBhcnNlcklucHV0IG9iamVjdCBhcyBwYXJhbWV0ZXJzLlxuICovXG5leHBvcnQgY2xhc3MgUm91dGVyT3V0cHV0UGFyc2VyIGV4dGVuZHMgSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHNjaGVtYSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRlZmF1bHREZXN0aW5hdGlvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJERUZBVUxUXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVmYXVsdERlc3RpbmF0aW9uID1cbiAgICAgICAgICAgIG9wdGlvbnM/LmRlZmF1bHREZXN0aW5hdGlvbiA/PyB0aGlzLmRlZmF1bHREZXN0aW5hdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIHRoZSBwYXJzZSBtZXRob2QgZnJvbSBKc29uTWFya2Rvd25TdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyLlxuICAgICAqIFRoaXMgbWV0aG9kIHRha2VzIGEgc3RyaW5nIGFzIGlucHV0LCBhdHRlbXB0cyB0byBwYXJzZSBpdCwgYW5kIHJldHVybnNcbiAgICAgKiB0aGUgcGFyc2VkIHRleHQuIElmIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcGFyc2VkIHRleHQgbWF0Y2hlcyB0aGVcbiAgICAgKiBkZWZhdWx0RGVzdGluYXRpb24sIHRoZSBkZXN0aW5hdGlvbiBpcyBzZXQgdG8gbnVsbC4gSWYgdGhlIHBhcnNpbmdcbiAgICAgKiBmYWlscywgYW4gT3V0cHV0UGFyc2VyRXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICAgKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byBiZSBwYXJzZWQuXG4gICAgICogQHJldHVybnMgVGhlIHBhcnNlZCB0ZXh0IGFzIGEgUHJvbWlzZS5cbiAgICAgKi9cbiAgICBhc3luYyBwYXJzZSh0ZXh0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRUZXh0ID0gYXdhaXQgc3VwZXIucGFyc2UodGV4dCk7XG4gICAgICAgICAgICBpZiAocGFyc2VkVGV4dC5kZXN0aW5hdGlvbj8udG9Mb3dlckNhc2UoKSA9PT1cbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHREZXN0aW5hdGlvbi50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkVGV4dC5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE91dHB1dFBhcnNlckV4Y2VwdGlvbihgRmFpbGVkIHRvIHBhcnNlLiBUZXh0OiBcIiR7dGV4dH1cIi4gRXJyb3I6ICR7ZX1gLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJPdXRwdXRQYXJzZXJFeGNlcHRpb24iLCJKc29uTWFya2Rvd25TdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIiwiUm91dGVyT3V0cHV0UGFyc2VyIiwiY29uc3RydWN0b3IiLCJzY2hlbWEiLCJvcHRpb25zIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImRlZmF1bHREZXN0aW5hdGlvbiIsInBhcnNlIiwidGV4dCIsInBhcnNlZFRleHQiLCJkZXN0aW5hdGlvbiIsInRvTG93ZXJDYXNlIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/router.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/structured.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/structured.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* binding */ AsymmetricStructuredOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* binding */ JsonMarkdownStructuredOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* binding */ StructuredOutputParser)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n\n\nclass StructuredOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    static lc_name() {\n        return \"StructuredOutputParser\";\n    }\n    toJSON() {\n        return this.toJSONNotImplemented();\n    }\n    constructor(schema){\n        super(schema);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: schema\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"structured\"\n            ]\n        });\n    }\n    /**\n     * Creates a new StructuredOutputParser from a Zod schema.\n     * @param schema The Zod schema which the output should match\n     * @returns A new instance of StructuredOutputParser.\n     */ static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    /**\n     * Creates a new StructuredOutputParser from a set of names and\n     * descriptions.\n     * @param schemas An object where each key is a name and each value is a description\n     * @returns A new instance of StructuredOutputParser.\n     */ static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[\n                name,\n                zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(description)\n            ])));\n        return new this(zodSchema);\n    }\n    /**\n     * Returns a markdown code snippet with a JSON object formatted according\n     * to the schema.\n     * @param options Optional. The options for formatting the instructions\n     * @returns A markdown code snippet with a JSON object formatted according to the schema.\n     */ getFormatInstructions() {\n        return `You must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}}}\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\n\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!\n\nHere is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:\n\\`\\`\\`json\n${JSON.stringify((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(this.schema))}\n\\`\\`\\`\n`;\n    }\n    /**\n     * Parses the given text according to the schema.\n     * @param text The text to parse\n     * @returns The parsed output.\n     */ async parse(text) {\n        try {\n            const json = text.includes(\"```\") ? text.trim().split(/```(?:json)?/)[1] : text.trim();\n            return await this.schema.parseAsync(JSON.parse(json));\n        } catch (e) {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\n/**\n * A specific type of `StructuredOutputParser` that parses JSON data\n * formatted as a markdown code snippet.\n */ class JsonMarkdownStructuredOutputParser extends StructuredOutputParser {\n    static lc_name() {\n        return \"JsonMarkdownStructuredOutputParser\";\n    }\n    getFormatInstructions(options) {\n        const interpolationDepth = options?.interpolationDepth ?? 1;\n        if (interpolationDepth < 1) {\n            throw new Error(\"f string interpolation depth must be at least 1\");\n        }\n        return `Return a markdown code snippet with a JSON object formatted to look like:\\n\\`\\`\\`json\\n${this._schemaToInstruction((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(this.schema)).replaceAll(\"{\", \"{\".repeat(interpolationDepth)).replaceAll(\"}\", \"}\".repeat(interpolationDepth))}\\n\\`\\`\\``;\n    }\n    _schemaToInstruction(schemaInput, indent = 2) {\n        const schema = schemaInput;\n        if (\"type\" in schema) {\n            let nullable = false;\n            let type;\n            if (Array.isArray(schema.type)) {\n                const nullIdx = schema.type.findIndex((type)=>type === \"null\");\n                if (nullIdx !== -1) {\n                    nullable = true;\n                    schema.type.splice(nullIdx, 1);\n                }\n                type = schema.type.join(\" | \");\n            } else {\n                type = schema.type;\n            }\n            if (schema.type === \"object\" && schema.properties) {\n                const description = schema.description ? ` // ${schema.description}` : \"\";\n                const properties = Object.entries(schema.properties).map(([key, value])=>{\n                    const isOptional = schema.required?.includes(key) ? \"\" : \" (optional)\";\n                    return `${\" \".repeat(indent)}\"${key}\": ${this._schemaToInstruction(value, indent + 2)}${isOptional}`;\n                }).join(\"\\n\");\n                return `{\\n${properties}\\n${\" \".repeat(indent - 2)}}${description}`;\n            }\n            if (schema.type === \"array\" && schema.items) {\n                const description = schema.description ? ` // ${schema.description}` : \"\";\n                return `array[\\n${\" \".repeat(indent)}${this._schemaToInstruction(schema.items, indent + 2)}\\n${\" \".repeat(indent - 2)}] ${description}`;\n            }\n            const isNullable = nullable ? \" (nullable)\" : \"\";\n            const description = schema.description ? ` // ${schema.description}` : \"\";\n            return `${type}${description}${isNullable}`;\n        }\n        if (\"anyOf\" in schema) {\n            return schema.anyOf.map((s)=>this._schemaToInstruction(s, indent)).join(`\\n${\" \".repeat(indent - 2)}`);\n        }\n        throw new Error(\"unsupported schema type\");\n    }\n    static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[\n                name,\n                zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(description)\n            ])));\n        return new this(zodSchema);\n    }\n}\n/**\n * A type of `StructuredOutputParser` that handles asymmetric input and\n * output schemas.\n */ class AsymmetricStructuredOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    constructor({ inputSchema }){\n        super(...arguments);\n        Object.defineProperty(this, \"structuredInputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.structuredInputParser = new JsonMarkdownStructuredOutputParser(inputSchema);\n    }\n    async parse(text) {\n        let parsedInput;\n        try {\n            parsedInput = await this.structuredInputParser.parse(text);\n        } catch (e) {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n        return this.outputProcessor(parsedInput);\n    }\n    getFormatInstructions() {\n        return this.structuredInputParser.getFormatInstructions();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/structured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/text_splitter.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/text_splitter.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterTextSplitter: () => (/* binding */ CharacterTextSplitter),\n/* harmony export */   LatexTextSplitter: () => (/* binding */ LatexTextSplitter),\n/* harmony export */   MarkdownTextSplitter: () => (/* binding */ MarkdownTextSplitter),\n/* harmony export */   RecursiveCharacterTextSplitter: () => (/* binding */ RecursiveCharacterTextSplitter),\n/* harmony export */   SupportedTextSplitterLanguages: () => (/* binding */ SupportedTextSplitterLanguages),\n/* harmony export */   TextSplitter: () => (/* binding */ TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* binding */ TokenTextSplitter)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/tiktoken */ \"(rsc)/./node_modules/@langchain/core/utils/tiktoken.js\");\n\n\nclass TextSplitter extends _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentTransformer {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"document_transformers\",\n                \"text_splitters\"\n            ]\n        });\n        Object.defineProperty(this, \"chunkSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1000\n        });\n        Object.defineProperty(this, \"chunkOverlap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 200\n        });\n        Object.defineProperty(this, \"keepSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lengthFunction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chunkSize = fields?.chunkSize ?? this.chunkSize;\n        this.chunkOverlap = fields?.chunkOverlap ?? this.chunkOverlap;\n        this.keepSeparator = fields?.keepSeparator ?? this.keepSeparator;\n        this.lengthFunction = fields?.lengthFunction ?? ((text)=>text.length);\n        if (this.chunkOverlap >= this.chunkSize) {\n            throw new Error(\"Cannot have chunkOverlap >= chunkSize\");\n        }\n    }\n    async transformDocuments(documents, chunkHeaderOptions = {}) {\n        return this.splitDocuments(documents, chunkHeaderOptions);\n    }\n    splitOnSeparator(text, separator) {\n        let splits;\n        if (separator) {\n            if (this.keepSeparator) {\n                const regexEscapedSeparator = separator.replace(/[/\\-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n                splits = text.split(new RegExp(`(?=${regexEscapedSeparator})`));\n            } else {\n                splits = text.split(separator);\n            }\n        } else {\n            splits = text.split(\"\");\n        }\n        return splits.filter((s)=>s !== \"\");\n    }\n    async createDocuments(texts, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadatas = [], chunkHeaderOptions = {}) {\n        // if no metadata is provided, we create an empty one for each text\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const _metadatas = metadatas.length > 0 ? metadatas : [\n            ...Array(texts.length)\n        ].map(()=>({}));\n        const { chunkHeader = \"\", chunkOverlapHeader = \"(cont'd) \", appendChunkOverlapHeader = false } = chunkHeaderOptions;\n        const documents = new Array();\n        for(let i = 0; i < texts.length; i += 1){\n            const text = texts[i];\n            let lineCounterIndex = 1;\n            let prevChunk = null;\n            let indexPrevChunk = -1;\n            for (const chunk of (await this.splitText(text))){\n                let pageContent = chunkHeader;\n                // we need to count the \\n that are in the text before getting removed by the splitting\n                const indexChunk = text.indexOf(chunk, indexPrevChunk + 1);\n                if (prevChunk === null) {\n                    const newLinesBeforeFirstChunk = this.numberOfNewLines(text, 0, indexChunk);\n                    lineCounterIndex += newLinesBeforeFirstChunk;\n                } else {\n                    const indexEndPrevChunk = indexPrevChunk + await this.lengthFunction(prevChunk);\n                    if (indexEndPrevChunk < indexChunk) {\n                        const numberOfIntermediateNewLines = this.numberOfNewLines(text, indexEndPrevChunk, indexChunk);\n                        lineCounterIndex += numberOfIntermediateNewLines;\n                    } else if (indexEndPrevChunk > indexChunk) {\n                        const numberOfIntermediateNewLines = this.numberOfNewLines(text, indexChunk, indexEndPrevChunk);\n                        lineCounterIndex -= numberOfIntermediateNewLines;\n                    }\n                    if (appendChunkOverlapHeader) {\n                        pageContent += chunkOverlapHeader;\n                    }\n                }\n                const newLinesCount = this.numberOfNewLines(chunk);\n                const loc = _metadatas[i].loc && typeof _metadatas[i].loc === \"object\" ? {\n                    ..._metadatas[i].loc\n                } : {};\n                loc.lines = {\n                    from: lineCounterIndex,\n                    to: lineCounterIndex + newLinesCount\n                };\n                const metadataWithLinesNumber = {\n                    ..._metadatas[i],\n                    loc\n                };\n                pageContent += chunk;\n                documents.push(new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    pageContent,\n                    metadata: metadataWithLinesNumber\n                }));\n                lineCounterIndex += newLinesCount;\n                prevChunk = chunk;\n                indexPrevChunk = indexChunk;\n            }\n        }\n        return documents;\n    }\n    numberOfNewLines(text, start, end) {\n        const textSection = text.slice(start, end);\n        return (textSection.match(/\\n/g) || []).length;\n    }\n    async splitDocuments(documents, chunkHeaderOptions = {}) {\n        const selectedDocuments = documents.filter((doc)=>doc.pageContent !== undefined);\n        const texts = selectedDocuments.map((doc)=>doc.pageContent);\n        const metadatas = selectedDocuments.map((doc)=>doc.metadata);\n        return this.createDocuments(texts, metadatas, chunkHeaderOptions);\n    }\n    joinDocs(docs, separator) {\n        const text = docs.join(separator).trim();\n        return text === \"\" ? null : text;\n    }\n    async mergeSplits(splits, separator) {\n        const docs = [];\n        const currentDoc = [];\n        let total = 0;\n        for (const d of splits){\n            const _len = await this.lengthFunction(d);\n            if (total + _len + currentDoc.length * separator.length > this.chunkSize) {\n                if (total > this.chunkSize) {\n                    console.warn(`Created a chunk of size ${total}, +\nwhich is longer than the specified ${this.chunkSize}`);\n                }\n                if (currentDoc.length > 0) {\n                    const doc = this.joinDocs(currentDoc, separator);\n                    if (doc !== null) {\n                        docs.push(doc);\n                    }\n                    // Keep on popping if:\n                    // - we have a larger chunk than in the chunk overlap\n                    // - or if we still have any chunks and the length is long\n                    while(total > this.chunkOverlap || total + _len + currentDoc.length * separator.length > this.chunkSize && total > 0){\n                        total -= await this.lengthFunction(currentDoc[0]);\n                        currentDoc.shift();\n                    }\n                }\n            }\n            currentDoc.push(d);\n            total += _len;\n        }\n        const doc = this.joinDocs(currentDoc, separator);\n        if (doc !== null) {\n            docs.push(doc);\n        }\n        return docs;\n    }\n}\nclass CharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"CharacterTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        this.separator = fields?.separator ?? this.separator;\n    }\n    async splitText(text) {\n        // First we naively split the large input into a bunch of smaller ones.\n        const splits = this.splitOnSeparator(text, this.separator);\n        return this.mergeSplits(splits, this.keepSeparator ? \"\" : this.separator);\n    }\n}\nconst SupportedTextSplitterLanguages = [\n    \"cpp\",\n    \"go\",\n    \"java\",\n    \"js\",\n    \"php\",\n    \"proto\",\n    \"python\",\n    \"rst\",\n    \"ruby\",\n    \"rust\",\n    \"scala\",\n    \"swift\",\n    \"markdown\",\n    \"latex\",\n    \"html\",\n    \"sol\"\n];\nclass RecursiveCharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"RecursiveCharacterTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"separators\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ]\n        });\n        this.separators = fields?.separators ?? this.separators;\n        this.keepSeparator = fields?.keepSeparator ?? true;\n    }\n    async _splitText(text, separators) {\n        const finalChunks = [];\n        // Get appropriate separator to use\n        let separator = separators[separators.length - 1];\n        let newSeparators;\n        for(let i = 0; i < separators.length; i += 1){\n            const s = separators[i];\n            if (s === \"\") {\n                separator = s;\n                break;\n            }\n            if (text.includes(s)) {\n                separator = s;\n                newSeparators = separators.slice(i + 1);\n                break;\n            }\n        }\n        // Now that we have the separator, split the text\n        const splits = this.splitOnSeparator(text, separator);\n        // Now go merging things, recursively splitting longer texts.\n        let goodSplits = [];\n        const _separator = this.keepSeparator ? \"\" : separator;\n        for (const s of splits){\n            if (await this.lengthFunction(s) < this.chunkSize) {\n                goodSplits.push(s);\n            } else {\n                if (goodSplits.length) {\n                    const mergedText = await this.mergeSplits(goodSplits, _separator);\n                    finalChunks.push(...mergedText);\n                    goodSplits = [];\n                }\n                if (!newSeparators) {\n                    finalChunks.push(s);\n                } else {\n                    const otherInfo = await this._splitText(s, newSeparators);\n                    finalChunks.push(...otherInfo);\n                }\n            }\n        }\n        if (goodSplits.length) {\n            const mergedText = await this.mergeSplits(goodSplits, _separator);\n            finalChunks.push(...mergedText);\n        }\n        return finalChunks;\n    }\n    async splitText(text) {\n        return this._splitText(text, this.separators);\n    }\n    static fromLanguage(language, options) {\n        return new RecursiveCharacterTextSplitter({\n            ...options,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(language)\n        });\n    }\n    static getSeparatorsForLanguage(language) {\n        if (language === \"cpp\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along function definitions\n                \"\\nvoid \",\n                \"\\nint \",\n                \"\\nfloat \",\n                \"\\ndouble \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"go\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                \"\\nvar \",\n                \"\\nconst \",\n                \"\\ntype \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"java\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along method definitions\n                \"\\npublic \",\n                \"\\nprotected \",\n                \"\\nprivate \",\n                \"\\nstatic \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"js\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                \"\\nconst \",\n                \"\\nlet \",\n                \"\\nvar \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                \"\\ndefault \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"php\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nforeach \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"proto\") {\n            return [\n                // Split along message definitions\n                \"\\nmessage \",\n                // Split along service definitions\n                \"\\nservice \",\n                // Split along enum definitions\n                \"\\nenum \",\n                // Split along option definitions\n                \"\\noption \",\n                // Split along import statements\n                \"\\nimport \",\n                // Split along syntax declarations\n                \"\\nsyntax \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"python\") {\n            return [\n                // First, try to split along class definitions\n                \"\\nclass \",\n                \"\\ndef \",\n                \"\\n\tdef \",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"rst\") {\n            return [\n                // Split along section titles\n                \"\\n===\\n\",\n                \"\\n---\\n\",\n                \"\\n***\\n\",\n                // Split along directive markers\n                \"\\n.. \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"ruby\") {\n            return [\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nunless \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\ndo \",\n                \"\\nbegin \",\n                \"\\nrescue \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"rust\") {\n            return [\n                // Split along function definitions\n                \"\\nfn \",\n                \"\\nconst \",\n                \"\\nlet \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\nloop \",\n                \"\\nmatch \",\n                \"\\nconst \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"scala\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nobject \",\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nval \",\n                \"\\nvar \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nmatch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"swift\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"markdown\") {\n            return [\n                // First, try to split along Markdown headings (starting with level 2)\n                \"\\n## \",\n                \"\\n### \",\n                \"\\n#### \",\n                \"\\n##### \",\n                \"\\n###### \",\n                // Note the alternative syntax for headings (below) is not handled here\n                // Heading level 2\n                // ---------------\n                // End of code block\n                \"```\\n\\n\",\n                // Horizontal lines\n                \"\\n\\n***\\n\\n\",\n                \"\\n\\n---\\n\\n\",\n                \"\\n\\n___\\n\\n\",\n                // Note that this splitter doesn't handle horizontal lines defined\n                // by *three or more* of ***, ---, or ___, but this is not handled\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"latex\") {\n            return [\n                // First, try to split along Latex sections\n                \"\\n\\\\chapter{\",\n                \"\\n\\\\section{\",\n                \"\\n\\\\subsection{\",\n                \"\\n\\\\subsubsection{\",\n                // Now split by environments\n                \"\\n\\\\begin{enumerate}\",\n                \"\\n\\\\begin{itemize}\",\n                \"\\n\\\\begin{description}\",\n                \"\\n\\\\begin{list}\",\n                \"\\n\\\\begin{quote}\",\n                \"\\n\\\\begin{quotation}\",\n                \"\\n\\\\begin{verse}\",\n                \"\\n\\\\begin{verbatim}\",\n                // Now split by math environments\n                \"\\n\\\\begin{align}\",\n                \"$$\",\n                \"$\",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"html\") {\n            return [\n                // First, try to split along HTML tags\n                \"<body>\",\n                \"<div>\",\n                \"<p>\",\n                \"<br>\",\n                \"<li>\",\n                \"<h1>\",\n                \"<h2>\",\n                \"<h3>\",\n                \"<h4>\",\n                \"<h5>\",\n                \"<h6>\",\n                \"<span>\",\n                \"<table>\",\n                \"<tr>\",\n                \"<td>\",\n                \"<th>\",\n                \"<ul>\",\n                \"<ol>\",\n                \"<header>\",\n                \"<footer>\",\n                \"<nav>\",\n                // Head\n                \"<head>\",\n                \"<style>\",\n                \"<script>\",\n                \"<meta>\",\n                \"<title>\",\n                // Normal type of lines\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"sol\") {\n            return [\n                // Split along compiler informations definitions\n                \"\\npragma \",\n                \"\\nusing \",\n                // Split along contract definitions\n                \"\\ncontract \",\n                \"\\ninterface \",\n                \"\\nlibrary \",\n                // Split along method definitions\n                \"\\nconstructor \",\n                \"\\ntype \",\n                \"\\nfunction \",\n                \"\\nevent \",\n                \"\\nmodifier \",\n                \"\\nerror \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo while \",\n                \"\\nassembly \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else {\n            throw new Error(`Language ${language} is not supported.`);\n        }\n    }\n}\n/**\n * Implementation of splitter which looks at tokens.\n */ class TokenTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"TokenTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"encodingName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"allowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"disallowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tokenizer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.encodingName = fields?.encodingName ?? \"gpt2\";\n        this.allowedSpecial = fields?.allowedSpecial ?? [];\n        this.disallowedSpecial = fields?.disallowedSpecial ?? \"all\";\n    }\n    async splitText(text) {\n        if (!this.tokenizer) {\n            this.tokenizer = await (0,_langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_1__.getEncoding)(this.encodingName);\n        }\n        const splits = [];\n        const input_ids = this.tokenizer.encode(text, this.allowedSpecial, this.disallowedSpecial);\n        let start_idx = 0;\n        while(start_idx < input_ids.length){\n            if (start_idx > 0) {\n                start_idx -= this.chunkOverlap;\n            }\n            const end_idx = Math.min(start_idx + this.chunkSize, input_ids.length);\n            const chunk_ids = input_ids.slice(start_idx, end_idx);\n            splits.push(this.tokenizer.decode(chunk_ids));\n            start_idx = end_idx;\n        }\n        return splits;\n    }\n}\nclass MarkdownTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields){\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"markdown\")\n        });\n    }\n}\nclass LatexTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields){\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"latex\")\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/text_splitter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/document.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/util/document.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatDocumentsAsString: () => (/* binding */ formatDocumentsAsString)\n/* harmony export */ });\n/**\n * Given a list of documents, this util formats their contents\n * into a string, separated by newlines.\n *\n * @param documents\n * @returns A string of the documents page content, separated by newlines.\n */ const formatDocumentsAsString = (documents)=>documents.map((doc)=>doc.pageContent).join(\"\\n\\n\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9kb2N1bWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBQ00sTUFBTUEsMEJBQTBCLENBQUNDLFlBQWNBLFVBQVVDLEdBQUcsQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxXQUFXLEVBQUVDLElBQUksQ0FBQyxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L3V0aWwvZG9jdW1lbnQuanM/YWZjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdpdmVuIGEgbGlzdCBvZiBkb2N1bWVudHMsIHRoaXMgdXRpbCBmb3JtYXRzIHRoZWlyIGNvbnRlbnRzXG4gKiBpbnRvIGEgc3RyaW5nLCBzZXBhcmF0ZWQgYnkgbmV3bGluZXMuXG4gKlxuICogQHBhcmFtIGRvY3VtZW50c1xuICogQHJldHVybnMgQSBzdHJpbmcgb2YgdGhlIGRvY3VtZW50cyBwYWdlIGNvbnRlbnQsIHNlcGFyYXRlZCBieSBuZXdsaW5lcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdERvY3VtZW50c0FzU3RyaW5nID0gKGRvY3VtZW50cykgPT4gZG9jdW1lbnRzLm1hcCgoZG9jKSA9PiBkb2MucGFnZUNvbnRlbnQpLmpvaW4oXCJcXG5cXG5cIik7XG4iXSwibmFtZXMiOlsiZm9ybWF0RG9jdW1lbnRzQXNTdHJpbmciLCJkb2N1bWVudHMiLCJtYXAiLCJkb2MiLCJwYWdlQ29udGVudCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/set.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/dist/util/set.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   union: () => (/* binding */ union)\n/* harmony export */ });\n/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */ /**\n * returns intersection of two sets\n */ function intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB){\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */ function union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB){\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */ function difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB){\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9zZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0NBRUMsR0FDRDs7Q0FFQyxHQUNNLFNBQVNBLGFBQWFDLElBQUksRUFBRUMsSUFBSTtJQUNuQyxNQUFNQyxnQkFBZ0IsSUFBSUM7SUFDMUIsS0FBSyxNQUFNQyxRQUFRSCxLQUFNO1FBQ3JCLElBQUlELEtBQUtLLEdBQUcsQ0FBQ0QsT0FBTztZQUNoQkYsY0FBY0ksR0FBRyxDQUFDRjtRQUN0QjtJQUNKO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBOztDQUVDLEdBQ00sU0FBU0ssTUFBTVAsSUFBSSxFQUFFQyxJQUFJO0lBQzVCLE1BQU1PLFNBQVMsSUFBSUwsSUFBSUg7SUFDdkIsS0FBSyxNQUFNSSxRQUFRSCxLQUFNO1FBQ3JCTyxPQUFPRixHQUFHLENBQUNGO0lBQ2Y7SUFDQSxPQUFPSTtBQUNYO0FBQ0E7O0NBRUMsR0FDTSxTQUFTQyxXQUFXVCxJQUFJLEVBQUVDLElBQUk7SUFDakMsTUFBTVMsY0FBYyxJQUFJUCxJQUFJSDtJQUM1QixLQUFLLE1BQU1JLFFBQVFILEtBQU07UUFDckJTLFlBQVlDLE1BQU0sQ0FBQ1A7SUFDdkI7SUFDQSxPQUFPTTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L3V0aWwvc2V0LmpzP2ZkMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTb3VyY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1NldCNpbXBsZW1lbnRpbmdfYmFzaWNfc2V0X29wZXJhdGlvbnNcbiAqL1xuLyoqXG4gKiByZXR1cm5zIGludGVyc2VjdGlvbiBvZiB0d28gc2V0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJzZWN0aW9uKHNldEEsIHNldEIpIHtcbiAgICBjb25zdCBfaW50ZXJzZWN0aW9uID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiBzZXRCKSB7XG4gICAgICAgIGlmIChzZXRBLmhhcyhlbGVtKSkge1xuICAgICAgICAgICAgX2ludGVyc2VjdGlvbi5hZGQoZWxlbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9pbnRlcnNlY3Rpb247XG59XG4vKipcbiAqIHJldHVybnMgdW5pb24gb2YgdHdvIHNldHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuaW9uKHNldEEsIHNldEIpIHtcbiAgICBjb25zdCBfdW5pb24gPSBuZXcgU2V0KHNldEEpO1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiBzZXRCKSB7XG4gICAgICAgIF91bmlvbi5hZGQoZWxlbSk7XG4gICAgfVxuICAgIHJldHVybiBfdW5pb247XG59XG4vKipcbiAqIHJldHVybnMgZGlmZmVyZW5jZSBvZiB0d28gc2V0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZShzZXRBLCBzZXRCKSB7XG4gICAgY29uc3QgX2RpZmZlcmVuY2UgPSBuZXcgU2V0KHNldEEpO1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiBzZXRCKSB7XG4gICAgICAgIF9kaWZmZXJlbmNlLmRlbGV0ZShlbGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIF9kaWZmZXJlbmNlO1xufVxuIl0sIm5hbWVzIjpbImludGVyc2VjdGlvbiIsInNldEEiLCJzZXRCIiwiX2ludGVyc2VjdGlvbiIsIlNldCIsImVsZW0iLCJoYXMiLCJhZGQiLCJ1bmlvbiIsIl91bmlvbiIsImRpZmZlcmVuY2UiLCJfZGlmZmVyZW5jZSIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/fs/pdf.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/document_loaders/fs/pdf.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFLoader: () => (/* reexport safe */ _dist_document_loaders_fs_pdf_js__WEBPACK_IMPORTED_MODULE_0__.PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _dist_document_loaders_fs_pdf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/document_loaders/fs/pdf.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2RvY3VtZW50X2xvYWRlcnMvZnMvcGRmLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kb2N1bWVudF9sb2FkZXJzL2ZzL3BkZi5qcz9hMTMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uLy4uL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9wZGYuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/document_loaders/fs/pdf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/output_parsers.js":
/*!**************************************************!*\
  !*** ./node_modules/langchain/output_parsers.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.AsymmetricStructuredOutputParser),\n/* harmony export */   CombiningOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CombiningOutputParser),\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CustomListOutputParser),\n/* harmony export */   DatetimeOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.DatetimeOutputParser),\n/* harmony export */   HttpResponseOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.HttpResponseOutputParser),\n/* harmony export */   JsonKeyOutputFunctionsParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonKeyOutputFunctionsParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonMarkdownStructuredOutputParser),\n/* harmony export */   JsonOutputFunctionsParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputFunctionsParser),\n/* harmony export */   JsonOutputKeyToolsParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputKeyToolsParser),\n/* harmony export */   JsonOutputToolsParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputToolsParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.ListOutputParser),\n/* harmony export */   OutputFixingParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.OutputFixingParser),\n/* harmony export */   OutputFunctionsParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.OutputFunctionsParser),\n/* harmony export */   RegexParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.RegexParser),\n/* harmony export */   RouterOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.RouterOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.StructuredOutputParser)\n/* harmony export */ });\n/* harmony import */ var _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/output_parsers/index.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL291dHB1dF9wYXJzZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vb3V0cHV0X3BhcnNlcnMuanM/NmE0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/output_parsers.js\n");

/***/ })

};
;