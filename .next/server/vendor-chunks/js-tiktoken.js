"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/js-tiktoken";
exports.ids = ["vendor-chunks/js-tiktoken"];
exports.modules = {

/***/ "(rsc)/./node_modules/js-tiktoken/dist/chunk-HXW345QN.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-tiktoken/dist/chunk-HXW345QN.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tiktoken: () => (/* binding */ Tiktoken),\n/* harmony export */   getEncodingNameForModel: () => (/* binding */ getEncodingNameForModel),\n/* harmony export */   never: () => (/* binding */ never)\n/* harmony export */ });\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64-js */ \"(rsc)/./node_modules/base64-js/index.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\n// src/utils.ts\nfunction never(_) {}\nfunction bytePairMerge(piece, ranks) {\n    let parts = Array.from({\n        length: piece.length\n    }, (_, i)=>({\n            start: i,\n            end: i + 1\n        }));\n    while(parts.length > 1){\n        let minRank = null;\n        for(let i = 0; i < parts.length - 1; i++){\n            const slice = piece.slice(parts[i].start, parts[i + 1].end);\n            const rank = ranks.get(slice.join(\",\"));\n            if (rank == null) continue;\n            if (minRank == null || rank < minRank[0]) {\n                minRank = [\n                    rank,\n                    i\n                ];\n            }\n        }\n        if (minRank != null) {\n            const i = minRank[1];\n            parts[i] = {\n                start: parts[i].start,\n                end: parts[i + 1].end\n            };\n            parts.splice(i + 1, 1);\n        } else {\n            break;\n        }\n    }\n    return parts;\n}\nfunction bytePairEncode(piece, ranks) {\n    if (piece.length === 1) return [\n        ranks.get(piece.join(\",\"))\n    ];\n    return bytePairMerge(piece, ranks).map((p)=>ranks.get(piece.slice(p.start, p.end).join(\",\"))).filter((x)=>x != null);\n}\nfunction escapeRegex(str) {\n    return str.replace(/[\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nvar _Tiktoken = class {\n    constructor(ranks, extendedSpecialTokens){\n        /** @internal */ this.textEncoder = new TextEncoder();\n        /** @internal */ this.textDecoder = new TextDecoder(\"utf-8\");\n        /** @internal */ this.rankMap = /* @__PURE__ */ new Map();\n        /** @internal */ this.textMap = /* @__PURE__ */ new Map();\n        this.patStr = ranks.pat_str;\n        const uncompressed = ranks.bpe_ranks.split(\"\\n\").filter(Boolean).reduce((memo, x)=>{\n            const [_, offsetStr, ...tokens] = x.split(\" \");\n            const offset = Number.parseInt(offsetStr, 10);\n            tokens.forEach((token, i)=>memo[token] = offset + i);\n            return memo;\n        }, {});\n        for (const [token, rank] of Object.entries(uncompressed)){\n            const bytes = base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(token);\n            this.rankMap.set(bytes.join(\",\"), rank);\n            this.textMap.set(rank, bytes);\n        }\n        this.specialTokens = {\n            ...ranks.special_tokens,\n            ...extendedSpecialTokens\n        };\n        this.inverseSpecialTokens = Object.entries(this.specialTokens).reduce((memo, [text, rank])=>{\n            memo[rank] = this.textEncoder.encode(text);\n            return memo;\n        }, {});\n    }\n    encode(text, allowedSpecial = [], disallowedSpecial = \"all\") {\n        const regexes = new RegExp(this.patStr, \"ug\");\n        const specialRegex = _Tiktoken.specialTokenRegex(Object.keys(this.specialTokens));\n        const ret = [];\n        const allowedSpecialSet = new Set(allowedSpecial === \"all\" ? Object.keys(this.specialTokens) : allowedSpecial);\n        const disallowedSpecialSet = new Set(disallowedSpecial === \"all\" ? Object.keys(this.specialTokens).filter((x)=>!allowedSpecialSet.has(x)) : disallowedSpecial);\n        if (disallowedSpecialSet.size > 0) {\n            const disallowedSpecialRegex = _Tiktoken.specialTokenRegex([\n                ...disallowedSpecialSet\n            ]);\n            const specialMatch = text.match(disallowedSpecialRegex);\n            if (specialMatch != null) {\n                throw new Error(`The text contains a special token that is not allowed: ${specialMatch[0]}`);\n            }\n        }\n        let start = 0;\n        while(true){\n            let nextSpecial = null;\n            let startFind = start;\n            while(true){\n                specialRegex.lastIndex = startFind;\n                nextSpecial = specialRegex.exec(text);\n                if (nextSpecial == null || allowedSpecialSet.has(nextSpecial[0])) break;\n                startFind = nextSpecial.index + 1;\n            }\n            const end = nextSpecial?.index ?? text.length;\n            for (const match of text.substring(start, end).matchAll(regexes)){\n                const piece = this.textEncoder.encode(match[0]);\n                const token2 = this.rankMap.get(piece.join(\",\"));\n                if (token2 != null) {\n                    ret.push(token2);\n                    continue;\n                }\n                ret.push(...bytePairEncode(piece, this.rankMap));\n            }\n            if (nextSpecial == null) break;\n            let token = this.specialTokens[nextSpecial[0]];\n            ret.push(token);\n            start = nextSpecial.index + nextSpecial[0].length;\n        }\n        return ret;\n    }\n    decode(tokens) {\n        const res = [];\n        let length = 0;\n        for(let i2 = 0; i2 < tokens.length; ++i2){\n            const token = tokens[i2];\n            const bytes = this.textMap.get(token) ?? this.inverseSpecialTokens[token];\n            if (bytes != null) {\n                res.push(bytes);\n                length += bytes.length;\n            }\n        }\n        const mergedArray = new Uint8Array(length);\n        let i = 0;\n        for (const bytes of res){\n            mergedArray.set(bytes, i);\n            i += bytes.length;\n        }\n        return this.textDecoder.decode(mergedArray);\n    }\n};\nvar Tiktoken = _Tiktoken;\n__publicField(Tiktoken, \"specialTokenRegex\", (tokens)=>{\n    return new RegExp(tokens.map((i)=>escapeRegex(i)).join(\"|\"), \"g\");\n});\nfunction getEncodingNameForModel(model) {\n    switch(model){\n        case \"gpt2\":\n            {\n                return \"gpt2\";\n            }\n        case \"code-cushman-001\":\n        case \"code-cushman-002\":\n        case \"code-davinci-001\":\n        case \"code-davinci-002\":\n        case \"cushman-codex\":\n        case \"davinci-codex\":\n        case \"davinci-002\":\n        case \"text-davinci-002\":\n        case \"text-davinci-003\":\n            {\n                return \"p50k_base\";\n            }\n        case \"code-davinci-edit-001\":\n        case \"text-davinci-edit-001\":\n            {\n                return \"p50k_edit\";\n            }\n        case \"ada\":\n        case \"babbage\":\n        case \"babbage-002\":\n        case \"code-search-ada-code-001\":\n        case \"code-search-babbage-code-001\":\n        case \"curie\":\n        case \"davinci\":\n        case \"text-ada-001\":\n        case \"text-babbage-001\":\n        case \"text-curie-001\":\n        case \"text-davinci-001\":\n        case \"text-search-ada-doc-001\":\n        case \"text-search-babbage-doc-001\":\n        case \"text-search-curie-doc-001\":\n        case \"text-search-davinci-doc-001\":\n        case \"text-similarity-ada-001\":\n        case \"text-similarity-babbage-001\":\n        case \"text-similarity-curie-001\":\n        case \"text-similarity-davinci-001\":\n            {\n                return \"r50k_base\";\n            }\n        case \"gpt-3.5-turbo-instruct-0914\":\n        case \"gpt-3.5-turbo-instruct\":\n        case \"gpt-3.5-turbo-16k-0613\":\n        case \"gpt-3.5-turbo-16k\":\n        case \"gpt-3.5-turbo-0613\":\n        case \"gpt-3.5-turbo-0301\":\n        case \"gpt-3.5-turbo\":\n        case \"gpt-4-32k-0613\":\n        case \"gpt-4-32k-0314\":\n        case \"gpt-4-32k\":\n        case \"gpt-4-0613\":\n        case \"gpt-4-0314\":\n        case \"gpt-4\":\n        case \"gpt-3.5-turbo-1106\":\n        case \"gpt-35-turbo\":\n        case \"gpt-4-1106-preview\":\n        case \"gpt-4-vision-preview\":\n        case \"gpt-3.5-turbo-0125\":\n        case \"gpt-4-turbo-preview\":\n        case \"gpt-4-0125-preview\":\n        case \"text-embedding-ada-002\":\n            {\n                return \"cl100k_base\";\n            }\n        default:\n            throw new Error(\"Unknown model\");\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/js-tiktoken/dist/chunk-HXW345QN.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/js-tiktoken/dist/lite.js":
/*!***********************************************!*\
  !*** ./node_modules/js-tiktoken/dist/lite.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tiktoken: () => (/* reexport safe */ _chunk_HXW345QN_js__WEBPACK_IMPORTED_MODULE_0__.Tiktoken),\n/* harmony export */   getEncodingNameForModel: () => (/* reexport safe */ _chunk_HXW345QN_js__WEBPACK_IMPORTED_MODULE_0__.getEncodingNameForModel)\n/* harmony export */ });\n/* harmony import */ var _chunk_HXW345QN_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-HXW345QN.js */ \"(rsc)/./node_modules/js-tiktoken/dist/chunk-HXW345QN.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvanMtdGlrdG9rZW4vZGlzdC9saXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9qcy10aWt0b2tlbi9kaXN0L2xpdGUuanM/Y2VjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBUaWt0b2tlbiwgZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwgfSBmcm9tICcuL2NodW5rLUhYVzM0NVFOLmpzJztcbiJdLCJuYW1lcyI6WyJUaWt0b2tlbiIsImdldEVuY29kaW5nTmFtZUZvck1vZGVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/js-tiktoken/dist/lite.js\n");

/***/ })

};
;