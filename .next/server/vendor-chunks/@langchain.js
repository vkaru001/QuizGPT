"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain";
exports.ids = ["vendor-chunks/@langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/ansi-styles/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nconst ANSI_BACKGROUND_OFFSET = 10;\nconst wrapAnsi256 = (offset = 0)=>(code)=>`\\u001B[${38 + offset};5;${code}m`;\nconst wrapAnsi16m = (offset = 0)=>(red, green, blue)=>`\\u001B[${38 + offset};2;${red};${green};${blue}m`;\nfunction assembleStyles() {\n    const codes = new Map();\n    const styles = {\n        modifier: {\n            reset: [\n                0,\n                0\n            ],\n            // 21 isn't widely supported and 22 does the same thing\n            bold: [\n                1,\n                22\n            ],\n            dim: [\n                2,\n                22\n            ],\n            italic: [\n                3,\n                23\n            ],\n            underline: [\n                4,\n                24\n            ],\n            overline: [\n                53,\n                55\n            ],\n            inverse: [\n                7,\n                27\n            ],\n            hidden: [\n                8,\n                28\n            ],\n            strikethrough: [\n                9,\n                29\n            ]\n        },\n        color: {\n            black: [\n                30,\n                39\n            ],\n            red: [\n                31,\n                39\n            ],\n            green: [\n                32,\n                39\n            ],\n            yellow: [\n                33,\n                39\n            ],\n            blue: [\n                34,\n                39\n            ],\n            magenta: [\n                35,\n                39\n            ],\n            cyan: [\n                36,\n                39\n            ],\n            white: [\n                37,\n                39\n            ],\n            // Bright color\n            blackBright: [\n                90,\n                39\n            ],\n            redBright: [\n                91,\n                39\n            ],\n            greenBright: [\n                92,\n                39\n            ],\n            yellowBright: [\n                93,\n                39\n            ],\n            blueBright: [\n                94,\n                39\n            ],\n            magentaBright: [\n                95,\n                39\n            ],\n            cyanBright: [\n                96,\n                39\n            ],\n            whiteBright: [\n                97,\n                39\n            ]\n        },\n        bgColor: {\n            bgBlack: [\n                40,\n                49\n            ],\n            bgRed: [\n                41,\n                49\n            ],\n            bgGreen: [\n                42,\n                49\n            ],\n            bgYellow: [\n                43,\n                49\n            ],\n            bgBlue: [\n                44,\n                49\n            ],\n            bgMagenta: [\n                45,\n                49\n            ],\n            bgCyan: [\n                46,\n                49\n            ],\n            bgWhite: [\n                47,\n                49\n            ],\n            // Bright color\n            bgBlackBright: [\n                100,\n                49\n            ],\n            bgRedBright: [\n                101,\n                49\n            ],\n            bgGreenBright: [\n                102,\n                49\n            ],\n            bgYellowBright: [\n                103,\n                49\n            ],\n            bgBlueBright: [\n                104,\n                49\n            ],\n            bgMagentaBright: [\n                105,\n                49\n            ],\n            bgCyanBright: [\n                106,\n                49\n            ],\n            bgWhiteBright: [\n                107,\n                49\n            ]\n        }\n    };\n    // Alias bright black as gray (and grey)\n    styles.color.gray = styles.color.blackBright;\n    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n    styles.color.grey = styles.color.blackBright;\n    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n    for (const [groupName, group] of Object.entries(styles)){\n        for (const [styleName, style] of Object.entries(group)){\n            styles[styleName] = {\n                open: `\\u001B[${style[0]}m`,\n                close: `\\u001B[${style[1]}m`\n            };\n            group[styleName] = styles[styleName];\n            codes.set(style[0], style[1]);\n        }\n        Object.defineProperty(styles, groupName, {\n            value: group,\n            enumerable: false\n        });\n    }\n    Object.defineProperty(styles, \"codes\", {\n        value: codes,\n        enumerable: false\n    });\n    styles.color.close = \"\\x1b[39m\";\n    styles.bgColor.close = \"\\x1b[49m\";\n    styles.color.ansi256 = wrapAnsi256();\n    styles.color.ansi16m = wrapAnsi16m();\n    styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n    styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n    // From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n    Object.defineProperties(styles, {\n        rgbToAnsi256: {\n            value: (red, green, blue)=>{\n                // We use the extended greyscale palette here, with the exception of\n                // black and white. normal palette only has 4 greyscale shades.\n                if (red === green && green === blue) {\n                    if (red < 8) {\n                        return 16;\n                    }\n                    if (red > 248) {\n                        return 231;\n                    }\n                    return Math.round((red - 8) / 247 * 24) + 232;\n                }\n                return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);\n            },\n            enumerable: false\n        },\n        hexToRgb: {\n            value: (hex)=>{\n                const matches = /(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})/i.exec(hex.toString(16));\n                if (!matches) {\n                    return [\n                        0,\n                        0,\n                        0\n                    ];\n                }\n                let { colorString } = matches.groups;\n                if (colorString.length === 3) {\n                    colorString = colorString.split(\"\").map((character)=>character + character).join(\"\");\n                }\n                const integer = Number.parseInt(colorString, 16);\n                return [\n                    integer >> 16 & 0xFF,\n                    integer >> 8 & 0xFF,\n                    integer & 0xFF\n                ];\n            },\n            enumerable: false\n        },\n        hexToAnsi256: {\n            value: (hex)=>styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n            enumerable: false\n        }\n    });\n    return styles;\n}\n// Make the export immutable\nObject.defineProperty(module, \"exports\", {\n    enumerable: true,\n    get: assembleStyles\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/camelcase/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/camelcase/index.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\nconst LEADING_SEPARATORS = new RegExp(\"^\" + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, \"gu\");\nconst NUMBERS_AND_IDENTIFIER = new RegExp(\"\\\\d+\" + IDENTIFIER.source, \"gu\");\nconst preserveCamelCase = (string, toLowerCase, toUpperCase)=>{\n    let isLastCharLower = false;\n    let isLastCharUpper = false;\n    let isLastLastCharUpper = false;\n    for(let i = 0; i < string.length; i++){\n        const character = string[i];\n        if (isLastCharLower && UPPERCASE.test(character)) {\n            string = string.slice(0, i) + \"-\" + string.slice(i);\n            isLastCharLower = false;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = true;\n            i++;\n        } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n            string = string.slice(0, i - 1) + \"-\" + string.slice(i - 1);\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = false;\n            isLastCharLower = true;\n        } else {\n            isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n        }\n    }\n    return string;\n};\nconst preserveConsecutiveUppercase = (input, toLowerCase)=>{\n    LEADING_CAPITAL.lastIndex = 0;\n    return input.replace(LEADING_CAPITAL, (m1)=>toLowerCase(m1));\n};\nconst postProcess = (input, toUpperCase)=>{\n    SEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n    NUMBERS_AND_IDENTIFIER.lastIndex = 0;\n    return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier)=>toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, (m)=>toUpperCase(m));\n};\nconst camelCase = (input, options)=>{\n    if (!(typeof input === \"string\" || Array.isArray(input))) {\n        throw new TypeError(\"Expected the input to be `string | string[]`\");\n    }\n    options = {\n        pascalCase: false,\n        preserveConsecutiveUppercase: false,\n        ...options\n    };\n    if (Array.isArray(input)) {\n        input = input.map((x)=>x.trim()).filter((x)=>x.length).join(\"-\");\n    } else {\n        input = input.trim();\n    }\n    if (input.length === 0) {\n        return \"\";\n    }\n    const toLowerCase = options.locale === false ? (string)=>string.toLowerCase() : (string)=>string.toLocaleLowerCase(options.locale);\n    const toUpperCase = options.locale === false ? (string)=>string.toUpperCase() : (string)=>string.toLocaleUpperCase(options.locale);\n    if (input.length === 1) {\n        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n    }\n    const hasUpperCase = input !== toLowerCase(input);\n    if (hasUpperCase) {\n        input = preserveCamelCase(input, toLowerCase, toUpperCase);\n    }\n    input = input.replace(LEADING_SEPARATORS, \"\");\n    if (options.preserveConsecutiveUppercase) {\n        input = preserveConsecutiveUppercase(input, toLowerCase);\n    } else {\n        input = toLowerCase(input);\n    }\n    if (options.pascalCase) {\n        input = toUpperCase(input.charAt(0)) + input.slice(1);\n    }\n    return postProcess(input, toUpperCase);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = camelCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/camelcase/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/callbacks/manager.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/callbacks/manager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackManager: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackManager),\n/* harmony export */   CallbackManager: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager),\n/* harmony export */   CallbackManagerForChainRun: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManagerForChainRun),\n/* harmony export */   CallbackManagerForLLMRun: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManagerForLLMRun),\n/* harmony export */   CallbackManagerForRetrieverRun: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManagerForRetrieverRun),\n/* harmony export */   CallbackManagerForToolRun: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManagerForToolRun),\n/* harmony export */   TraceGroup: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.TraceGroup),\n/* harmony export */   ensureHandler: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler),\n/* harmony export */   parseCallbackConfigArg: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg),\n/* harmony export */   traceAsGroup: () => (/* reexport safe */ _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.traceAsGroup)\n/* harmony export */ });\n/* harmony import */ var _dist_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2NhbGxiYWNrcy9tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9jYWxsYmFja3MvbWFuYWdlci5qcz9mZjQ0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvY2FsbGJhY2tzL21hbmFnZXIuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/callbacks/manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/caches.js":
/*!*****************************************************!*\
  !*** ./node_modules/@langchain/core/dist/caches.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCache: () => (/* binding */ BaseCache),\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache),\n/* harmony export */   deserializeStoredGeneration: () => (/* binding */ deserializeStoredGeneration),\n/* harmony export */   getCacheKey: () => (/* binding */ getCacheKey),\n/* harmony export */   serializeGeneration: () => (/* binding */ serializeGeneration)\n/* harmony export */ });\n/* harmony import */ var _utils_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/hash.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n\n/**\n * This cache key should be consistent across all versions of langchain.\n * It is currently NOT consistent across versions of langchain.\n *\n * A huge benefit of having a remote cache (like redis) is that you can\n * access the cache from different processes/machines. The allows you to\n * seperate concerns and scale horizontally.\n *\n * TODO: Make cache key consistent across versions of langchain.\n */ const getCacheKey = (...strings)=>(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)(strings.join(\"_\"));\nfunction deserializeStoredGeneration(storedGeneration) {\n    if (storedGeneration.message !== undefined) {\n        return {\n            text: storedGeneration.text,\n            message: (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.mapStoredMessageToChatMessage)(storedGeneration.message)\n        };\n    } else {\n        return {\n            text: storedGeneration.text\n        };\n    }\n}\nfunction serializeGeneration(generation) {\n    const serializedValue = {\n        text: generation.text\n    };\n    if (generation.message !== undefined) {\n        serializedValue.message = generation.message.toDict();\n    }\n    return serializedValue;\n}\n/**\n * Base class for all caches. All caches should extend this class.\n */ class BaseCache {\n}\nconst GLOBAL_MAP = new Map();\n/**\n * A cache for storing LLM generations that stores data in memory.\n */ class InMemoryCache extends BaseCache {\n    constructor(map){\n        super();\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cache = map ?? new Map();\n    }\n    /**\n     * Retrieves data from the cache using a prompt and an LLM key. If the\n     * data is not found, it returns null.\n     * @param prompt The prompt used to find the data.\n     * @param llmKey The LLM key used to find the data.\n     * @returns The data corresponding to the prompt and LLM key, or null if not found.\n     */ lookup(prompt, llmKey) {\n        return Promise.resolve(this.cache.get(getCacheKey(prompt, llmKey)) ?? null);\n    }\n    /**\n     * Updates the cache with new data using a prompt and an LLM key.\n     * @param prompt The prompt used to store the data.\n     * @param llmKey The LLM key used to store the data.\n     * @param value The data to be stored.\n     */ async update(prompt, llmKey, value) {\n        this.cache.set(getCacheKey(prompt, llmKey), value);\n    }\n    /**\n     * Returns a global instance of InMemoryCache using a predefined global\n     * map as the initial cache.\n     * @returns A global instance of InMemoryCache.\n     */ static global() {\n        return new InMemoryCache(GLOBAL_MAP);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FjaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0M7QUFDc0I7QUFDckU7Ozs7Ozs7OztDQVNDLEdBQ00sTUFBTUUsY0FBYyxDQUFDLEdBQUdDLFVBQVlILDREQUFZQSxDQUFDRyxRQUFRQyxJQUFJLENBQUMsTUFBTTtBQUNwRSxTQUFTQyw0QkFBNEJDLGdCQUFnQjtJQUN4RCxJQUFJQSxpQkFBaUJDLE9BQU8sS0FBS0MsV0FBVztRQUN4QyxPQUFPO1lBQ0hDLE1BQU1ILGlCQUFpQkcsSUFBSTtZQUMzQkYsU0FBU04saUZBQTZCQSxDQUFDSyxpQkFBaUJDLE9BQU87UUFDbkU7SUFDSixPQUNLO1FBQ0QsT0FBTztZQUFFRSxNQUFNSCxpQkFBaUJHLElBQUk7UUFBQztJQUN6QztBQUNKO0FBQ08sU0FBU0Msb0JBQW9CQyxVQUFVO0lBQzFDLE1BQU1DLGtCQUFrQjtRQUNwQkgsTUFBTUUsV0FBV0YsSUFBSTtJQUN6QjtJQUNBLElBQUlFLFdBQVdKLE9BQU8sS0FBS0MsV0FBVztRQUNsQ0ksZ0JBQWdCTCxPQUFPLEdBQUdJLFdBQVdKLE9BQU8sQ0FBQ00sTUFBTTtJQUN2RDtJQUNBLE9BQU9EO0FBQ1g7QUFDQTs7Q0FFQyxHQUNNLE1BQU1FO0FBQ2I7QUFDQSxNQUFNQyxhQUFhLElBQUlDO0FBQ3ZCOztDQUVDLEdBQ00sTUFBTUMsc0JBQXNCSDtJQUMvQkksWUFBWUMsR0FBRyxDQUFFO1FBQ2IsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVM7WUFDakNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsS0FBSyxHQUFHUCxPQUFPLElBQUlIO0lBQzVCO0lBQ0E7Ozs7OztLQU1DLEdBQ0RXLE9BQU9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ25CLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQyxJQUFJLENBQUNMLEtBQUssQ0FBQ00sR0FBRyxDQUFDOUIsWUFBWTBCLFFBQVFDLFlBQVk7SUFDMUU7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1JLE9BQU9MLE1BQU0sRUFBRUMsTUFBTSxFQUFFSixLQUFLLEVBQUU7UUFDaEMsSUFBSSxDQUFDQyxLQUFLLENBQUNRLEdBQUcsQ0FBQ2hDLFlBQVkwQixRQUFRQyxTQUFTSjtJQUNoRDtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPVSxTQUFTO1FBQ1osT0FBTyxJQUFJbEIsY0FBY0Y7SUFDN0I7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9jYWNoZXMuanM/NjViZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnNlY3VyZUhhc2ggfSBmcm9tIFwiLi91dGlscy9oYXNoLmpzXCI7XG5pbXBvcnQgeyBtYXBTdG9yZWRNZXNzYWdlVG9DaGF0TWVzc2FnZSwgfSBmcm9tIFwiLi9tZXNzYWdlcy9pbmRleC5qc1wiO1xuLyoqXG4gKiBUaGlzIGNhY2hlIGtleSBzaG91bGQgYmUgY29uc2lzdGVudCBhY3Jvc3MgYWxsIHZlcnNpb25zIG9mIGxhbmdjaGFpbi5cbiAqIEl0IGlzIGN1cnJlbnRseSBOT1QgY29uc2lzdGVudCBhY3Jvc3MgdmVyc2lvbnMgb2YgbGFuZ2NoYWluLlxuICpcbiAqIEEgaHVnZSBiZW5lZml0IG9mIGhhdmluZyBhIHJlbW90ZSBjYWNoZSAobGlrZSByZWRpcykgaXMgdGhhdCB5b3UgY2FuXG4gKiBhY2Nlc3MgdGhlIGNhY2hlIGZyb20gZGlmZmVyZW50IHByb2Nlc3Nlcy9tYWNoaW5lcy4gVGhlIGFsbG93cyB5b3UgdG9cbiAqIHNlcGVyYXRlIGNvbmNlcm5zIGFuZCBzY2FsZSBob3Jpem9udGFsbHkuXG4gKlxuICogVE9ETzogTWFrZSBjYWNoZSBrZXkgY29uc2lzdGVudCBhY3Jvc3MgdmVyc2lvbnMgb2YgbGFuZ2NoYWluLlxuICovXG5leHBvcnQgY29uc3QgZ2V0Q2FjaGVLZXkgPSAoLi4uc3RyaW5ncykgPT4gaW5zZWN1cmVIYXNoKHN0cmluZ3Muam9pbihcIl9cIikpO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc2VyaWFsaXplU3RvcmVkR2VuZXJhdGlvbihzdG9yZWRHZW5lcmF0aW9uKSB7XG4gICAgaWYgKHN0b3JlZEdlbmVyYXRpb24ubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiBzdG9yZWRHZW5lcmF0aW9uLnRleHQsXG4gICAgICAgICAgICBtZXNzYWdlOiBtYXBTdG9yZWRNZXNzYWdlVG9DaGF0TWVzc2FnZShzdG9yZWRHZW5lcmF0aW9uLm1lc3NhZ2UpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdGV4dDogc3RvcmVkR2VuZXJhdGlvbi50ZXh0IH07XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZUdlbmVyYXRpb24oZ2VuZXJhdGlvbikge1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRWYWx1ZSA9IHtcbiAgICAgICAgdGV4dDogZ2VuZXJhdGlvbi50ZXh0LFxuICAgIH07XG4gICAgaWYgKGdlbmVyYXRpb24ubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlcmlhbGl6ZWRWYWx1ZS5tZXNzYWdlID0gZ2VuZXJhdGlvbi5tZXNzYWdlLnRvRGljdCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZFZhbHVlO1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgY2FjaGVzLiBBbGwgY2FjaGVzIHNob3VsZCBleHRlbmQgdGhpcyBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VDYWNoZSB7XG59XG5jb25zdCBHTE9CQUxfTUFQID0gbmV3IE1hcCgpO1xuLyoqXG4gKiBBIGNhY2hlIGZvciBzdG9yaW5nIExMTSBnZW5lcmF0aW9ucyB0aGF0IHN0b3JlcyBkYXRhIGluIG1lbW9yeS5cbiAqL1xuZXhwb3J0IGNsYXNzIEluTWVtb3J5Q2FjaGUgZXh0ZW5kcyBCYXNlQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKG1hcCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWNoZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNhY2hlID0gbWFwID8/IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGRhdGEgZnJvbSB0aGUgY2FjaGUgdXNpbmcgYSBwcm9tcHQgYW5kIGFuIExMTSBrZXkuIElmIHRoZVxuICAgICAqIGRhdGEgaXMgbm90IGZvdW5kLCBpdCByZXR1cm5zIG51bGwuXG4gICAgICogQHBhcmFtIHByb21wdCBUaGUgcHJvbXB0IHVzZWQgdG8gZmluZCB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0gbGxtS2V5IFRoZSBMTE0ga2V5IHVzZWQgdG8gZmluZCB0aGUgZGF0YS5cbiAgICAgKiBAcmV0dXJucyBUaGUgZGF0YSBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9tcHQgYW5kIExMTSBrZXksIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICAgICAqL1xuICAgIGxvb2t1cChwcm9tcHQsIGxsbUtleSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY2FjaGUuZ2V0KGdldENhY2hlS2V5KHByb21wdCwgbGxtS2V5KSkgPz8gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGNhY2hlIHdpdGggbmV3IGRhdGEgdXNpbmcgYSBwcm9tcHQgYW5kIGFuIExMTSBrZXkuXG4gICAgICogQHBhcmFtIHByb21wdCBUaGUgcHJvbXB0IHVzZWQgdG8gc3RvcmUgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIGxsbUtleSBUaGUgTExNIGtleSB1c2VkIHRvIHN0b3JlIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgZGF0YSB0byBiZSBzdG9yZWQuXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlKHByb21wdCwgbGxtS2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmNhY2hlLnNldChnZXRDYWNoZUtleShwcm9tcHQsIGxsbUtleSksIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGdsb2JhbCBpbnN0YW5jZSBvZiBJbk1lbW9yeUNhY2hlIHVzaW5nIGEgcHJlZGVmaW5lZCBnbG9iYWxcbiAgICAgKiBtYXAgYXMgdGhlIGluaXRpYWwgY2FjaGUuXG4gICAgICogQHJldHVybnMgQSBnbG9iYWwgaW5zdGFuY2Ugb2YgSW5NZW1vcnlDYWNoZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2xvYmFsKCkge1xuICAgICAgICByZXR1cm4gbmV3IEluTWVtb3J5Q2FjaGUoR0xPQkFMX01BUCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImluc2VjdXJlSGFzaCIsIm1hcFN0b3JlZE1lc3NhZ2VUb0NoYXRNZXNzYWdlIiwiZ2V0Q2FjaGVLZXkiLCJzdHJpbmdzIiwiam9pbiIsImRlc2VyaWFsaXplU3RvcmVkR2VuZXJhdGlvbiIsInN0b3JlZEdlbmVyYXRpb24iLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwidGV4dCIsInNlcmlhbGl6ZUdlbmVyYXRpb24iLCJnZW5lcmF0aW9uIiwic2VyaWFsaXplZFZhbHVlIiwidG9EaWN0IiwiQmFzZUNhY2hlIiwiR0xPQkFMX01BUCIsIk1hcCIsIkluTWVtb3J5Q2FjaGUiLCJjb25zdHJ1Y3RvciIsIm1hcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJjYWNoZSIsImxvb2t1cCIsInByb21wdCIsImxsbUtleSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZ2V0IiwidXBkYXRlIiwic2V0IiwiZ2xvYmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/caches.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackHandler: () => (/* binding */ BaseCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */ class BaseCallbackHandlerMethodsClass {\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */ class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\n            \"langchain_core\",\n            \"callbacks\",\n            this.name\n        ];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            (0,_load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.get_lc_unique_name)(this.constructor)\n        ];\n    }\n    constructor(input){\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") !== \"true\"\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n            this.awaitHandlers = input._awaitHandler ?? this.awaitHandlers;\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/manager.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackManager: () => (/* binding */ BaseCallbackManager),\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   CallbackManagerForChainRun: () => (/* binding */ CallbackManagerForChainRun),\n/* harmony export */   CallbackManagerForLLMRun: () => (/* binding */ CallbackManagerForLLMRun),\n/* harmony export */   CallbackManagerForRetrieverRun: () => (/* binding */ CallbackManagerForRetrieverRun),\n/* harmony export */   CallbackManagerForToolRun: () => (/* binding */ CallbackManagerForToolRun),\n/* harmony export */   TraceGroup: () => (/* binding */ TraceGroup),\n/* harmony export */   ensureHandler: () => (/* binding */ ensureHandler),\n/* harmony export */   parseCallbackConfigArg: () => (/* binding */ parseCallbackConfigArg),\n/* harmony export */   traceAsGroup: () => (/* binding */ traceAsGroup)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n/* harmony import */ var _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tracers/console.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/console.js\");\n/* harmony import */ var _tracers_initialize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/initialize.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/initialize.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tracers/tracer_langchain.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _promises_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js\");\n\n\n\n\n\n\n\n\nif (/* #__PURE__ */ (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING_V2\") === \"true\" && /* #__PURE__ */ (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") !== \"true\") {\n    /* #__PURE__ */ console.warn([\n        \"[WARN]: You have enabled LangSmith tracing without backgrounding callbacks.\",\n        \"[WARN]: If you are not using a serverless environment where you must wait for tracing calls to finish,\",\n        `[WARN]: we suggest setting \"process.env.LANGCHAIN_CALLBACKS_BACKGROUND=true\" to avoid additional latency.`\n    ].join(\"\\n\"));\n}\nfunction parseCallbackConfigArg(arg) {\n    if (!arg) {\n        return {};\n    } else if (Array.isArray(arg) || \"name\" in arg) {\n        return {\n            callbacks: arg\n        };\n    } else {\n        return arg;\n    }\n}\n/**\n * Manage callbacks from different components of LangChain.\n */ class BaseCallbackManager {\n    setHandler(handler) {\n        return this.setHandlers([\n            handler\n        ]);\n    }\n}\n/**\n * Base class for run manager in LangChain.\n */ class BaseRunManager {\n    constructor(runId, handlers, inheritableHandlers, tags, inheritableTags, metadata, inheritableMetadata, _parentRunId){\n        Object.defineProperty(this, \"runId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: runId\n        });\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: handlers\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableHandlers\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tags\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableTags\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: metadata\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableMetadata\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _parentRunId\n        });\n    }\n    async handleText(text) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleText?.(text, this.runId, this._parentRunId, this.tags);\n                } catch (err) {\n                    console.error(`Error in handler ${handler.constructor.name}, handleText: ${err}`);\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * Manages callbacks for retriever runs.\n */ class CallbackManagerForRetrieverRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleRetrieverEnd(documents) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverEnd?.(documents, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetriever`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleRetrieverError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (error) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForLLMRun extends BaseRunManager {\n    async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMNewToken?.(token, idx ?? {\n                            prompt: 0,\n                            completion: 0\n                        }, this.runId, this._parentRunId, this.tags, fields);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForChainRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainError?.(err, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainEnd?.(output, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentAction(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentAction?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentEnd(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentEnd?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForToolRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleToolError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleToolEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(\"What is the answer to {question}?\");\n *\n * // Example of using LLMChain with OpenAI and a simple prompt\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Running the chain with a single question\n * const result = await chain.call({\n *   question: \"What is the airspeed velocity of an unladen swallow?\",\n * });\n * console.log(\"The answer is:\", result);\n * ```\n */ class CallbackManager extends BaseCallbackManager {\n    constructor(parentRunId, options){\n        super();\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"callback_manager\"\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.handlers = options?.handlers ?? this.handlers;\n        this.inheritableHandlers = options?.inheritableHandlers ?? this.inheritableHandlers;\n        this.tags = options?.tags ?? this.tags;\n        this.inheritableTags = options?.inheritableTags ?? this.inheritableTags;\n        this.metadata = options?.metadata ?? this.metadata;\n        this.inheritableMetadata = options?.inheritableMetadata ?? this.inheritableMetadata;\n        this._parentRunId = parentRunId;\n    }\n    /**\n     * Gets the parent run ID, if any.\n     *\n     * @returns The parent run ID.\n     */ getParentRunId() {\n        return this._parentRunId;\n    }\n    async handleLLMStart(llm, prompts, _runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(prompts.map(async (prompt)=>{\n            const runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            await handler.handleLLMStart?.(llm, [\n                                prompt\n                            ], runId, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChatModelStart(llm, messages, _runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(messages.map(async (messageGroup)=>{\n            const runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            if (handler.handleChatModelStart) {\n                                await handler.handleChatModelStart?.(llm, [\n                                    messageGroup\n                                ], runId, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                            } else if (handler.handleLLMStart) {\n                                const messageString = (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_3__.getBufferString)(messageGroup);\n                                await handler.handleLLMStart?.(llm, [\n                                    messageString\n                                ], runId, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                            }\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChainStart(chain, inputs, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), runType = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainStart?.(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleToolStart(tool, input, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolStart?.(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleRetrieverStart(retriever, query, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverStart?.(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForRetrieverRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    addHandler(handler, inherit = true) {\n        this.handlers.push(handler);\n        if (inherit) {\n            this.inheritableHandlers.push(handler);\n        }\n    }\n    removeHandler(handler) {\n        this.handlers = this.handlers.filter((_handler)=>_handler !== handler);\n        this.inheritableHandlers = this.inheritableHandlers.filter((_handler)=>_handler !== handler);\n    }\n    setHandlers(handlers, inherit = true) {\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        for (const handler of handlers){\n            this.addHandler(handler, inherit);\n        }\n    }\n    addTags(tags, inherit = true) {\n        this.removeTags(tags); // Remove duplicates\n        this.tags.push(...tags);\n        if (inherit) {\n            this.inheritableTags.push(...tags);\n        }\n    }\n    removeTags(tags) {\n        this.tags = this.tags.filter((tag)=>!tags.includes(tag));\n        this.inheritableTags = this.inheritableTags.filter((tag)=>!tags.includes(tag));\n    }\n    addMetadata(metadata, inherit = true) {\n        this.metadata = {\n            ...this.metadata,\n            ...metadata\n        };\n        if (inherit) {\n            this.inheritableMetadata = {\n                ...this.inheritableMetadata,\n                ...metadata\n            };\n        }\n    }\n    removeMetadata(metadata) {\n        for (const key of Object.keys(metadata)){\n            delete this.metadata[key];\n            delete this.inheritableMetadata[key];\n        }\n    }\n    copy(additionalHandlers = [], inherit = true) {\n        const manager = new CallbackManager(this._parentRunId);\n        for (const handler of this.handlers){\n            const inheritable = this.inheritableHandlers.includes(handler);\n            manager.addHandler(handler, inheritable);\n        }\n        for (const tag of this.tags){\n            const inheritable = this.inheritableTags.includes(tag);\n            manager.addTags([\n                tag\n            ], inheritable);\n        }\n        for (const key of Object.keys(this.metadata)){\n            const inheritable = Object.keys(this.inheritableMetadata).includes(key);\n            manager.addMetadata({\n                [key]: this.metadata[key]\n            }, inheritable);\n        }\n        for (const handler of additionalHandlers){\n            if (// Prevent multiple copies of console_callback_handler\n            manager.handlers.filter((h)=>h.name === \"console_callback_handler\").some((h)=>h.name === handler.name)) {\n                continue;\n            }\n            manager.addHandler(handler, inherit);\n        }\n        return manager;\n    }\n    static fromHandlers(handlers) {\n        class Handler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])()\n                });\n                Object.assign(this, handlers);\n            }\n        }\n        const manager = new this();\n        manager.addHandler(new Handler());\n        return manager;\n    }\n    static async configure(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        let callbackManager;\n        if (inheritableHandlers || localHandlers) {\n            if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {\n                callbackManager = new CallbackManager();\n                callbackManager.setHandlers(inheritableHandlers?.map(ensureHandler) ?? [], true);\n            } else {\n                callbackManager = inheritableHandlers;\n            }\n            callbackManager = callbackManager.copy(Array.isArray(localHandlers) ? localHandlers.map(ensureHandler) : localHandlers?.handlers, false);\n        }\n        const verboseEnabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_VERBOSE\") === \"true\" || options?.verbose;\n        const tracingV2Enabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING_V2\") === \"true\";\n        const tracingEnabled = tracingV2Enabled || ((0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING\") ?? false);\n        if (verboseEnabled || tracingEnabled) {\n            if (!callbackManager) {\n                callbackManager = new CallbackManager();\n            }\n            if (verboseEnabled && !callbackManager.handlers.some((handler)=>handler.name === _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler.prototype.name)) {\n                const consoleHandler = new _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler();\n                callbackManager.addHandler(consoleHandler, true);\n            }\n            if (tracingEnabled && !callbackManager.handlers.some((handler)=>handler.name === \"langchain_tracer\")) {\n                if (tracingV2Enabled) {\n                    callbackManager.addHandler(await (0,_tracers_initialize_js__WEBPACK_IMPORTED_MODULE_2__.getTracingV2CallbackHandler)(), true);\n                }\n            }\n        }\n        if (inheritableTags || localTags) {\n            if (callbackManager) {\n                callbackManager.addTags(inheritableTags ?? []);\n                callbackManager.addTags(localTags ?? [], false);\n            }\n        }\n        if (inheritableMetadata || localMetadata) {\n            if (callbackManager) {\n                callbackManager.addMetadata(inheritableMetadata ?? {});\n                callbackManager.addMetadata(localMetadata ?? {}, false);\n            }\n        }\n        return callbackManager;\n    }\n}\nfunction ensureHandler(handler) {\n    if (\"name\" in handler) {\n        return handler;\n    }\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler.fromMethods(handler);\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(`What is the answer to {question}?`);\n *\n * // Example of using LLMChain to process a series of questions\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Process questions using the chain\n * const processQuestions = async (questions) => {\n *   for (const question of questions) {\n *     const result = await chain.call({ question });\n *     console.log(result);\n *   }\n * };\n *\n * // Example questions\n * const questions = [\n *   \"What is your name?\",\n *   \"What is your quest?\",\n *   \"What is your favorite color?\",\n * ];\n *\n * // Run the example\n * processQuestions(questions).catch(console.error);\n *\n * ```\n */ class TraceGroup {\n    constructor(groupName, options){\n        Object.defineProperty(this, \"groupName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: groupName\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"runManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async getTraceGroupCallbackManager(group_name, inputs, options) {\n        const cb = new _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__.LangChainTracer(options);\n        const cm = await CallbackManager.configure([\n            cb\n        ]);\n        const runManager = await cm?.handleChainStart({\n            lc: 1,\n            type: \"not_implemented\",\n            id: [\n                \"langchain\",\n                \"callbacks\",\n                \"groups\",\n                group_name\n            ]\n        }, inputs ?? {});\n        if (!runManager) {\n            throw new Error(\"Failed to create run group callback manager.\");\n        }\n        return runManager;\n    }\n    async start(inputs) {\n        if (!this.runManager) {\n            this.runManager = await this.getTraceGroupCallbackManager(this.groupName, inputs, this.options);\n        }\n        return this.runManager.getChild();\n    }\n    async error(err) {\n        if (this.runManager) {\n            await this.runManager.handleChainError(err);\n            this.runManager = undefined;\n        }\n    }\n    async end(output) {\n        if (this.runManager) {\n            await this.runManager.handleChainEnd(output ?? {});\n            this.runManager = undefined;\n        }\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function traceAsGroup(groupOptions, enclosedCode, ...args) {\n    const traceGroup = new TraceGroup(groupOptions.name, groupOptions);\n    const callbackManager = await traceGroup.start({\n        ...args\n    });\n    try {\n        const result = await enclosedCode(callbackManager, ...args);\n        await traceGroup.end(_coerceToDict(result, \"output\"));\n        return result;\n    } catch (err) {\n        await traceGroup.error(err);\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/promises.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* binding */ awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* binding */ consumeCallback)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */ function createQueue() {\n    const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_0__;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1\n    });\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promise Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */ async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        await promiseFn();\n    } else {\n        if (typeof queue === \"undefined\") {\n            queue = createQueue();\n        }\n        void queue.add(promiseFn);\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */ function awaitAllCallbacks() {\n    return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnQztBQUNoQyxJQUFJQztBQUNKOzs7O0NBSUMsR0FDRCxTQUFTQztJQUNMLE1BQU1DLFNBQVMsS0FBc0JILEdBQUdBLCtDQUFpQixHQUFHQSxvQ0FBU0E7SUFDckUsT0FBTyxJQUFJRyxPQUFPO1FBQ2RFLFdBQVc7UUFDWEMsYUFBYTtJQUNqQjtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNNLGVBQWVDLGdCQUFnQkMsU0FBUyxFQUFFQyxJQUFJO0lBQ2pELElBQUlBLFNBQVMsTUFBTTtRQUNmLE1BQU1EO0lBQ1YsT0FDSztRQUNELElBQUksT0FBT1AsVUFBVSxhQUFhO1lBQzlCQSxRQUFRQztRQUNaO1FBQ0EsS0FBS0QsTUFBTVMsR0FBRyxDQUFDRjtJQUNuQjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sU0FBU0c7SUFDWixPQUFPLE9BQU9WLFVBQVUsY0FBY0EsTUFBTVcsTUFBTSxLQUFLQyxRQUFRQyxPQUFPO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhbGxiYWNrcy9wcm9taXNlcy5qcz9lYzMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQUXVldWVNb2QgZnJvbSBcInAtcXVldWVcIjtcbmxldCBxdWV1ZTtcbi8qKlxuICogQ3JlYXRlcyBhIHF1ZXVlIHVzaW5nIHRoZSBwLXF1ZXVlIGxpYnJhcnkuIFRoZSBxdWV1ZSBpcyBjb25maWd1cmVkIHRvXG4gKiBhdXRvLXN0YXJ0IGFuZCBoYXMgYSBjb25jdXJyZW5jeSBvZiAxLCBtZWFuaW5nIGl0IHdpbGwgcHJvY2VzcyB0YXNrc1xuICogb25lIGF0IGEgdGltZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUXVldWUoKSB7XG4gICAgY29uc3QgUFF1ZXVlID0gXCJkZWZhdWx0XCIgaW4gUFF1ZXVlTW9kID8gUFF1ZXVlTW9kLmRlZmF1bHQgOiBQUXVldWVNb2Q7XG4gICAgcmV0dXJuIG5ldyBQUXVldWUoe1xuICAgICAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgIH0pO1xufVxuLyoqXG4gKiBDb25zdW1lIGEgcHJvbWlzZSwgZWl0aGVyIGFkZGluZyBpdCB0byB0aGUgcXVldWUgb3Igd2FpdGluZyBmb3IgaXQgdG8gcmVzb2x2ZVxuICogQHBhcmFtIHByb21pc2UgUHJvbWlzZSB0byBjb25zdW1lXG4gKiBAcGFyYW0gd2FpdCBXaGV0aGVyIHRvIHdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgb3IgcmVzb2x2ZSBpbW1lZGlhdGVseVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uc3VtZUNhbGxiYWNrKHByb21pc2VGbiwgd2FpdCkge1xuICAgIGlmICh3YWl0ID09PSB0cnVlKSB7XG4gICAgICAgIGF3YWl0IHByb21pc2VGbigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWV1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcXVldWUgPSBjcmVhdGVRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZvaWQgcXVldWUuYWRkKHByb21pc2VGbik7XG4gICAgfVxufVxuLyoqXG4gKiBXYWl0cyBmb3IgYWxsIHByb21pc2VzIGluIHRoZSBxdWV1ZSB0byByZXNvbHZlLiBJZiB0aGUgcXVldWUgaXNcbiAqIHVuZGVmaW5lZCwgaXQgaW1tZWRpYXRlbHkgcmVzb2x2ZXMgYSBwcm9taXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRBbGxDYWxsYmFja3MoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBxdWV1ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHF1ZXVlLm9uSWRsZSgpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG59XG4iXSwibmFtZXMiOlsiUFF1ZXVlTW9kIiwicXVldWUiLCJjcmVhdGVRdWV1ZSIsIlBRdWV1ZSIsImRlZmF1bHQiLCJhdXRvU3RhcnQiLCJjb25jdXJyZW5jeSIsImNvbnN1bWVDYWxsYmFjayIsInByb21pc2VGbiIsIndhaXQiLCJhZGQiLCJhd2FpdEFsbENhbGxiYWNrcyIsIm9uSWRsZSIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/document.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/document.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Document: () => (/* binding */ Document)\n/* harmony export */ });\n/**\n * Interface for interacting with a document.\n */ class Document {\n    constructor(fields){\n        Object.defineProperty(this, \"pageContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pageContent = fields.pageContent ? fields.pageContent.toString() : this.pageContent;\n        this.metadata = fields.metadata ?? {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2RvY3VtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNNLE1BQU1BO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFdBQVcsR0FBR1AsT0FBT08sV0FBVyxHQUMvQlAsT0FBT08sV0FBVyxDQUFDQyxRQUFRLEtBQzNCLElBQUksQ0FBQ0QsV0FBVztRQUN0QixJQUFJLENBQUNFLFFBQVEsR0FBR1QsT0FBT1MsUUFBUSxJQUFJLENBQUM7SUFDeEM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9kb2N1bWVudHMvZG9jdW1lbnQuanM/YjRmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYWdlQ29udGVudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXRhZGF0YVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBhZ2VDb250ZW50ID0gZmllbGRzLnBhZ2VDb250ZW50XG4gICAgICAgICAgICA/IGZpZWxkcy5wYWdlQ29udGVudC50b1N0cmluZygpXG4gICAgICAgICAgICA6IHRoaXMucGFnZUNvbnRlbnQ7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBmaWVsZHMubWV0YWRhdGEgPz8ge307XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkRvY3VtZW50IiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwicGFnZUNvbnRlbnQiLCJ0b1N0cmluZyIsIm1ldGFkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_1__.BaseDocumentTransformer),\n/* harmony export */   Document: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_0__.Document),\n/* harmony export */   MappingDocumentTransformer: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_1__.MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@langchain/core/dist/documents/document.js\");\n/* harmony import */ var _transformers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformers.js */ \"(rsc)/./node_modules/@langchain/core/dist/documents/transformers.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThCO0FBQ0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2luZGV4LmpzPzI2MjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vZG9jdW1lbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RyYW5zZm9ybWVycy5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/transformers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/transformers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* binding */ BaseDocumentTransformer),\n/* harmony export */   MappingDocumentTransformer: () => (/* binding */ MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n\n/**\n * Abstract base class for document transformation systems.\n *\n * A document transformation system takes an array of Documents and returns an\n * array of transformed Documents. These arrays do not necessarily have to have\n * the same length.\n *\n * One example of this is a text splitter that splits a large document into\n * many smaller documents.\n */ class BaseDocumentTransformer extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"documents\",\n                \"transformers\"\n            ]\n        });\n    }\n    /**\n     * Method to invoke the document transformation. This method calls the\n     * transformDocuments method with the provided input.\n     * @param input The input documents to be transformed.\n     * @param _options Optional configuration object to customize the behavior of callbacks.\n     * @returns A Promise that resolves to the transformed documents.\n     */ invoke(input, _options) {\n        return this.transformDocuments(input);\n    }\n}\n/**\n * Class for document transformers that return exactly one transformed document\n * for each input document.\n */ class MappingDocumentTransformer extends BaseDocumentTransformer {\n    async transformDocuments(documents) {\n        const newDocuments = [];\n        for (const document of documents){\n            const transformedDocument = await this._transformDocument(document);\n            newDocuments.push(transformedDocument);\n        }\n        return newDocuments;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL3RyYW5zZm9ybWVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Q7QUFDaEQ7Ozs7Ozs7OztDQVNDLEdBQ00sTUFBTUMsZ0NBQWdDRCx3REFBUUE7SUFDakRFLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFrQjtnQkFBYTthQUFlO1FBQzFEO0lBQ0o7SUFDQTs7Ozs7O0tBTUMsR0FDREMsT0FBT0MsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLGtCQUFrQixDQUFDRjtJQUNuQztBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTUcsbUNBQW1DYjtJQUM1QyxNQUFNWSxtQkFBbUJFLFNBQVMsRUFBRTtRQUNoQyxNQUFNQyxlQUFlLEVBQUU7UUFDdkIsS0FBSyxNQUFNQyxZQUFZRixVQUFXO1lBQzlCLE1BQU1HLHNCQUFzQixNQUFNLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNGO1lBQzFERCxhQUFhSSxJQUFJLENBQUNGO1FBQ3RCO1FBQ0EsT0FBT0Y7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2RvY3VtZW50cy90cmFuc2Zvcm1lcnMuanM/NTAwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdW5uYWJsZSB9IGZyb20gXCIuLi9ydW5uYWJsZXMvYmFzZS5qc1wiO1xuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbiBzeXN0ZW1zLlxuICpcbiAqIEEgZG9jdW1lbnQgdHJhbnNmb3JtYXRpb24gc3lzdGVtIHRha2VzIGFuIGFycmF5IG9mIERvY3VtZW50cyBhbmQgcmV0dXJucyBhblxuICogYXJyYXkgb2YgdHJhbnNmb3JtZWQgRG9jdW1lbnRzLiBUaGVzZSBhcnJheXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaGF2ZVxuICogdGhlIHNhbWUgbGVuZ3RoLlxuICpcbiAqIE9uZSBleGFtcGxlIG9mIHRoaXMgaXMgYSB0ZXh0IHNwbGl0dGVyIHRoYXQgc3BsaXRzIGEgbGFyZ2UgZG9jdW1lbnQgaW50b1xuICogbWFueSBzbWFsbGVyIGRvY3VtZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VEb2N1bWVudFRyYW5zZm9ybWVyIGV4dGVuZHMgUnVubmFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwiZG9jdW1lbnRzXCIsIFwidHJhbnNmb3JtZXJzXCJdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gaW52b2tlIHRoZSBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbi4gVGhpcyBtZXRob2QgY2FsbHMgdGhlXG4gICAgICogdHJhbnNmb3JtRG9jdW1lbnRzIG1ldGhvZCB3aXRoIHRoZSBwcm92aWRlZCBpbnB1dC5cbiAgICAgKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IGRvY3VtZW50cyB0byBiZSB0cmFuc2Zvcm1lZC5cbiAgICAgKiBAcGFyYW0gX29wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gY3VzdG9taXplIHRoZSBiZWhhdmlvciBvZiBjYWxsYmFja3MuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zZm9ybWVkIGRvY3VtZW50cy5cbiAgICAgKi9cbiAgICBpbnZva2UoaW5wdXQsIF9vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybURvY3VtZW50cyhpbnB1dCk7XG4gICAgfVxufVxuLyoqXG4gKiBDbGFzcyBmb3IgZG9jdW1lbnQgdHJhbnNmb3JtZXJzIHRoYXQgcmV0dXJuIGV4YWN0bHkgb25lIHRyYW5zZm9ybWVkIGRvY3VtZW50XG4gKiBmb3IgZWFjaCBpbnB1dCBkb2N1bWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1hcHBpbmdEb2N1bWVudFRyYW5zZm9ybWVyIGV4dGVuZHMgQmFzZURvY3VtZW50VHJhbnNmb3JtZXIge1xuICAgIGFzeW5jIHRyYW5zZm9ybURvY3VtZW50cyhkb2N1bWVudHMpIHtcbiAgICAgICAgY29uc3QgbmV3RG9jdW1lbnRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2YgZG9jdW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZERvY3VtZW50ID0gYXdhaXQgdGhpcy5fdHJhbnNmb3JtRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgICAgICAgICAgbmV3RG9jdW1lbnRzLnB1c2godHJhbnNmb3JtZWREb2N1bWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RvY3VtZW50cztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUnVubmFibGUiLCJCYXNlRG9jdW1lbnRUcmFuc2Zvcm1lciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImludm9rZSIsImlucHV0IiwiX29wdGlvbnMiLCJ0cmFuc2Zvcm1Eb2N1bWVudHMiLCJNYXBwaW5nRG9jdW1lbnRUcmFuc2Zvcm1lciIsImRvY3VtZW50cyIsIm5ld0RvY3VtZW50cyIsImRvY3VtZW50IiwidHJhbnNmb3JtZWREb2N1bWVudCIsIl90cmFuc2Zvcm1Eb2N1bWVudCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/transformers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/embeddings.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/embeddings.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n/**\n * An abstract class that provides methods for embedding documents and\n * queries using LangChain.\n */ class Embeddings {\n    constructor(params){\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__.AsyncCaller(params ?? {});\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZW1iZWRkaW5ncy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUN0RDs7O0NBR0MsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEI7OztTQUdDLEdBQ0RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSVYsK0RBQVdBLENBQUNHLFVBQVUsQ0FBQztJQUM3QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2VtYmVkZGluZ3MuanM/ZTE5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0NhbGxlciB9IGZyb20gXCIuL3V0aWxzL2FzeW5jX2NhbGxlci5qc1wiO1xuLyoqXG4gKiBBbiBhYnN0cmFjdCBjbGFzcyB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgZm9yIGVtYmVkZGluZyBkb2N1bWVudHMgYW5kXG4gKiBxdWVyaWVzIHVzaW5nIExhbmdDaGFpbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVtYmVkZGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFzeW5jIGNhbGxlciBzaG91bGQgYmUgdXNlZCBieSBzdWJjbGFzc2VzIHRvIG1ha2UgYW55IGFzeW5jIGNhbGxzLFxuICAgICAgICAgKiB3aGljaCB3aWxsIHRodXMgYmVuZWZpdCBmcm9tIHRoZSBjb25jdXJyZW5jeSBhbmQgcmV0cnkgbG9naWMuXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWxsZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYWxsZXIgPSBuZXcgQXN5bmNDYWxsZXIocGFyYW1zID8/IHt9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQXN5bmNDYWxsZXIiLCJFbWJlZGRpbmdzIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiY2FsbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/example_selectors/base.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/base.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseExampleSelector: () => (/* binding */ BaseExampleSelector)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n\n/**\n * Base class for example selectors.\n */ class BaseExampleSelector extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"example_selectors\",\n                \"base\"\n            ]\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZXhhbXBsZV9zZWxlY3RvcnMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1RDtBQUN2RDs7Q0FFQyxHQUNNLE1BQU1DLDRCQUE0QkQsK0RBQVlBO0lBQ2pERSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNUQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBa0I7Z0JBQXFCO2FBQU87UUFDMUQ7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2V4YW1wbGVfc2VsZWN0b3JzL2Jhc2UuanM/YzUzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXJpYWxpemFibGUgfSBmcm9tIFwiLi4vbG9hZC9zZXJpYWxpemFibGUuanNcIjtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgZXhhbXBsZSBzZWxlY3RvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlRXhhbXBsZVNlbGVjdG9yIGV4dGVuZHMgU2VyaWFsaXphYmxlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5fY29yZVwiLCBcImV4YW1wbGVfc2VsZWN0b3JzXCIsIFwiYmFzZVwiXVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiU2VyaWFsaXphYmxlIiwiQmFzZUV4YW1wbGVTZWxlY3RvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/example_selectors/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/example_selectors/conditional.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/conditional.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePromptSelector: () => (/* binding */ BasePromptSelector),\n/* harmony export */   ConditionalPromptSelector: () => (/* binding */ ConditionalPromptSelector),\n/* harmony export */   isChatModel: () => (/* binding */ isChatModel),\n/* harmony export */   isLLM: () => (/* binding */ isLLM)\n/* harmony export */ });\n/**\n * Abstract class that defines the interface for selecting a prompt for a\n * given language model.\n */ class BasePromptSelector {\n    /**\n     * Asynchronous version of `getPrompt` that also accepts an options object\n     * for partial variables.\n     * @param llm The language model for which to get a prompt.\n     * @param options Optional object for partial variables.\n     * @returns A Promise that resolves to a prompt template.\n     */ async getPromptAsync(llm, options) {\n        const prompt = this.getPrompt(llm);\n        return prompt.partial(options?.partialVariables ?? {});\n    }\n}\n/**\n * Concrete implementation of `BasePromptSelector` that selects a prompt\n * based on a set of conditions. It has a default prompt that it returns\n * if none of the conditions are met.\n */ class ConditionalPromptSelector extends BasePromptSelector {\n    constructor(default_prompt, conditionals = []){\n        super();\n        Object.defineProperty(this, \"defaultPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"conditionals\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.defaultPrompt = default_prompt;\n        this.conditionals = conditionals;\n    }\n    /**\n     * Method that selects a prompt based on a set of conditions. If none of\n     * the conditions are met, it returns the default prompt.\n     * @param llm The language model for which to get a prompt.\n     * @returns A prompt template.\n     */ getPrompt(llm) {\n        for (const [condition, prompt] of this.conditionals){\n            if (condition(llm)) {\n                return prompt;\n            }\n        }\n        return this.defaultPrompt;\n    }\n}\n/**\n * Type guard function that checks if a given language model is of type\n * `BaseLLM`.\n */ function isLLM(llm) {\n    return llm._modelType() === \"base_llm\";\n}\n/**\n * Type guard function that checks if a given language model is of type\n * `BaseChatModel`.\n */ function isChatModel(llm) {\n    return llm._modelType() === \"base_chat_model\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZXhhbXBsZV9zZWxlY3RvcnMvY29uZGl0aW9uYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Q0FHQyxHQUNNLE1BQU1BO0lBQ1Q7Ozs7OztLQU1DLEdBQ0QsTUFBTUMsZUFBZUMsR0FBRyxFQUFFQyxPQUFPLEVBQUU7UUFDL0IsTUFBTUMsU0FBUyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0g7UUFDOUIsT0FBT0UsT0FBT0UsT0FBTyxDQUFDSCxTQUFTSSxvQkFBb0IsQ0FBQztJQUN4RDtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNNLE1BQU1DLGtDQUFrQ1I7SUFDM0NTLFlBQVlDLGNBQWMsRUFBRUMsZUFBZSxFQUFFLENBQUU7UUFDM0MsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGlCQUFpQjtZQUN6Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLGFBQWEsR0FBR1I7UUFDckIsSUFBSSxDQUFDQyxZQUFZLEdBQUdBO0lBQ3hCO0lBQ0E7Ozs7O0tBS0MsR0FDRE4sVUFBVUgsR0FBRyxFQUFFO1FBQ1gsS0FBSyxNQUFNLENBQUNpQixXQUFXZixPQUFPLElBQUksSUFBSSxDQUFDTyxZQUFZLENBQUU7WUFDakQsSUFBSVEsVUFBVWpCLE1BQU07Z0JBQ2hCLE9BQU9FO1lBQ1g7UUFDSjtRQUNBLE9BQU8sSUFBSSxDQUFDYyxhQUFhO0lBQzdCO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxTQUFTRSxNQUFNbEIsR0FBRztJQUNyQixPQUFPQSxJQUFJbUIsVUFBVSxPQUFPO0FBQ2hDO0FBQ0E7OztDQUdDLEdBQ00sU0FBU0MsWUFBWXBCLEdBQUc7SUFDM0IsT0FBT0EsSUFBSW1CLFVBQVUsT0FBTztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9leGFtcGxlX3NlbGVjdG9ycy9jb25kaXRpb25hbC5qcz8xY2YxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCBkZWZpbmVzIHRoZSBpbnRlcmZhY2UgZm9yIHNlbGVjdGluZyBhIHByb21wdCBmb3IgYVxuICogZ2l2ZW4gbGFuZ3VhZ2UgbW9kZWwuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlUHJvbXB0U2VsZWN0b3Ige1xuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91cyB2ZXJzaW9uIG9mIGBnZXRQcm9tcHRgIHRoYXQgYWxzbyBhY2NlcHRzIGFuIG9wdGlvbnMgb2JqZWN0XG4gICAgICogZm9yIHBhcnRpYWwgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSBsbG0gVGhlIGxhbmd1YWdlIG1vZGVsIGZvciB3aGljaCB0byBnZXQgYSBwcm9tcHQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb2JqZWN0IGZvciBwYXJ0aWFsIHZhcmlhYmxlcy5cbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHByb21wdCB0ZW1wbGF0ZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRQcm9tcHRBc3luYyhsbG0sIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcHJvbXB0ID0gdGhpcy5nZXRQcm9tcHQobGxtKTtcbiAgICAgICAgcmV0dXJuIHByb21wdC5wYXJ0aWFsKG9wdGlvbnM/LnBhcnRpYWxWYXJpYWJsZXMgPz8ge30pO1xuICAgIH1cbn1cbi8qKlxuICogQ29uY3JldGUgaW1wbGVtZW50YXRpb24gb2YgYEJhc2VQcm9tcHRTZWxlY3RvcmAgdGhhdCBzZWxlY3RzIGEgcHJvbXB0XG4gKiBiYXNlZCBvbiBhIHNldCBvZiBjb25kaXRpb25zLiBJdCBoYXMgYSBkZWZhdWx0IHByb21wdCB0aGF0IGl0IHJldHVybnNcbiAqIGlmIG5vbmUgb2YgdGhlIGNvbmRpdGlvbnMgYXJlIG1ldC5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IgZXh0ZW5kcyBCYXNlUHJvbXB0U2VsZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKGRlZmF1bHRfcHJvbXB0LCBjb25kaXRpb25hbHMgPSBbXSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZWZhdWx0UHJvbXB0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbmRpdGlvbmFsc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlZmF1bHRQcm9tcHQgPSBkZWZhdWx0X3Byb21wdDtcbiAgICAgICAgdGhpcy5jb25kaXRpb25hbHMgPSBjb25kaXRpb25hbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHNlbGVjdHMgYSBwcm9tcHQgYmFzZWQgb24gYSBzZXQgb2YgY29uZGl0aW9ucy4gSWYgbm9uZSBvZlxuICAgICAqIHRoZSBjb25kaXRpb25zIGFyZSBtZXQsIGl0IHJldHVybnMgdGhlIGRlZmF1bHQgcHJvbXB0LlxuICAgICAqIEBwYXJhbSBsbG0gVGhlIGxhbmd1YWdlIG1vZGVsIGZvciB3aGljaCB0byBnZXQgYSBwcm9tcHQuXG4gICAgICogQHJldHVybnMgQSBwcm9tcHQgdGVtcGxhdGUuXG4gICAgICovXG4gICAgZ2V0UHJvbXB0KGxsbSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtjb25kaXRpb24sIHByb21wdF0gb2YgdGhpcy5jb25kaXRpb25hbHMpIHtcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24obGxtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9tcHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFByb21wdDtcbiAgICB9XG59XG4vKipcbiAqIFR5cGUgZ3VhcmQgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgYSBnaXZlbiBsYW5ndWFnZSBtb2RlbCBpcyBvZiB0eXBlXG4gKiBgQmFzZUxMTWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xMTShsbG0pIHtcbiAgICByZXR1cm4gbGxtLl9tb2RlbFR5cGUoKSA9PT0gXCJiYXNlX2xsbVwiO1xufVxuLyoqXG4gKiBUeXBlIGd1YXJkIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIGEgZ2l2ZW4gbGFuZ3VhZ2UgbW9kZWwgaXMgb2YgdHlwZVxuICogYEJhc2VDaGF0TW9kZWxgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDaGF0TW9kZWwobGxtKSB7XG4gICAgcmV0dXJuIGxsbS5fbW9kZWxUeXBlKCkgPT09IFwiYmFzZV9jaGF0X21vZGVsXCI7XG59XG4iXSwibmFtZXMiOlsiQmFzZVByb21wdFNlbGVjdG9yIiwiZ2V0UHJvbXB0QXN5bmMiLCJsbG0iLCJvcHRpb25zIiwicHJvbXB0IiwiZ2V0UHJvbXB0IiwicGFydGlhbCIsInBhcnRpYWxWYXJpYWJsZXMiLCJDb25kaXRpb25hbFByb21wdFNlbGVjdG9yIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0X3Byb21wdCIsImNvbmRpdGlvbmFscyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJkZWZhdWx0UHJvbXB0IiwiY29uZGl0aW9uIiwiaXNMTE0iLCJfbW9kZWxUeXBlIiwiaXNDaGF0TW9kZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/example_selectors/conditional.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/example_selectors/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseExampleSelector: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseExampleSelector),\n/* harmony export */   BasePromptSelector: () => (/* reexport safe */ _conditional_js__WEBPACK_IMPORTED_MODULE_1__.BasePromptSelector),\n/* harmony export */   ConditionalPromptSelector: () => (/* reexport safe */ _conditional_js__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector),\n/* harmony export */   LengthBasedExampleSelector: () => (/* reexport safe */ _length_based_js__WEBPACK_IMPORTED_MODULE_2__.LengthBasedExampleSelector),\n/* harmony export */   SemanticSimilarityExampleSelector: () => (/* reexport safe */ _semantic_similarity_js__WEBPACK_IMPORTED_MODULE_3__.SemanticSimilarityExampleSelector),\n/* harmony export */   isChatModel: () => (/* reexport safe */ _conditional_js__WEBPACK_IMPORTED_MODULE_1__.isChatModel),\n/* harmony export */   isLLM: () => (/* reexport safe */ _conditional_js__WEBPACK_IMPORTED_MODULE_1__.isLLM)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/example_selectors/base.js\");\n/* harmony import */ var _conditional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conditional.js */ \"(rsc)/./node_modules/@langchain/core/dist/example_selectors/conditional.js\");\n/* harmony import */ var _length_based_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./length_based.js */ \"(rsc)/./node_modules/@langchain/core/dist/example_selectors/length_based.js\");\n/* harmony import */ var _semantic_similarity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./semantic_similarity.js */ \"(rsc)/./node_modules/@langchain/core/dist/example_selectors/semantic_similarity.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZXhhbXBsZV9zZWxlY3RvcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMEI7QUFDTztBQUNDO0FBQ08iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZXhhbXBsZV9zZWxlY3RvcnMvaW5kZXguanM/MGM5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9iYXNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb25kaXRpb25hbC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGVuZ3RoX2Jhc2VkLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZW1hbnRpY19zaW1pbGFyaXR5LmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/example_selectors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/example_selectors/length_based.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/length_based.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LengthBasedExampleSelector: () => (/* binding */ LengthBasedExampleSelector)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/example_selectors/base.js\");\n\n/**\n * Calculates the length of a text based on the number of words and lines.\n */ function getLengthBased(text) {\n    return text.split(/\\n| /).length;\n}\n/**\n * A specialized example selector that selects examples based on their\n * length, ensuring that the total length of the selected examples does\n * not exceed a specified maximum length.\n * @example\n * ```typescript\n * const exampleSelector = new LengthBasedExampleSelector(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   {\n *     examplePrompt: new PromptTemplate({\n *       inputVariables: [\"input\", \"output\"],\n *       template: \"Input: {input}\\nOutput: {output}\",\n *     }),\n *     maxLength: 25,\n *   },\n * );\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt: new PromptTemplate({\n *     inputVariables: [\"input\", \"output\"],\n *     template: \"Input: {input}\\nOutput: {output}\",\n *   }),\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n * console.log(dynamicPrompt.format({ adjective: \"big\" }));\n * console.log(\n *   dynamicPrompt.format({\n *     adjective:\n *       \"big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else\",\n *   }),\n * );\n * ```\n */ class LengthBasedExampleSelector extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseExampleSelector {\n    constructor(data){\n        super(data);\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"getTextLength\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getLengthBased\n        });\n        Object.defineProperty(this, \"maxLength\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 2048\n        });\n        Object.defineProperty(this, \"exampleTextLengths\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.examplePrompt = data.examplePrompt;\n        this.maxLength = data.maxLength ?? 2048;\n        this.getTextLength = data.getTextLength ?? getLengthBased;\n    }\n    /**\n     * Adds an example to the list of examples and calculates its length.\n     * @param example The example to be added.\n     * @returns Promise that resolves when the example has been added and its length calculated.\n     */ async addExample(example) {\n        this.examples.push(example);\n        const stringExample = await this.examplePrompt.format(example);\n        this.exampleTextLengths.push(this.getTextLength(stringExample));\n    }\n    /**\n     * Calculates the lengths of the examples.\n     * @param v Array of lengths of the examples.\n     * @param values Instance of LengthBasedExampleSelector.\n     * @returns Promise that resolves with an array of lengths of the examples.\n     */ async calculateExampleTextLengths(v, values) {\n        if (v.length > 0) {\n            return v;\n        }\n        const { examples, examplePrompt } = values;\n        const stringExamples = await Promise.all(examples.map((eg)=>examplePrompt.format(eg)));\n        return stringExamples.map((eg)=>this.getTextLength(eg));\n    }\n    /**\n     * Selects examples until the total length of the selected examples\n     * reaches the maxLength.\n     * @param inputVariables The input variables for the examples.\n     * @returns Promise that resolves with an array of selected examples.\n     */ async selectExamples(inputVariables) {\n        const inputs = Object.values(inputVariables).join(\" \");\n        let remainingLength = this.maxLength - this.getTextLength(inputs);\n        let i = 0;\n        const examples = [];\n        while(remainingLength > 0 && i < this.examples.length){\n            const newLength = remainingLength - this.exampleTextLengths[i];\n            if (newLength < 0) {\n                break;\n            } else {\n                examples.push(this.examples[i]);\n                remainingLength = newLength;\n            }\n            i += 1;\n        }\n        return examples;\n    }\n    /**\n     * Creates a new instance of LengthBasedExampleSelector and adds a list of\n     * examples to it.\n     * @param examples Array of examples to be added.\n     * @param args Input parameters for the LengthBasedExampleSelector.\n     * @returns Promise that resolves with a new instance of LengthBasedExampleSelector with the examples added.\n     */ static async fromExamples(examples, args) {\n        const selector = new LengthBasedExampleSelector(args);\n        await Promise.all(examples.map((eg)=>selector.addExample(eg)));\n        return selector;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/example_selectors/length_based.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/example_selectors/semantic_similarity.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/semantic_similarity.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SemanticSimilarityExampleSelector: () => (/* binding */ SemanticSimilarityExampleSelector)\n/* harmony export */ });\n/* harmony import */ var _documents_document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../documents/document.js */ \"(rsc)/./node_modules/@langchain/core/dist/documents/document.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/example_selectors/base.js\");\n\n\nfunction sortedValues(values) {\n    return Object.keys(values).sort().map((key)=>values[key]);\n}\n/**\n * Class that selects examples based on semantic similarity. It extends\n * the BaseExampleSelector class.\n * @example\n * ```typescript\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt: PromptTemplate.fromTemplate(\n *     \"Input: {input}\\nOutput: {output}\",\n *   ),\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n * ```\n */ class SemanticSimilarityExampleSelector extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseExampleSelector {\n    constructor(data){\n        super(data);\n        Object.defineProperty(this, \"vectorStoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.exampleKeys = data.exampleKeys;\n        this.inputKeys = data.inputKeys;\n        if (data.vectorStore !== undefined) {\n            this.vectorStoreRetriever = data.vectorStore.asRetriever({\n                k: data.k ?? 4,\n                filter: data.filter\n            });\n        } else if (data.vectorStoreRetriever) {\n            this.vectorStoreRetriever = data.vectorStoreRetriever;\n        } else {\n            throw new Error(`You must specify one of \"vectorStore\" and \"vectorStoreRetriever\".`);\n        }\n    }\n    /**\n     * Method that adds a new example to the vectorStore. The example is\n     * converted to a string and added to the vectorStore as a document.\n     * @param example The example to be added to the vectorStore.\n     * @returns Promise that resolves when the example has been added to the vectorStore.\n     */ async addExample(example) {\n        const inputKeys = this.inputKeys ?? Object.keys(example);\n        const stringExample = sortedValues(inputKeys.reduce((acc, key)=>({\n                ...acc,\n                [key]: example[key]\n            }), {})).join(\" \");\n        await this.vectorStoreRetriever.addDocuments([\n            new _documents_document_js__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: stringExample,\n                metadata: example\n            })\n        ]);\n    }\n    /**\n     * Method that selects which examples to use based on semantic similarity.\n     * It performs a similarity search in the vectorStore using the input\n     * variables and returns the examples with the highest similarity.\n     * @param inputVariables The input variables used for the similarity search.\n     * @returns Promise that resolves with an array of the selected examples.\n     */ async selectExamples(inputVariables) {\n        const inputKeys = this.inputKeys ?? Object.keys(inputVariables);\n        const query = sortedValues(inputKeys.reduce((acc, key)=>({\n                ...acc,\n                [key]: inputVariables[key]\n            }), {})).join(\" \");\n        const exampleDocs = await this.vectorStoreRetriever.invoke(query);\n        const examples = exampleDocs.map((doc)=>doc.metadata);\n        if (this.exampleKeys) {\n            // If example keys are provided, filter examples to those keys.\n            return examples.map((example)=>this.exampleKeys.reduce((acc, key)=>({\n                        ...acc,\n                        [key]: example[key]\n                    }), {}));\n        }\n        return examples;\n    }\n    /**\n     * Static method that creates a new instance of\n     * SemanticSimilarityExampleSelector. It takes a list of examples, an\n     * instance of Embeddings, a VectorStore class, and an options object as\n     * parameters. It converts the examples to strings, creates a VectorStore\n     * from the strings and the embeddings, and returns a new\n     * SemanticSimilarityExampleSelector with the created VectorStore and the\n     * options provided.\n     * @param examples The list of examples to be used.\n     * @param embeddings The instance of Embeddings to be used.\n     * @param vectorStoreCls The VectorStore class to be used.\n     * @param options The options object for the SemanticSimilarityExampleSelector.\n     * @returns Promise that resolves with a new instance of SemanticSimilarityExampleSelector.\n     */ static async fromExamples(examples, embeddings, vectorStoreCls, options = {}) {\n        const inputKeys = options.inputKeys ?? null;\n        const stringExamples = examples.map((example)=>sortedValues(inputKeys ? inputKeys.reduce((acc, key)=>({\n                    ...acc,\n                    [key]: example[key]\n                }), {}) : example).join(\" \"));\n        const vectorStore = await vectorStoreCls.fromTexts(stringExamples, examples, embeddings, options);\n        return new SemanticSimilarityExampleSelector({\n            vectorStore,\n            k: options.k ?? 4,\n            exampleKeys: options.exampleKeys,\n            inputKeys: options.inputKeys\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/example_selectors/semantic_similarity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/base.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/base.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLangChain: () => (/* binding */ BaseLangChain),\n/* harmony export */   BaseLanguageModel: () => (/* binding */ BaseLanguageModel),\n/* harmony export */   calculateMaxTokens: () => (/* binding */ calculateMaxTokens),\n/* harmony export */   getEmbeddingContextSize: () => (/* binding */ getEmbeddingContextSize),\n/* harmony export */   getModelContextSize: () => (/* binding */ getModelContextSize),\n/* harmony export */   getModelNameForTiktoken: () => (/* binding */ getModelNameForTiktoken)\n/* harmony export */ });\n/* harmony import */ var _caches_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../caches.js */ \"(rsc)/./node_modules/@langchain/core/dist/caches.js\");\n/* harmony import */ var _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../prompt_values.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/tiktoken.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n\n\n\n\n\n\n// https://www.npmjs.com/package/js-tiktoken\nconst getModelNameForTiktoken = (modelName)=>{\n    if (modelName.startsWith(\"gpt-3.5-turbo-16k\")) {\n        return \"gpt-3.5-turbo-16k\";\n    }\n    if (modelName.startsWith(\"gpt-3.5-turbo-\")) {\n        return \"gpt-3.5-turbo\";\n    }\n    if (modelName.startsWith(\"gpt-4-32k\")) {\n        return \"gpt-4-32k\";\n    }\n    if (modelName.startsWith(\"gpt-4-\")) {\n        return \"gpt-4\";\n    }\n    return modelName;\n};\nconst getEmbeddingContextSize = (modelName)=>{\n    switch(modelName){\n        case \"text-embedding-ada-002\":\n            return 8191;\n        default:\n            return 2046;\n    }\n};\nconst getModelContextSize = (modelName)=>{\n    switch(getModelNameForTiktoken(modelName)){\n        case \"gpt-3.5-turbo-16k\":\n            return 16384;\n        case \"gpt-3.5-turbo\":\n            return 4096;\n        case \"gpt-4-32k\":\n            return 32768;\n        case \"gpt-4\":\n            return 8192;\n        case \"text-davinci-003\":\n            return 4097;\n        case \"text-curie-001\":\n            return 2048;\n        case \"text-babbage-001\":\n            return 2048;\n        case \"text-ada-001\":\n            return 2048;\n        case \"code-davinci-002\":\n            return 8000;\n        case \"code-cushman-001\":\n            return 2048;\n        default:\n            return 4097;\n    }\n};\nconst calculateMaxTokens = async ({ prompt, modelName })=>{\n    let numTokens;\n    try {\n        numTokens = (await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(getModelNameForTiktoken(modelName))).encode(prompt).length;\n    } catch (error) {\n        console.warn(\"Failed to calculate number of tokens, falling back to approximate count\");\n        // fallback to approximate calculation if tiktoken is not available\n        // each token is ~4 characters: https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them#\n        numTokens = Math.ceil(prompt.length / 4);\n    }\n    const maxTokens = getModelContextSize(modelName);\n    return maxTokens - numTokens;\n};\nconst getVerbosity = ()=>false;\n/**\n * Base class for language models, chains, tools.\n */ class BaseLangChain extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__.Runnable {\n    get lc_attributes() {\n        return {\n            callbacks: undefined,\n            verbose: undefined\n        };\n    }\n    constructor(params){\n        super(params);\n        /**\n         * Whether to print out response text.\n         */ Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.verbose = params.verbose ?? getVerbosity();\n        this.callbacks = params.callbacks;\n        this.tags = params.tags ?? [];\n        this.metadata = params.metadata ?? {};\n    }\n}\n/**\n * Base class for language models.\n */ class BaseLanguageModel extends BaseLangChain {\n    /**\n     * Keys that the language model accepts as call options.\n     */ get callKeys() {\n        return [\n            \"stop\",\n            \"timeout\",\n            \"signal\",\n            \"tags\",\n            \"metadata\",\n            \"callbacks\"\n        ];\n    }\n    constructor({ callbacks, callbackManager, ...params }){\n        super({\n            callbacks: callbacks ?? callbackManager,\n            ...params\n        });\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_encoding\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof params.cache === \"object\") {\n            this.cache = params.cache;\n        } else if (params.cache) {\n            this.cache = _caches_js__WEBPACK_IMPORTED_MODULE_0__.InMemoryCache.global();\n        } else {\n            this.cache = undefined;\n        }\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__.AsyncCaller(params ?? {});\n    }\n    async getNumTokens(content) {\n        // TODO: Figure out correct value.\n        if (typeof content !== \"string\") {\n            return 0;\n        }\n        // fallback to approximate calculation if tiktoken is not available\n        let numTokens = Math.ceil(content.length / 4);\n        if (!this._encoding) {\n            try {\n                this._encoding = await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(\"modelName\" in this ? getModelNameForTiktoken(this.modelName) : \"gpt2\");\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        if (this._encoding) {\n            try {\n                numTokens = this._encoding.encode(content).length;\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        return numTokens;\n    }\n    static _convertInputToPromptValue(input) {\n        if (typeof input === \"string\") {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.StringPromptValue(input);\n        } else if (Array.isArray(input)) {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptValue(input.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_2__.coerceMessageLikeToMessage));\n        } else {\n            return input;\n        }\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * Create a unique cache key for a specific call to a specific language model.\n     * @param callOptions Call options for the model\n     * @returns A unique cache key.\n     */ _getSerializedCacheKeyParametersForCall(callOptions) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = {\n            ...this._identifyingParams(),\n            ...callOptions,\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n        const filteredEntries = Object.entries(params).filter(([_, value])=>value !== undefined);\n        const serializedEntries = filteredEntries.map(([key, value])=>`${key}:${JSON.stringify(value)}`).sort().join(\",\");\n        return serializedEntries;\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * @deprecated\n     * Load an LLM from a json-like object describing it.\n     */ static async deserialize(_data) {\n        throw new Error(\"Use .toJSON() instead\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/chat_models.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* binding */ BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* binding */ SimpleChatModel),\n/* harmony export */   createChatMessageChunkEncoderStream: () => (/* binding */ createChatMessageChunkEncoderStream)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n\n\n\n\n/**\n * Creates a transform stream for encoding chat message chunks.\n * @deprecated Use {@link BytesOutputParser} instead\n * @returns A TransformStream instance that encodes chat message chunks.\n */ function createChatMessageChunkEncoderStream() {\n    const textEncoder = new TextEncoder();\n    return new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(textEncoder.encode(typeof chunk.content === \"string\" ? chunk.content : JSON.stringify(chunk.content)));\n        }\n    });\n}\n/**\n * Base class for chat models. It extends the BaseLanguageModel class and\n * provides methods for generating chat based on input messages.\n */ class BaseChatModel extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseLanguageModel {\n    constructor(fields){\n        super(fields);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"chat_models\",\n                this._llmType()\n            ]\n        });\n    }\n    _separateRunnableConfigFromCallOptions(options) {\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\n        if (callOptions?.timeout && !callOptions.signal) {\n            callOptions.signal = AbortSignal.timeout(callOptions.timeout);\n        }\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    /**\n     * Invokes the chat model with a single input.\n     * @param input The input for the language model.\n     * @param options The call options.\n     * @returns A Promise that resolves to a BaseMessageChunk.\n     */ async invoke(input, options) {\n        const promptValue = BaseChatModel._convertInputToPromptValue(input);\n        const result = await this.generatePrompt([\n            promptValue\n        ], options, options?.callbacks);\n        const chatGeneration = result.generations[0][0];\n        // TODO: Remove cast after figuring out inheritance\n        return chatGeneration.message;\n    }\n    // eslint-disable-next-line require-yield\n    async *_streamResponseChunks(_messages, _options, _runManager) {\n        throw new Error(\"Not implemented.\");\n    }\n    async *_streamIterator(input, options) {\n        // Subclass check required to avoid double callbacks with default implementation\n        if (this._streamResponseChunks === BaseChatModel.prototype._streamResponseChunks) {\n            yield this.invoke(input, options);\n        } else {\n            const prompt = BaseChatModel._convertInputToPromptValue(input);\n            const messages = prompt.toChatMessages();\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptions(options);\n            const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, runnableConfig.metadata, this.metadata, {\n                verbose: this.verbose\n            });\n            const extra = {\n                options: callOptions,\n                invocation_params: this?.invocationParams(callOptions),\n                batch_size: 1\n            };\n            const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), [\n                messages\n            ], undefined, undefined, extra, undefined, undefined, runnableConfig.runName);\n            let generationChunk;\n            try {\n                for await (const chunk of this._streamResponseChunks(messages, callOptions, runManagers?.[0])){\n                    chunk.message.response_metadata = _combineGenerationInfoAndMetadata(chunk);\n                    yield chunk.message;\n                    if (!generationChunk) {\n                        generationChunk = chunk;\n                    } else {\n                        generationChunk = generationChunk.concat(chunk);\n                    }\n                }\n            } catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMError(err)));\n                throw err;\n            }\n            await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMEnd({\n                    // TODO: Remove cast after figuring out inheritance\n                    generations: [\n                        [\n                            generationChunk\n                        ]\n                    ]\n                })));\n        }\n    }\n    /** @ignore */ async _generateUncached(messages, parsedOptions, handledOptions) {\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        // create callback manager and start run\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: 1\n        };\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages, undefined, undefined, extra, undefined, undefined, handledOptions.runName);\n        // generate results\n        const results = await Promise.allSettled(baseMessages.map((messageList, i)=>this._generate(messageList, {\n                ...parsedOptions,\n                promptIndex: i\n            }, runManagers?.[i])));\n        // handle results\n        const generations = [];\n        const llmOutputs = [];\n        await Promise.all(results.map(async (pResult, i)=>{\n            if (pResult.status === \"fulfilled\") {\n                const result = pResult.value;\n                for (const generation of result.generations){\n                    generation.message.response_metadata = _combineGenerationInfoAndMetadata(generation);\n                }\n                generations[i] = result.generations;\n                llmOutputs[i] = result.llmOutput;\n                return runManagers?.[i]?.handleLLMEnd({\n                    generations: [\n                        result.generations\n                    ],\n                    llmOutput: result.llmOutput\n                });\n            } else {\n                // status === \"rejected\"\n                await runManagers?.[i]?.handleLLMError(pResult.reason);\n                return Promise.reject(pResult.reason);\n            }\n        }));\n        // create combined output\n        const output = {\n            generations,\n            llmOutput: llmOutputs.length ? this._combineLLMOutput?.(...llmOutputs) : undefined\n        };\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    async _generateCached({ messages, cache, llmStringKey, parsedOptions, handledOptions }) {\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        // create callback manager and start run\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: 1,\n            cached: true\n        };\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages, undefined, undefined, extra, undefined, undefined, handledOptions.runName);\n        // generate results\n        const missingPromptIndices = [];\n        const results = await Promise.allSettled(baseMessages.map(async (baseMessage, index)=>{\n            // Join all content into one string for the prompt index\n            const prompt = BaseChatModel._convertInputToPromptValue(baseMessage).toString();\n            const result = await cache.lookup(prompt, llmStringKey);\n            if (result == null) {\n                missingPromptIndices.push(index);\n            }\n            return result;\n        }));\n        // Map run managers to the results before filtering out null results\n        // Null results are just absent from the cache.\n        const cachedResults = results.map((result, index)=>({\n                result,\n                runManager: runManagers?.[index]\n            })).filter(({ result })=>result.status === \"fulfilled\" && result.value != null || result.status === \"rejected\");\n        // Handle results and call run managers\n        const generations = [];\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i)=>{\n            if (promiseResult.status === \"fulfilled\") {\n                const result = promiseResult.value;\n                generations[i] = result;\n                if (result.length) {\n                    await runManager?.handleLLMNewToken(result[0].text);\n                }\n                return runManager?.handleLLMEnd({\n                    generations: [\n                        result\n                    ]\n                });\n            } else {\n                // status === \"rejected\"\n                await runManager?.handleLLMError(promiseResult.reason);\n                return Promise.reject(promiseResult.reason);\n            }\n        }));\n        const output = {\n            generations,\n            missingPromptIndices\n        };\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    /**\n     * Generates chat based on the input messages.\n     * @param messages An array of arrays of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */ async generate(messages, options, callbacks) {\n        // parse call options\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = {\n                stop: options\n            };\n        } else {\n            parsedOptions = options;\n        }\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptions(parsedOptions);\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\n        if (!this.cache) {\n            return this._generateUncached(baseMessages, callOptions, runnableConfig);\n        }\n        const { cache } = this;\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\n        const { generations, missingPromptIndices } = await this._generateCached({\n            messages: baseMessages,\n            cache,\n            llmStringKey,\n            parsedOptions: callOptions,\n            handledOptions: runnableConfig\n        });\n        let llmOutput = {};\n        if (missingPromptIndices.length > 0) {\n            const results = await this._generateUncached(missingPromptIndices.map((i)=>baseMessages[i]), callOptions, runnableConfig);\n            await Promise.all(results.generations.map(async (generation, index)=>{\n                const promptIndex = missingPromptIndices[index];\n                generations[promptIndex] = generation;\n                // Join all content into one string for the prompt index\n                const prompt = BaseChatModel._convertInputToPromptValue(baseMessages[promptIndex]).toString();\n                return cache.update(prompt, llmStringKey, generation);\n            }));\n            llmOutput = results.llmOutput ?? {};\n        }\n        return {\n            generations,\n            llmOutput\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options) {\n        return {};\n    }\n    _modelType() {\n        return \"base_chat_model\";\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this.invocationParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * Generates a prompt based on the input prompt values.\n     * @param promptValues An array of BasePromptValue instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */ async generatePrompt(promptValues, options, callbacks) {\n        const promptMessages = promptValues.map((promptValue)=>promptValue.toChatMessages());\n        return this.generate(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async call(messages, options, callbacks) {\n        const result = await this.generate([\n            messages.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage)\n        ], options, callbacks);\n        const generations = result.generations;\n        return generations[0][0].message;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model with a prompt value.\n     * @param promptValue The value of the prompt.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async callPrompt(promptValue, options, callbacks) {\n        const promptMessages = promptValue.toChatMessages();\n        return this.call(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on the input messages.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async predictMessages(messages, options, callbacks) {\n        return this.call(messages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on a text input.\n     * @param text The text input.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a string.\n     */ async predict(text, options, callbacks) {\n        const message = new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(text);\n        const result = await this.call([\n            message\n        ], options, callbacks);\n        if (typeof result.content !== \"string\") {\n            throw new Error(\"Cannot use predict when output is not a string.\");\n        }\n        return result.content;\n    }\n}\n/**\n * An abstract class that extends BaseChatModel and provides a simple\n * implementation of _generate.\n */ class SimpleChatModel extends BaseChatModel {\n    async _generate(messages, options, runManager) {\n        const text = await this._call(messages, options, runManager);\n        const message = new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(text);\n        if (typeof message.content !== \"string\") {\n            throw new Error(\"Cannot generate with a simple chat model when output is not a string.\");\n        }\n        return {\n            generations: [\n                {\n                    text: message.content,\n                    message\n                }\n            ]\n        };\n    }\n}\nfunction _combineGenerationInfoAndMetadata(generation) {\n    return {\n        ...generation.generationInfo,\n        ...generation.message.response_metadata\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/llms.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/llms.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLM: () => (/* binding */ BaseLLM),\n/* harmony export */   LLM: () => (/* binding */ LLM)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n\n\n\n\n/**\n * LLM Wrapper. Takes in a prompt (or prompts) and returns a string.\n */ class BaseLLM extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseLanguageModel {\n    constructor({ concurrency, ...rest }){\n        super(concurrency ? {\n            maxConcurrency: concurrency,\n            ...rest\n        } : rest);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"llms\",\n                this._llmType()\n            ]\n        });\n    }\n    /**\n     * This method takes an input and options, and returns a string. It\n     * converts the input to a prompt value and generates a result based on\n     * the prompt.\n     * @param input Input for the LLM.\n     * @param options Options for the LLM call.\n     * @returns A string result based on the prompt.\n     */ async invoke(input, options) {\n        const promptValue = BaseLLM._convertInputToPromptValue(input);\n        const result = await this.generatePrompt([\n            promptValue\n        ], options, options?.callbacks);\n        return result.generations[0][0].text;\n    }\n    // eslint-disable-next-line require-yield\n    async *_streamResponseChunks(_input, _options, _runManager) {\n        throw new Error(\"Not implemented.\");\n    }\n    _separateRunnableConfigFromCallOptions(options) {\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\n        if (callOptions?.timeout && !callOptions.signal) {\n            callOptions.signal = AbortSignal.timeout(callOptions.timeout);\n        }\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async *_streamIterator(input, options) {\n        // Subclass check required to avoid double callbacks with default implementation\n        if (this._streamResponseChunks === BaseLLM.prototype._streamResponseChunks) {\n            yield this.invoke(input, options);\n        } else {\n            const prompt = BaseLLM._convertInputToPromptValue(input);\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptions(options);\n            const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, runnableConfig.metadata, this.metadata, {\n                verbose: this.verbose\n            });\n            const extra = {\n                options: callOptions,\n                invocation_params: this?.invocationParams(callOptions),\n                batch_size: 1\n            };\n            const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), [\n                prompt.toString()\n            ], undefined, undefined, extra, undefined, undefined, runnableConfig.runName);\n            let generation = new _outputs_js__WEBPACK_IMPORTED_MODULE_1__.GenerationChunk({\n                text: \"\"\n            });\n            try {\n                for await (const chunk of this._streamResponseChunks(input.toString(), callOptions, runManagers?.[0])){\n                    if (!generation) {\n                        generation = chunk;\n                    } else {\n                        generation = generation.concat(chunk);\n                    }\n                    if (typeof chunk.text === \"string\") {\n                        yield chunk.text;\n                    }\n                }\n            } catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMError(err)));\n                throw err;\n            }\n            await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMEnd({\n                    generations: [\n                        [\n                            generation\n                        ]\n                    ]\n                })));\n        }\n    }\n    /**\n     * This method takes prompt values, options, and callbacks, and generates\n     * a result based on the prompts.\n     * @param promptValues Prompt values for the LLM.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns An LLMResult based on the prompts.\n     */ async generatePrompt(promptValues, options, callbacks) {\n        const prompts = promptValues.map((promptValue)=>promptValue.toString());\n        return this.generate(prompts, options, callbacks);\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options) {\n        return {};\n    }\n    _flattenLLMResult(llmResult) {\n        const llmResults = [];\n        for(let i = 0; i < llmResult.generations.length; i += 1){\n            const genList = llmResult.generations[i];\n            if (i === 0) {\n                llmResults.push({\n                    generations: [\n                        genList\n                    ],\n                    llmOutput: llmResult.llmOutput\n                });\n            } else {\n                const llmOutput = llmResult.llmOutput ? {\n                    ...llmResult.llmOutput,\n                    tokenUsage: {}\n                } : undefined;\n                llmResults.push({\n                    generations: [\n                        genList\n                    ],\n                    llmOutput\n                });\n            }\n        }\n        return llmResults;\n    }\n    /** @ignore */ async _generateUncached(prompts, parsedOptions, handledOptions) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: prompts.length\n        };\n        const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), prompts, undefined, undefined, extra, undefined, undefined, handledOptions?.runName);\n        let output;\n        try {\n            output = await this._generate(prompts, parsedOptions, runManagers?.[0]);\n        } catch (err) {\n            await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMError(err)));\n            throw err;\n        }\n        const flattenedOutputs = this._flattenLLMResult(output);\n        await Promise.all((runManagers ?? []).map((runManager, i)=>runManager?.handleLLMEnd(flattenedOutputs[i])));\n        const runIds = runManagers?.map((manager)=>manager.runId) || undefined;\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runIds ? {\n                runIds\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    async _generateCached({ prompts, cache, llmStringKey, parsedOptions, handledOptions }) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: prompts.length,\n            cached: true\n        };\n        const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), prompts, undefined, undefined, extra, undefined, undefined, handledOptions?.runName);\n        // generate results\n        const missingPromptIndices = [];\n        const results = await Promise.allSettled(prompts.map(async (prompt, index)=>{\n            const result = await cache.lookup(prompt, llmStringKey);\n            if (result == null) {\n                missingPromptIndices.push(index);\n            }\n            return result;\n        }));\n        // Map run managers to the results before filtering out null results\n        // Null results are just absent from the cache.\n        const cachedResults = results.map((result, index)=>({\n                result,\n                runManager: runManagers?.[index]\n            })).filter(({ result })=>result.status === \"fulfilled\" && result.value != null || result.status === \"rejected\");\n        // Handle results and call run managers\n        const generations = [];\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i)=>{\n            if (promiseResult.status === \"fulfilled\") {\n                const result = promiseResult.value;\n                generations[i] = result;\n                if (result.length) {\n                    await runManager?.handleLLMNewToken(result[0].text);\n                }\n                return runManager?.handleLLMEnd({\n                    generations: [\n                        result\n                    ]\n                });\n            } else {\n                // status === \"rejected\"\n                await runManager?.handleLLMError(promiseResult.reason);\n                return Promise.reject(promiseResult.reason);\n            }\n        }));\n        const output = {\n            generations,\n            missingPromptIndices\n        };\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    /**\n     * Run the LLM on the given prompts and input, handling caching.\n     */ async generate(prompts, options, callbacks) {\n        if (!Array.isArray(prompts)) {\n            throw new Error(\"Argument 'prompts' is expected to be a string[]\");\n        }\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = {\n                stop: options\n            };\n        } else {\n            parsedOptions = options;\n        }\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptions(parsedOptions);\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\n        if (!this.cache) {\n            return this._generateUncached(prompts, callOptions, runnableConfig);\n        }\n        const { cache } = this;\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\n        const { generations, missingPromptIndices } = await this._generateCached({\n            prompts,\n            cache,\n            llmStringKey,\n            parsedOptions: callOptions,\n            handledOptions: runnableConfig\n        });\n        let llmOutput = {};\n        if (missingPromptIndices.length > 0) {\n            const results = await this._generateUncached(missingPromptIndices.map((i)=>prompts[i]), callOptions, runnableConfig);\n            await Promise.all(results.generations.map(async (generation, index)=>{\n                const promptIndex = missingPromptIndices[index];\n                generations[promptIndex] = generation;\n                return cache.update(prompts[promptIndex], llmStringKey, generation);\n            }));\n            llmOutput = results.llmOutput ?? {};\n        }\n        return {\n            generations,\n            llmOutput\n        };\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     * Convenience wrapper for {@link generate} that takes in a single string prompt and returns a single string output.\n     */ async call(prompt, options, callbacks) {\n        const { generations } = await this.generate([\n            prompt\n        ], options, callbacks);\n        return generations[0][0].text;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * This method is similar to `call`, but it's used for making predictions\n     * based on the input text.\n     * @param text Input text for the prediction.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns A prediction based on the input text.\n     */ async predict(text, options, callbacks) {\n        return this.call(text, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * This method takes a list of messages, options, and callbacks, and\n     * returns a predicted message.\n     * @param messages A list of messages for the prediction.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns A predicted message based on the list of messages.\n     */ async predictMessages(messages, options, callbacks) {\n        const text = (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(messages);\n        const prediction = await this.call(text, options, callbacks);\n        return new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(prediction);\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    _modelType() {\n        return \"base_llm\";\n    }\n}\n/**\n * LLM class that provides a simpler interface to subclass than {@link BaseLLM}.\n *\n * Requires only implementing a simpler {@link _call} method instead of {@link _generate}.\n *\n * @augments BaseLLM\n */ class LLM extends BaseLLM {\n    async _generate(prompts, options, runManager) {\n        const generations = await Promise.all(prompts.map((prompt, promptIndex)=>this._call(prompt, {\n                ...options,\n                promptIndex\n            }, runManager).then((text)=>[\n                    {\n                        text\n                    }\n                ])));\n        return {\n            generations\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/map_keys.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyFromJson: () => (/* binding */ keyFromJson),\n/* harmony export */   keyToJson: () => (/* binding */ keyToJson),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys)\n/* harmony export */ });\n/* harmony import */ var decamelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decamelize */ \"(rsc)/./node_modules/decamelize/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/@langchain/core/node_modules/camelcase/index.js\");\n\n\nfunction keyToJson(key, map) {\n    return map?.[key] || decamelize__WEBPACK_IMPORTED_MODULE_0__(key);\n}\nfunction keyFromJson(key, map) {\n    return map?.[key] || camelcase__WEBPACK_IMPORTED_MODULE_1__(key);\n}\nfunction mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for(const key in fields){\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbG9hZC9tYXBfa2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtQztBQUNEO0FBQzNCLFNBQVNFLFVBQVVDLEdBQUcsRUFBRUMsR0FBRztJQUM5QixPQUFPQSxLQUFLLENBQUNELElBQUksSUFBSUgsdUNBQVNBLENBQUNHO0FBQ25DO0FBQ08sU0FBU0UsWUFBWUYsR0FBRyxFQUFFQyxHQUFHO0lBQ2hDLE9BQU9BLEtBQUssQ0FBQ0QsSUFBSSxJQUFJRixzQ0FBU0EsQ0FBQ0U7QUFDbkM7QUFDTyxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUosR0FBRztJQUN2QyxNQUFNSyxTQUFTLENBQUM7SUFDaEIsSUFBSyxNQUFNTixPQUFPSSxPQUFRO1FBQ3RCLElBQUlHLE9BQU9DLE1BQU0sQ0FBQ0osUUFBUUosTUFBTTtZQUM1Qk0sTUFBTSxDQUFDRCxPQUFPTCxLQUFLQyxLQUFLLEdBQUdHLE1BQU0sQ0FBQ0osSUFBSTtRQUMxQztJQUNKO0lBQ0EsT0FBT007QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9sb2FkL21hcF9rZXlzLmpzPzBmNDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNuYWtlQ2FzZSBmcm9tIFwiZGVjYW1lbGl6ZVwiO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tIFwiY2FtZWxjYXNlXCI7XG5leHBvcnQgZnVuY3Rpb24ga2V5VG9Kc29uKGtleSwgbWFwKSB7XG4gICAgcmV0dXJuIG1hcD8uW2tleV0gfHwgc25ha2VDYXNlKGtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5RnJvbUpzb24oa2V5LCBtYXApIHtcbiAgICByZXR1cm4gbWFwPy5ba2V5XSB8fCBjYW1lbENhc2Uoa2V5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXBLZXlzKGZpZWxkcywgbWFwcGVyLCBtYXApIHtcbiAgICBjb25zdCBtYXBwZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oZmllbGRzLCBrZXkpKSB7XG4gICAgICAgICAgICBtYXBwZWRbbWFwcGVyKGtleSwgbWFwKV0gPSBmaWVsZHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkO1xufVxuIl0sIm5hbWVzIjpbInNuYWtlQ2FzZSIsImNhbWVsQ2FzZSIsImtleVRvSnNvbiIsImtleSIsIm1hcCIsImtleUZyb21Kc29uIiwibWFwS2V5cyIsImZpZWxkcyIsIm1hcHBlciIsIm1hcHBlZCIsIk9iamVjdCIsImhhc093biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/serializable.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/serializable.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializable: () => (/* binding */ Serializable),\n/* harmony export */   get_lc_unique_name: () => (/* binding */ get_lc_unique_name)\n/* harmony export */ });\n/* harmony import */ var _map_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map_keys.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js\");\n\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [\n        ...obj\n    ] : {\n        ...obj\n    };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)){\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()){\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [\n                    secretId\n                ]\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */ function get_lc_unique_name(// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" && (typeof parentClass.lc_name !== \"function\" || serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    } else {\n        return serializableClass.name;\n    }\n}\nclass Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor)\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */ get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */ get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */ get lc_aliases() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args){\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lc_kwargs = kwargs || {};\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (// eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== \"object\" || Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key)=>{\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for(// eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)){\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath)=>{\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()){\n                if (!(key in read) || read[key] === undefined) return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    } else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: (0,_map_keys_js__WEBPACK_IMPORTED_MODULE_0__.mapKeys)(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, _map_keys_js__WEBPACK_IMPORTED_MODULE_0__.keyToJson, aliases)\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* binding */ AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* binding */ AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* binding */ BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* binding */ BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* binding */ ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* binding */ ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* binding */ FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* binding */ FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* binding */ HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* binding */ HumanMessageChunk),\n/* harmony export */   SystemMessage: () => (/* binding */ SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* binding */ SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* binding */ ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* binding */ ToolMessageChunk),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* binding */ coerceMessageLikeToMessage),\n/* harmony export */   getBufferString: () => (/* binding */ getBufferString),\n/* harmony export */   isBaseMessage: () => (/* binding */ isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* binding */ isBaseMessageChunk),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* binding */ mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* binding */ mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* binding */ mapStoredMessagesToChatMessages)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n\nfunction mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        } else {\n            return [\n                {\n                    type: \"text\",\n                    text: firstContent\n                },\n                ...secondContent\n            ];\n        }\n    // If both are arrays\n    } else if (Array.isArray(secondContent)) {\n        return [\n            ...firstContent,\n            ...secondContent\n        ];\n    // If the first content is a list and second is a string\n    } else {\n        // Otherwise, add the second content as a new element of the list\n        return [\n            ...firstContent,\n            {\n                type: \"text\",\n                text: secondContent\n            }\n        ];\n    }\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */ class BaseMessage extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\"\n        };\n    }\n    /**\n     * @deprecated\n     * Use {@link BaseMessage.content} instead.\n     */ get text() {\n        return typeof this.content === \"string\" ? this.content : \"\";\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {}\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"messages\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */ Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */ Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */ Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts. */ Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON().kwargs\n        };\n    }\n    toChunk() {\n        const type = this._getType();\n        if (type === \"human\") {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new HumanMessageChunk({\n                ...this\n            });\n        } else if (type === \"ai\") {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new AIMessageChunk({\n                ...this\n            });\n        } else if (type === \"system\") {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new SystemMessageChunk({\n                ...this\n            });\n        } else if (type === \"function\") {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new FunctionMessageChunk({\n                ...this\n            });\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        } else if (ChatMessage.isInstance(this)) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new ChatMessageChunk({\n                ...this\n            });\n        } else {\n            throw new Error(\"Unknown message type.\");\n        }\n    }\n}\nfunction isOpenAIToolCallArray(value) {\n    return Array.isArray(value) && value.every((v)=>typeof v.index === \"number\");\n}\nfunction _mergeDicts(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nright) {\n    const merged = {\n        ...left\n    };\n    for (const [key, value] of Object.entries(right)){\n        if (merged[key] == null) {\n            merged[key] = value;\n        } else if (value == null) {\n            continue;\n        } else if (typeof merged[key] !== typeof value || Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        } else if (typeof merged[key] === \"string\") {\n            merged[key] = merged[key] + value;\n        } else if (!Array.isArray(merged[key]) && typeof merged[key] === \"object\") {\n            merged[key] = _mergeDicts(merged[key], value);\n        } else if (key === \"tool_calls\" && isOpenAIToolCallArray(merged[key]) && isOpenAIToolCallArray(value)) {\n            for (const toolCall of value){\n                if (merged[key]?.[toolCall.index] !== undefined) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    merged[key] = merged[key]?.map((value, i)=>{\n                        if (i !== toolCall.index) {\n                            return value;\n                        }\n                        return {\n                            ...value,\n                            ...toolCall,\n                            function: {\n                                name: toolCall.function.name ?? value.function.name,\n                                arguments: (value.function.arguments ?? \"\") + (toolCall.function.arguments ?? \"\")\n                            }\n                        };\n                    });\n                } else {\n                    merged[key][toolCall.index] = toolCall;\n                }\n            }\n        } else if (Array.isArray(merged[key])) {\n            merged[key] = merged[key].concat(value);\n        } else if (merged[key] === value) {\n            continue;\n        } else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */ class BaseMessageChunk extends BaseMessage {\n}\n/**\n * Represents a human message in a conversation.\n */ class HumanMessage extends BaseMessage {\n    static lc_name() {\n        return \"HumanMessage\";\n    }\n    _getType() {\n        return \"human\";\n    }\n}\n/**\n * Represents a chunk of a human message, which can be concatenated with\n * other human message chunks.\n */ class HumanMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"HumanMessageChunk\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    concat(chunk) {\n        return new HumanMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata)\n        });\n    }\n}\n/**\n * Represents an AI message in a conversation.\n */ class AIMessage extends BaseMessage {\n    static lc_name() {\n        return \"AIMessage\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n}\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */ class AIMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"AIMessageChunk\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    concat(chunk) {\n        return new AIMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata)\n        });\n    }\n}\n/**\n * Represents a system message in a conversation.\n */ class SystemMessage extends BaseMessage {\n    static lc_name() {\n        return \"SystemMessage\";\n    }\n    _getType() {\n        return \"system\";\n    }\n}\n/**\n * Represents a chunk of a system message, which can be concatenated with\n * other system message chunks.\n */ class SystemMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"SystemMessageChunk\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    concat(chunk) {\n        return new SystemMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata)\n        });\n    }\n}\n/**\n * Represents a function message in a conversation.\n */ class FunctionMessage extends BaseMessage {\n    static lc_name() {\n        return \"FunctionMessage\";\n    }\n    constructor(fields, /** @deprecated */ name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name: name\n            };\n        }\n        super(fields);\n    }\n    _getType() {\n        return \"function\";\n    }\n}\n/**\n * Represents a chunk of a function message, which can be concatenated\n * with other function message chunks.\n */ class FunctionMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"FunctionMessageChunk\";\n    }\n    _getType() {\n        return \"function\";\n    }\n    concat(chunk) {\n        return new FunctionMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            name: this.name ?? \"\"\n        });\n    }\n}\n/**\n * Represents a tool message in a conversation.\n */ class ToolMessage extends BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            tool_call_id: \"tool_call_id\"\n        };\n    }\n    constructor(fields, tool_call_id, name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name,\n                tool_call_id: tool_call_id\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */ class ToolMessageChunk extends BaseMessageChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            tool_call_id: this.tool_call_id\n        });\n    }\n}\n/**\n * Represents a chat message in a conversation.\n */ class ChatMessage extends BaseMessage {\n    static lc_name() {\n        return \"ChatMessage\";\n    }\n    static _chatMessageClass() {\n        return ChatMessage;\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"generic\";\n    }\n}\nfunction isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nfunction isBaseMessageChunk(messageLike) {\n    return isBaseMessage(messageLike) && typeof messageLike.concat === \"function\";\n}\nfunction coerceMessageLikeToMessage(messageLike) {\n    if (typeof messageLike === \"string\") {\n        return new HumanMessage(messageLike);\n    } else if (isBaseMessage(messageLike)) {\n        return messageLike;\n    }\n    const [type, content] = messageLike;\n    if (type === \"human\" || type === \"user\") {\n        return new HumanMessage({\n            content\n        });\n    } else if (type === \"ai\" || type === \"assistant\") {\n        return new AIMessage({\n            content\n        });\n    } else if (type === \"system\") {\n        return new SystemMessage({\n            content\n        });\n    } else {\n        throw new Error(`Unable to coerce message from array: only human, AI, or system message coercion is currently supported.`);\n    }\n}\n/**\n * Represents a chunk of a chat message, which can be concatenated with\n * other chat message chunks.\n */ class ChatMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"ChatMessageChunk\";\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    concat(chunk) {\n        return new ChatMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: _mergeDicts(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: _mergeDicts(this.response_metadata, chunk.response_metadata),\n            role: this.role\n        });\n    }\n}\n/**\n * This function is used by memory classes to get a string representation\n * of the chat message history, based on the message content and role.\n */ function getBufferString(messages, humanPrefix = \"Human\", aiPrefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages){\n        let role;\n        if (m._getType() === \"human\") {\n            role = humanPrefix;\n        } else if (m._getType() === \"ai\") {\n            role = aiPrefix;\n        } else if (m._getType() === \"system\") {\n            role = \"System\";\n        } else if (m._getType() === \"function\") {\n            role = \"Function\";\n        } else if (m._getType() === \"tool\") {\n            role = \"Tool\";\n        } else if (m._getType() === \"generic\") {\n            role = m.role;\n        } else {\n            throw new Error(`Got unsupported message type: ${m._getType()}`);\n        }\n        const nameStr = m.name ? `${m.name}, ` : \"\";\n        string_messages.push(`${role}: ${nameStr}${m.content}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n/**\n * Maps messages from an older format (V1) to the current `StoredMessage`\n * format. If the message is already in the `StoredMessage` format, it is\n * returned as is. Otherwise, it transforms the V1 message into a\n * `StoredMessage`. This function is important for maintaining\n * compatibility with older message formats.\n */ function mapV1MessageToStoredMessage(message) {\n    // TODO: Remove this mapper when we deprecate the old message format.\n    if (message.data !== undefined) {\n        return message;\n    } else {\n        const v1Message = message;\n        return {\n            type: v1Message.type,\n            data: {\n                content: v1Message.text,\n                role: v1Message.role,\n                name: undefined,\n                tool_call_id: undefined\n            }\n        };\n    }\n}\nfunction mapStoredMessageToChatMessage(message) {\n    const storedMessage = mapV1MessageToStoredMessage(message);\n    switch(storedMessage.type){\n        case \"human\":\n            return new HumanMessage(storedMessage.data);\n        case \"ai\":\n            return new AIMessage(storedMessage.data);\n        case \"system\":\n            return new SystemMessage(storedMessage.data);\n        case \"function\":\n            if (storedMessage.data.name === undefined) {\n                throw new Error(\"Name must be defined for function messages\");\n            }\n            return new FunctionMessage(storedMessage.data);\n        case \"tool\":\n            if (storedMessage.data.tool_call_id === undefined) {\n                throw new Error(\"Tool call ID must be defined for tool messages\");\n            }\n            return new ToolMessage(storedMessage.data);\n        case \"chat\":\n            {\n                if (storedMessage.data.role === undefined) {\n                    throw new Error(\"Role must be defined for chat messages\");\n                }\n                return new ChatMessage(storedMessage.data);\n            }\n        default:\n            throw new Error(`Got unexpected type: ${storedMessage.type}`);\n    }\n}\n/**\n * Transforms an array of `StoredMessage` instances into an array of\n * `BaseMessage` instances. It uses the `mapV1MessageToStoredMessage`\n * function to ensure all messages are in the `StoredMessage` format, then\n * creates new instances of the appropriate `BaseMessage` subclass based\n * on the type of each message. This function is used to prepare stored\n * messages for use in a chat context.\n */ function mapStoredMessagesToChatMessages(messages) {\n    return messages.map(mapStoredMessageToChatMessage);\n}\n/**\n * Transforms an array of `BaseMessage` instances into an array of\n * `StoredMessage` instances. It does this by calling the `toDict` method\n * on each `BaseMessage`, which returns a `StoredMessage`. This function\n * is used to prepare chat messages for storage.\n */ function mapChatMessagesToStoredMessages(messages) {\n    return messages.map((message)=>message.toDict());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/base.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLMOutputParser: () => (/* binding */ BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* binding */ BaseOutputParser),\n/* harmony export */   OutputParserException: () => (/* binding */ OutputParserException)\n/* harmony export */ });\n/* harmony import */ var _runnables_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\");\n\n/**\n * Abstract base class for parsing the output of a Large Language Model\n * (LLM) call. It provides methods for parsing the result of an LLM call\n * and invoking the parser with a given input.\n */ class BaseLLMOutputParser extends _runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    /**\n     * Parses the result of an LLM call with a given prompt. By default, it\n     * simply calls `parseResult`.\n     * @param generations The generations from an LLM call.\n     * @param _prompt The prompt used in the LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */ parseResultWithPrompt(generations, _prompt, callbacks) {\n        return this.parseResult(generations, callbacks);\n    }\n    _baseMessageToString(message) {\n        return typeof message.content === \"string\" ? message.content : this._baseMessageContentToString(message.content);\n    }\n    _baseMessageContentToString(content) {\n        return JSON.stringify(content);\n    }\n    /**\n     * Calls the parser with a given input and optional configuration options.\n     * If the input is a string, it creates a generation with the input as\n     * text and calls `parseResult`. If the input is a `BaseMessage`, it\n     * creates a generation with the input as a message and the content of the\n     * input as text, and then calls `parseResult`.\n     * @param input The input to the parser, which can be a string or a `BaseMessage`.\n     * @param options Optional configuration options.\n     * @returns A promise of the parsed output.\n     */ async invoke(input, options) {\n        if (typeof input === \"string\") {\n            return this._callWithConfig(async (input)=>this.parseResult([\n                    {\n                        text: input\n                    }\n                ]), input, {\n                ...options,\n                runType: \"parser\"\n            });\n        } else {\n            return this._callWithConfig(async (input)=>this.parseResult([\n                    {\n                        message: input,\n                        text: this._baseMessageToString(input)\n                    }\n                ]), input, {\n                ...options,\n                runType: \"parser\"\n            });\n        }\n    }\n}\n/**\n * Class to parse the output of an LLM call.\n */ class BaseOutputParser extends BaseLLMOutputParser {\n    parseResult(generations, callbacks) {\n        return this.parse(generations[0].text, callbacks);\n    }\n    async parseWithPrompt(text, _prompt, callbacks) {\n        return this.parse(text, callbacks);\n    }\n    /**\n     * Return the string type key uniquely identifying this class of parser\n     */ _type() {\n        throw new Error(\"_type not implemented\");\n    }\n}\n/**\n * Exception that output parsers should raise to signify a parsing error.\n *\n * This exists to differentiate parsing errors from other code or execution errors\n * that also may arise inside the output parser. OutputParserExceptions will be\n * available to catch and handle in ways to fix the parsing error, while other\n * errors will be raised.\n *\n * @param message - The error that's being re-raised or an error message.\n * @param llmOutput - String model output which is error-ing.\n * @param observation - String explanation of error which can be passed to a\n *     model to try and remediate the issue.\n * @param sendToLLM - Whether to send the observation and llm_output back to an Agent\n *     after an OutputParserException has been raised. This gives the underlying\n *     model driving the agent the context that the previous output was improperly\n *     structured, in the hopes that it will update the output to the correct\n *     format.\n */ class OutputParserException extends Error {\n    constructor(message, llmOutput, observation, sendToLLM = false){\n        super(message);\n        Object.defineProperty(this, \"llmOutput\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"sendToLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmOutput = llmOutput;\n        this.observation = observation;\n        this.sendToLLM = sendToLLM;\n        if (sendToLLM) {\n            if (observation === undefined || llmOutput === undefined) {\n                throw new Error(\"Arguments 'observation' & 'llmOutput' are required if 'sendToLlm' is true\");\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlEO0FBQ2pEOzs7O0NBSUMsR0FDTSxNQUFNQyw0QkFBNEJELHlEQUFRQTtJQUM3Qzs7Ozs7OztLQU9DLEdBQ0RFLHNCQUFzQkMsV0FBVyxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBRTtRQUNuRCxPQUFPLElBQUksQ0FBQ0MsV0FBVyxDQUFDSCxhQUFhRTtJQUN6QztJQUNBRSxxQkFBcUJDLE9BQU8sRUFBRTtRQUMxQixPQUFPLE9BQU9BLFFBQVFDLE9BQU8sS0FBSyxXQUM1QkQsUUFBUUMsT0FBTyxHQUNmLElBQUksQ0FBQ0MsMkJBQTJCLENBQUNGLFFBQVFDLE9BQU87SUFDMUQ7SUFDQUMsNEJBQTRCRCxPQUFPLEVBQUU7UUFDakMsT0FBT0UsS0FBS0MsU0FBUyxDQUFDSDtJQUMxQjtJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNELE1BQU1JLE9BQU9DLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ3pCLElBQUksT0FBT0QsVUFBVSxVQUFVO1lBQzNCLE9BQU8sSUFBSSxDQUFDRSxlQUFlLENBQUMsT0FBT0YsUUFBVSxJQUFJLENBQUNSLFdBQVcsQ0FBQztvQkFBQzt3QkFBRVcsTUFBTUg7b0JBQU07aUJBQUUsR0FBR0EsT0FBTztnQkFBRSxHQUFHQyxPQUFPO2dCQUFFRyxTQUFTO1lBQVM7UUFDN0gsT0FDSztZQUNELE9BQU8sSUFBSSxDQUFDRixlQUFlLENBQUMsT0FBT0YsUUFBVSxJQUFJLENBQUNSLFdBQVcsQ0FBQztvQkFDMUQ7d0JBQ0lFLFNBQVNNO3dCQUNURyxNQUFNLElBQUksQ0FBQ1Ysb0JBQW9CLENBQUNPO29CQUNwQztpQkFDSCxHQUFHQSxPQUFPO2dCQUFFLEdBQUdDLE9BQU87Z0JBQUVHLFNBQVM7WUFBUztRQUMvQztJQUNKO0FBQ0o7QUFDQTs7Q0FFQyxHQUNNLE1BQU1DLHlCQUF5QmxCO0lBQ2xDSyxZQUFZSCxXQUFXLEVBQUVFLFNBQVMsRUFBRTtRQUNoQyxPQUFPLElBQUksQ0FBQ2UsS0FBSyxDQUFDakIsV0FBVyxDQUFDLEVBQUUsQ0FBQ2MsSUFBSSxFQUFFWjtJQUMzQztJQUNBLE1BQU1nQixnQkFBZ0JKLElBQUksRUFBRWIsT0FBTyxFQUFFQyxTQUFTLEVBQUU7UUFDNUMsT0FBTyxJQUFJLENBQUNlLEtBQUssQ0FBQ0gsTUFBTVo7SUFDNUI7SUFDQTs7S0FFQyxHQUNEaUIsUUFBUTtRQUNKLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtBQUNKO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBaUJDLEdBQ00sTUFBTUMsOEJBQThCRDtJQUN2Q0UsWUFBWWpCLE9BQU8sRUFBRWtCLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEtBQUssQ0FBRTtRQUM1RCxLQUFLLENBQUNwQjtRQUNOcUIsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNSLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDQyxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ0MsU0FBUyxHQUFHQTtRQUNqQixJQUFJQSxXQUFXO1lBQ1gsSUFBSUQsZ0JBQWdCUSxhQUFhVCxjQUFjUyxXQUFXO2dCQUN0RCxNQUFNLElBQUlaLE1BQU07WUFDcEI7UUFDSjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvYmFzZS5qcz81YmNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJ1bm5hYmxlIH0gZnJvbSBcIi4uL3J1bm5hYmxlcy9pbmRleC5qc1wiO1xuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBwYXJzaW5nIHRoZSBvdXRwdXQgb2YgYSBMYXJnZSBMYW5ndWFnZSBNb2RlbFxuICogKExMTSkgY2FsbC4gSXQgcHJvdmlkZXMgbWV0aG9kcyBmb3IgcGFyc2luZyB0aGUgcmVzdWx0IG9mIGFuIExMTSBjYWxsXG4gKiBhbmQgaW52b2tpbmcgdGhlIHBhcnNlciB3aXRoIGEgZ2l2ZW4gaW5wdXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlTExNT3V0cHV0UGFyc2VyIGV4dGVuZHMgUnVubmFibGUge1xuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgcmVzdWx0IG9mIGFuIExMTSBjYWxsIHdpdGggYSBnaXZlbiBwcm9tcHQuIEJ5IGRlZmF1bHQsIGl0XG4gICAgICogc2ltcGx5IGNhbGxzIGBwYXJzZVJlc3VsdGAuXG4gICAgICogQHBhcmFtIGdlbmVyYXRpb25zIFRoZSBnZW5lcmF0aW9ucyBmcm9tIGFuIExMTSBjYWxsLlxuICAgICAqIEBwYXJhbSBfcHJvbXB0IFRoZSBwcm9tcHQgdXNlZCBpbiB0aGUgTExNIGNhbGwuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrcyBPcHRpb25hbCBjYWxsYmFja3MuXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIG9mIHRoZSBwYXJzZWQgb3V0cHV0LlxuICAgICAqL1xuICAgIHBhcnNlUmVzdWx0V2l0aFByb21wdChnZW5lcmF0aW9ucywgX3Byb21wdCwgY2FsbGJhY2tzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlUmVzdWx0KGdlbmVyYXRpb25zLCBjYWxsYmFja3MpO1xuICAgIH1cbiAgICBfYmFzZU1lc3NhZ2VUb1N0cmluZyhtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgbWVzc2FnZS5jb250ZW50ID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICA/IG1lc3NhZ2UuY29udGVudFxuICAgICAgICAgICAgOiB0aGlzLl9iYXNlTWVzc2FnZUNvbnRlbnRUb1N0cmluZyhtZXNzYWdlLmNvbnRlbnQpO1xuICAgIH1cbiAgICBfYmFzZU1lc3NhZ2VDb250ZW50VG9TdHJpbmcoY29udGVudCkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoY29udGVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxzIHRoZSBwYXJzZXIgd2l0aCBhIGdpdmVuIGlucHV0IGFuZCBvcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAgICogSWYgdGhlIGlucHV0IGlzIGEgc3RyaW5nLCBpdCBjcmVhdGVzIGEgZ2VuZXJhdGlvbiB3aXRoIHRoZSBpbnB1dCBhc1xuICAgICAqIHRleHQgYW5kIGNhbGxzIGBwYXJzZVJlc3VsdGAuIElmIHRoZSBpbnB1dCBpcyBhIGBCYXNlTWVzc2FnZWAsIGl0XG4gICAgICogY3JlYXRlcyBhIGdlbmVyYXRpb24gd2l0aCB0aGUgaW5wdXQgYXMgYSBtZXNzYWdlIGFuZCB0aGUgY29udGVudCBvZiB0aGVcbiAgICAgKiBpbnB1dCBhcyB0ZXh0LCBhbmQgdGhlbiBjYWxscyBgcGFyc2VSZXN1bHRgLlxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgaW5wdXQgdG8gdGhlIHBhcnNlciwgd2hpY2ggY2FuIGJlIGEgc3RyaW5nIG9yIGEgYEJhc2VNZXNzYWdlYC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIG9mIHRoZSBwYXJzZWQgb3V0cHV0LlxuICAgICAqL1xuICAgIGFzeW5jIGludm9rZShpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FsbFdpdGhDb25maWcoYXN5bmMgKGlucHV0KSA9PiB0aGlzLnBhcnNlUmVzdWx0KFt7IHRleHQ6IGlucHV0IH1dKSwgaW5wdXQsIHsgLi4ub3B0aW9ucywgcnVuVHlwZTogXCJwYXJzZXJcIiB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWxsV2l0aENvbmZpZyhhc3luYyAoaW5wdXQpID0+IHRoaXMucGFyc2VSZXN1bHQoW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuX2Jhc2VNZXNzYWdlVG9TdHJpbmcoaW5wdXQpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdKSwgaW5wdXQsIHsgLi4ub3B0aW9ucywgcnVuVHlwZTogXCJwYXJzZXJcIiB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQ2xhc3MgdG8gcGFyc2UgdGhlIG91dHB1dCBvZiBhbiBMTE0gY2FsbC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VPdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlTExNT3V0cHV0UGFyc2VyIHtcbiAgICBwYXJzZVJlc3VsdChnZW5lcmF0aW9ucywgY2FsbGJhY2tzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlKGdlbmVyYXRpb25zWzBdLnRleHQsIGNhbGxiYWNrcyk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlV2l0aFByb21wdCh0ZXh0LCBfcHJvbXB0LCBjYWxsYmFja3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UodGV4dCwgY2FsbGJhY2tzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBzdHJpbmcgdHlwZSBrZXkgdW5pcXVlbHkgaWRlbnRpZnlpbmcgdGhpcyBjbGFzcyBvZiBwYXJzZXJcbiAgICAgKi9cbiAgICBfdHlwZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiX3R5cGUgbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cbn1cbi8qKlxuICogRXhjZXB0aW9uIHRoYXQgb3V0cHV0IHBhcnNlcnMgc2hvdWxkIHJhaXNlIHRvIHNpZ25pZnkgYSBwYXJzaW5nIGVycm9yLlxuICpcbiAqIFRoaXMgZXhpc3RzIHRvIGRpZmZlcmVudGlhdGUgcGFyc2luZyBlcnJvcnMgZnJvbSBvdGhlciBjb2RlIG9yIGV4ZWN1dGlvbiBlcnJvcnNcbiAqIHRoYXQgYWxzbyBtYXkgYXJpc2UgaW5zaWRlIHRoZSBvdXRwdXQgcGFyc2VyLiBPdXRwdXRQYXJzZXJFeGNlcHRpb25zIHdpbGwgYmVcbiAqIGF2YWlsYWJsZSB0byBjYXRjaCBhbmQgaGFuZGxlIGluIHdheXMgdG8gZml4IHRoZSBwYXJzaW5nIGVycm9yLCB3aGlsZSBvdGhlclxuICogZXJyb3JzIHdpbGwgYmUgcmFpc2VkLlxuICpcbiAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIGVycm9yIHRoYXQncyBiZWluZyByZS1yYWlzZWQgb3IgYW4gZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSBsbG1PdXRwdXQgLSBTdHJpbmcgbW9kZWwgb3V0cHV0IHdoaWNoIGlzIGVycm9yLWluZy5cbiAqIEBwYXJhbSBvYnNlcnZhdGlvbiAtIFN0cmluZyBleHBsYW5hdGlvbiBvZiBlcnJvciB3aGljaCBjYW4gYmUgcGFzc2VkIHRvIGFcbiAqICAgICBtb2RlbCB0byB0cnkgYW5kIHJlbWVkaWF0ZSB0aGUgaXNzdWUuXG4gKiBAcGFyYW0gc2VuZFRvTExNIC0gV2hldGhlciB0byBzZW5kIHRoZSBvYnNlcnZhdGlvbiBhbmQgbGxtX291dHB1dCBiYWNrIHRvIGFuIEFnZW50XG4gKiAgICAgYWZ0ZXIgYW4gT3V0cHV0UGFyc2VyRXhjZXB0aW9uIGhhcyBiZWVuIHJhaXNlZC4gVGhpcyBnaXZlcyB0aGUgdW5kZXJseWluZ1xuICogICAgIG1vZGVsIGRyaXZpbmcgdGhlIGFnZW50IHRoZSBjb250ZXh0IHRoYXQgdGhlIHByZXZpb3VzIG91dHB1dCB3YXMgaW1wcm9wZXJseVxuICogICAgIHN0cnVjdHVyZWQsIGluIHRoZSBob3BlcyB0aGF0IGl0IHdpbGwgdXBkYXRlIHRoZSBvdXRwdXQgdG8gdGhlIGNvcnJlY3RcbiAqICAgICBmb3JtYXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBPdXRwdXRQYXJzZXJFeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgbGxtT3V0cHV0LCBvYnNlcnZhdGlvbiwgc2VuZFRvTExNID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxsbU91dHB1dFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJvYnNlcnZhdGlvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZW5kVG9MTE1cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sbG1PdXRwdXQgPSBsbG1PdXRwdXQ7XG4gICAgICAgIHRoaXMub2JzZXJ2YXRpb24gPSBvYnNlcnZhdGlvbjtcbiAgICAgICAgdGhpcy5zZW5kVG9MTE0gPSBzZW5kVG9MTE07XG4gICAgICAgIGlmIChzZW5kVG9MTE0pIHtcbiAgICAgICAgICAgIGlmIChvYnNlcnZhdGlvbiA9PT0gdW5kZWZpbmVkIHx8IGxsbU91dHB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnRzICdvYnNlcnZhdGlvbicgJiAnbGxtT3V0cHV0JyBhcmUgcmVxdWlyZWQgaWYgJ3NlbmRUb0xsbScgaXMgdHJ1ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJSdW5uYWJsZSIsIkJhc2VMTE1PdXRwdXRQYXJzZXIiLCJwYXJzZVJlc3VsdFdpdGhQcm9tcHQiLCJnZW5lcmF0aW9ucyIsIl9wcm9tcHQiLCJjYWxsYmFja3MiLCJwYXJzZVJlc3VsdCIsIl9iYXNlTWVzc2FnZVRvU3RyaW5nIiwibWVzc2FnZSIsImNvbnRlbnQiLCJfYmFzZU1lc3NhZ2VDb250ZW50VG9TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiaW52b2tlIiwiaW5wdXQiLCJvcHRpb25zIiwiX2NhbGxXaXRoQ29uZmlnIiwidGV4dCIsInJ1blR5cGUiLCJCYXNlT3V0cHV0UGFyc2VyIiwicGFyc2UiLCJwYXJzZVdpdGhQcm9tcHQiLCJfdHlwZSIsIkVycm9yIiwiT3V0cHV0UGFyc2VyRXhjZXB0aW9uIiwiY29uc3RydWN0b3IiLCJsbG1PdXRwdXQiLCJvYnNlcnZhdGlvbiIsInNlbmRUb0xMTSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/bytes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BytesOutputParser: () => (/* binding */ BytesOutputParser)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n/**\n * OutputParser that parses LLMResult into the top likely string and\n * encodes it into bytes.\n */ class BytesOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"bytes\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"textEncoder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new TextEncoder()\n        });\n    }\n    static lc_name() {\n        return \"BytesOutputParser\";\n    }\n    parse(text) {\n        return Promise.resolve(this.textEncoder.encode(text));\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkQ7QUFDM0Q7OztDQUdDLEdBQ00sTUFBTUMsMEJBQTBCRCxvRUFBeUJBO0lBQzVERSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNUQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBa0I7Z0JBQWtCO2FBQVE7UUFDeEQ7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sSUFBSUM7UUFDZjtJQUNKO0lBQ0EsT0FBT0MsVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxNQUFNQyxJQUFJLEVBQUU7UUFDUixPQUFPQyxRQUFRQyxPQUFPLENBQUMsSUFBSSxDQUFDQyxXQUFXLENBQUNDLE1BQU0sQ0FBQ0o7SUFDbkQ7SUFDQUssd0JBQXdCO1FBQ3BCLE9BQU87SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL2J5dGVzLmpzPzUyZTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciB9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuLyoqXG4gKiBPdXRwdXRQYXJzZXIgdGhhdCBwYXJzZXMgTExNUmVzdWx0IGludG8gdGhlIHRvcCBsaWtlbHkgc3RyaW5nIGFuZFxuICogZW5jb2RlcyBpdCBpbnRvIGJ5dGVzLlxuICovXG5leHBvcnQgY2xhc3MgQnl0ZXNPdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5fY29yZVwiLCBcIm91dHB1dF9wYXJzZXJzXCIsIFwiYnl0ZXNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGV4dEVuY29kZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBUZXh0RW5jb2RlcigpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQnl0ZXNPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgcGFyc2UodGV4dCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudGV4dEVuY29kZXIuZW5jb2RlKHRleHQpKTtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciIsIkJ5dGVzT3V0cHV0UGFyc2VyIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiVGV4dEVuY29kZXIiLCJsY19uYW1lIiwicGFyc2UiLCJ0ZXh0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0ZXh0RW5jb2RlciIsImVuY29kZSIsImdldEZvcm1hdEluc3RydWN0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.AsymmetricStructuredOutputParser),\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_5__.BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseLLMOutputParser: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_5__.BaseTransformOutputParser),\n/* harmony export */   BytesOutputParser: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_1__.BytesOutputParser),\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.CustomListOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.JsonMarkdownStructuredOutputParser),\n/* harmony export */   JsonOutputParser: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.JsonOutputParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.NumberedListOutputParser),\n/* harmony export */   OutputParserException: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException),\n/* harmony export */   StringOutputParser: () => (/* reexport safe */ _string_js__WEBPACK_IMPORTED_MODULE_3__.StringOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.StructuredOutputParser),\n/* harmony export */   XMLOutputParser: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.parsePartialJson),\n/* harmony export */   parseXMLMarkdown: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js\");\n/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./list.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js\");\n/* harmony import */ var _structured_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./structured.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js\");\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _json_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./json.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js\");\n/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./xml.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEI7QUFDQztBQUNEO0FBQ0U7QUFDSTtBQUNEO0FBQ0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9vdXRwdXRfcGFyc2Vycy9pbmRleC5qcz8zYTY2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2J5dGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saXN0LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zdHJpbmcuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N0cnVjdHVyZWQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vanNvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4veG1sLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/json.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonOutputParser: () => (/* binding */ JsonOutputParser),\n/* harmony export */   parseJsonMarkdown: () => (/* binding */ parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* binding */ parsePartialJson)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/json_patch.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\");\n\n\n/**\n * Class for parsing the output of an LLM into a JSON object.\n */ class JsonOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"JsonOutputParser\";\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [\n                {\n                    op: \"replace\",\n                    path: \"\",\n                    value: next\n                }\n            ];\n        }\n        return (0,_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__.compare)(prev, next);\n    }\n    // This should actually return Partial<T>, but there's no way\n    // to specify emitted chunks as instances separate from the main output type.\n    async parsePartialResult(generations) {\n        return parseJsonMarkdown(generations[0].text);\n    }\n    async parse(text) {\n        return parseJsonMarkdown(text, JSON.parse);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\nfunction parseJsonMarkdown(s, parser = parsePartialJson) {\n    // eslint-disable-next-line no-param-reassign\n    s = s.trim();\n    const match = /```(json)?(.*)```/s.exec(s);\n    if (!match) {\n        return parser(s);\n    } else {\n        return parser(match[2]);\n    }\n}\n// Adapted from https://github.com/KillianLucas/open-interpreter/blob/main/interpreter/core/llm/utils/parse_partial_json.py\n// MIT License\nfunction parsePartialJson(s) {\n    // If the input is undefined, return null to indicate failure.\n    if (typeof s === \"undefined\") {\n        return null;\n    }\n    // Attempt to parse the string as-is.\n    try {\n        return JSON.parse(s);\n    } catch (error) {\n    // Pass\n    }\n    // Initialize variables.\n    let new_s = \"\";\n    const stack = [];\n    let isInsideString = false;\n    let escaped = false;\n    // Process each character in the string one at a time.\n    for (let char of s){\n        if (isInsideString) {\n            if (char === '\"' && !escaped) {\n                isInsideString = false;\n            } else if (char === \"\\n\" && !escaped) {\n                char = \"\\\\n\"; // Replace the newline character with the escape sequence.\n            } else if (char === \"\\\\\") {\n                escaped = !escaped;\n            } else {\n                escaped = false;\n            }\n        } else {\n            if (char === '\"') {\n                isInsideString = true;\n                escaped = false;\n            } else if (char === \"{\") {\n                stack.push(\"}\");\n            } else if (char === \"[\") {\n                stack.push(\"]\");\n            } else if (char === \"}\" || char === \"]\") {\n                if (stack && stack[stack.length - 1] === char) {\n                    stack.pop();\n                } else {\n                    // Mismatched closing character; the input is malformed.\n                    return null;\n                }\n            }\n        }\n        // Append the processed character to the new string.\n        new_s += char;\n    }\n    // If we're still inside a string at the end of processing,\n    // we need to close the string.\n    if (isInsideString) {\n        new_s += '\"';\n    }\n    // Close any remaining open structures in the reverse order that they were opened.\n    for(let i = stack.length - 1; i >= 0; i -= 1){\n        new_s += stack[i];\n    }\n    // Attempt to parse the modified string as JSON.\n    try {\n        return JSON.parse(new_s);\n    } catch (error) {\n        // If we still can't parse the string as JSON, return null to indicate failure.\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/list.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* binding */ CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* binding */ CustomListOutputParser),\n/* harmony export */   ListOutputParser: () => (/* binding */ ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* binding */ MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* binding */ NumberedListOutputParser)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n\n/**\n * Class to parse the output of an LLM call to a list.\n * @augments BaseOutputParser\n */ class ListOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_1__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async *_transform(inputGenerator) {\n        let buffer = \"\";\n        for await (const input of inputGenerator){\n            if (typeof input === \"string\") {\n                // add current chunk to buffer\n                buffer += input;\n            } else {\n                // extract message content and add to buffer\n                buffer += input.content;\n            }\n            // get parts in buffer\n            if (!this.re) {\n                const parts = await this.parse(buffer);\n                if (parts.length > 1) {\n                    // if there are multiple parts, yield all but the last one\n                    for (const part of parts.slice(0, -1)){\n                        yield [\n                            part\n                        ];\n                    }\n                    // keep the last part in the buffer\n                    buffer = parts[parts.length - 1];\n                }\n            } else {\n                // if there is a regex, get all matches\n                const matches = [\n                    ...buffer.matchAll(this.re)\n                ];\n                if (matches.length > 1) {\n                    let doneIdx = 0;\n                    // if there are multiple matches, yield all but the last one\n                    for (const match of matches.slice(0, -1)){\n                        yield [\n                            match[1]\n                        ];\n                        doneIdx += (match.index ?? 0) + match[0].length;\n                    }\n                    // keep the last match in the buffer\n                    buffer = buffer.slice(doneIdx);\n                }\n            }\n        }\n        // yield the last part\n        for (const part of (await this.parse(buffer))){\n            yield [\n                part\n            ];\n        }\n    }\n}\n/**\n * Class to parse the output of an LLM call as a comma-separated list.\n * @augments ListOutputParser\n */ class CommaSeparatedListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"CommaSeparatedListOutputParser\";\n    }\n    /**\n     * Parses the given text into an array of strings, using a comma as the\n     * separator. If the parsing fails, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns An array of strings obtained by splitting the input text at each comma.\n     */ async parse(text) {\n        try {\n            return text.trim().split(\",\").map((s)=>s.trim());\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`, text);\n        }\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CommaSeparatedListOutputParser.\n     * @returns A string containing instructions on the expected format of the response.\n     */ getFormatInstructions() {\n        return `Your response should be a list of comma separated values, eg: \\`foo, bar, baz\\``;\n    }\n}\n/**\n * Class to parse the output of an LLM call to a list with a specific length and separator.\n * @augments ListOutputParser\n */ class CustomListOutputParser extends ListOutputParser {\n    constructor({ length, separator }){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"length\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.length = length;\n        this.separator = separator || \",\";\n    }\n    /**\n     * Parses the given text into an array of strings, using the specified\n     * separator. If the parsing fails or the number of items in the list\n     * doesn't match the expected length, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns An array of strings obtained by splitting the input text at each occurrence of the specified separator.\n     */ async parse(text) {\n        try {\n            const items = text.trim().split(this.separator).map((s)=>s.trim());\n            if (this.length !== undefined && items.length !== this.length) {\n                throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Incorrect number of items. Expected ${this.length}, got ${items.length}.`);\n            }\n            return items;\n        } catch (e) {\n            if (Object.getPrototypeOf(e) === _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException.prototype) {\n                throw e;\n            }\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`);\n        }\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CustomListOutputParser, including the number of items and the\n     * separator.\n     * @returns A string containing instructions on the expected format of the response.\n     */ getFormatInstructions() {\n        return `Your response should be a list of ${this.length === undefined ? \"\" : `${this.length} `}items separated by \"${this.separator}\" (eg: \\`foo${this.separator} bar${this.separator} baz\\`)`;\n    }\n}\nclass NumberedListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: /\\d+\\.\\s([^\\n]+)/g\n        });\n    }\n    static lc_name() {\n        return \"NumberedListOutputParser\";\n    }\n    getFormatInstructions() {\n        return `Your response should be a numbered list with each item on a new line. For example: \\n\\n1. foo\\n\\n2. bar\\n\\n3. baz`;\n    }\n    async parse(text) {\n        return [\n            ...text.matchAll(this.re) ?? []\n        ].map((m)=>m[1]);\n    }\n}\nclass MarkdownListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: /^\\s*[-*]\\s([^\\n]+)$/gm\n        });\n    }\n    static lc_name() {\n        return \"NumberedListOutputParser\";\n    }\n    getFormatInstructions() {\n        return `Your response should be a numbered list with each item on a new line. For example: \\n\\n1. foo\\n\\n2. bar\\n\\n3. baz`;\n    }\n    async parse(text) {\n        return [\n            ...text.matchAll(this.re) ?? []\n        ].map((m)=>m[1]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/string.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringOutputParser: () => (/* binding */ StringOutputParser)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n/**\n * OutputParser that parses LLMResult into the top likely string.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n *\n * const chain = RunnableSequence.from([\n *   promptTemplate,\n *   new ChatOpenAI({}),\n *   new StringOutputParser(),\n * ]);\n *\n * const result = await chain.invoke({ topic: \"bears\" });\n * console.log(\"What do you call a bear with no teeth? A gummy bear!\");\n * ```\n */ class StringOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"string\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"StrOutputParser\";\n    }\n    /**\n     * Parses a string output from an LLM call. This method is meant to be\n     * implemented by subclasses to define how a string output from an LLM\n     * should be parsed.\n     * @param text The string output from an LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */ parse(text) {\n        return Promise.resolve(text);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n    _textContentToString(content) {\n        return content.text;\n    }\n    _imageUrlContentToString(_content) {\n        throw new Error(`Cannot coerce a multimodal \"image_url\" message part into a string.`);\n    }\n    _messageContentComplexToString(content) {\n        switch(content.type){\n            case \"text\":\n                return this._textContentToString(content);\n            case \"image_url\":\n                return this._imageUrlContentToString(content);\n            default:\n                throw new Error(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n                `Cannot coerce \"${content.type}\" message part into a string.`);\n        }\n    }\n    _baseMessageContentToString(content) {\n        return content.reduce((acc, item)=>acc + this._messageContentComplexToString(item), \"\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNNLE1BQU1DLDJCQUEyQkQsb0VBQXlCQTtJQUM3REUsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWtCO2dCQUFrQjthQUFTO1FBQ3pEO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU9DLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQTs7Ozs7OztLQU9DLEdBQ0RDLE1BQU1DLElBQUksRUFBRTtRQUNSLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQ0Y7SUFDM0I7SUFDQUcsd0JBQXdCO1FBQ3BCLE9BQU87SUFDWDtJQUNBQyxxQkFBcUJDLE9BQU8sRUFBRTtRQUMxQixPQUFPQSxRQUFRTCxJQUFJO0lBQ3ZCO0lBQ0FNLHlCQUF5QkMsUUFBUSxFQUFFO1FBQy9CLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGtFQUFrRSxDQUFDO0lBQ3hGO0lBQ0FDLCtCQUErQkosT0FBTyxFQUFFO1FBQ3BDLE9BQVFBLFFBQVFLLElBQUk7WUFDaEIsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQ04sb0JBQW9CLENBQUNDO1lBQ3JDLEtBQUs7Z0JBQ0QsT0FBTyxJQUFJLENBQUNDLHdCQUF3QixDQUFDRDtZQUN6QztnQkFDSSxNQUFNLElBQUlHLE1BQ1YsOERBQThEO2dCQUM5RCxDQUFDLGVBQWUsRUFBRUgsUUFBUUssSUFBSSxDQUFDLDZCQUE2QixDQUFDO1FBQ3JFO0lBQ0o7SUFDQUMsNEJBQTRCTixPQUFPLEVBQUU7UUFDakMsT0FBT0EsUUFBUU8sTUFBTSxDQUFDLENBQUNDLEtBQUtDLE9BQVNELE1BQU0sSUFBSSxDQUFDSiw4QkFBOEIsQ0FBQ0ssT0FBTztJQUMxRjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL3N0cmluZy5qcz82YjI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VUcmFuc2Zvcm1PdXRwdXRQYXJzZXIgfSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcbi8qKlxuICogT3V0cHV0UGFyc2VyIHRoYXQgcGFyc2VzIExMTVJlc3VsdCBpbnRvIHRoZSB0b3AgbGlrZWx5IHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBwcm9tcHRUZW1wbGF0ZSA9IFByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcbiAqICAgXCJUZWxsIG1lIGEgam9rZSBhYm91dCB7dG9waWN9XCIsXG4gKiApO1xuICpcbiAqIGNvbnN0IGNoYWluID0gUnVubmFibGVTZXF1ZW5jZS5mcm9tKFtcbiAqICAgcHJvbXB0VGVtcGxhdGUsXG4gKiAgIG5ldyBDaGF0T3BlbkFJKHt9KSxcbiAqICAgbmV3IFN0cmluZ091dHB1dFBhcnNlcigpLFxuICogXSk7XG4gKlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgY2hhaW4uaW52b2tlKHsgdG9waWM6IFwiYmVhcnNcIiB9KTtcbiAqIGNvbnNvbGUubG9nKFwiV2hhdCBkbyB5b3UgY2FsbCBhIGJlYXIgd2l0aCBubyB0ZWV0aD8gQSBndW1teSBiZWFyIVwiKTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgU3RyaW5nT3V0cHV0UGFyc2VyIGV4dGVuZHMgQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluX2NvcmVcIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcInN0cmluZ1wiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfc2VyaWFsaXphYmxlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU3RyT3V0cHV0UGFyc2VyXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHN0cmluZyBvdXRwdXQgZnJvbSBhbiBMTE0gY2FsbC4gVGhpcyBtZXRob2QgaXMgbWVhbnQgdG8gYmVcbiAgICAgKiBpbXBsZW1lbnRlZCBieSBzdWJjbGFzc2VzIHRvIGRlZmluZSBob3cgYSBzdHJpbmcgb3V0cHV0IGZyb20gYW4gTExNXG4gICAgICogc2hvdWxkIGJlIHBhcnNlZC5cbiAgICAgKiBAcGFyYW0gdGV4dCBUaGUgc3RyaW5nIG91dHB1dCBmcm9tIGFuIExMTSBjYWxsLlxuICAgICAqIEBwYXJhbSBjYWxsYmFja3MgT3B0aW9uYWwgY2FsbGJhY2tzLlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSBvZiB0aGUgcGFyc2VkIG91dHB1dC5cbiAgICAgKi9cbiAgICBwYXJzZSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGV4dCk7XG4gICAgfVxuICAgIGdldEZvcm1hdEluc3RydWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIF90ZXh0Q29udGVudFRvU3RyaW5nKGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQudGV4dDtcbiAgICB9XG4gICAgX2ltYWdlVXJsQ29udGVudFRvU3RyaW5nKF9jb250ZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNvZXJjZSBhIG11bHRpbW9kYWwgXCJpbWFnZV91cmxcIiBtZXNzYWdlIHBhcnQgaW50byBhIHN0cmluZy5gKTtcbiAgICB9XG4gICAgX21lc3NhZ2VDb250ZW50Q29tcGxleFRvU3RyaW5nKGNvbnRlbnQpIHtcbiAgICAgICAgc3dpdGNoIChjb250ZW50LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHRDb250ZW50VG9TdHJpbmcoY29udGVudCk7XG4gICAgICAgICAgICBjYXNlIFwiaW1hZ2VfdXJsXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlVXJsQ29udGVudFRvU3RyaW5nKGNvbnRlbnQpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICBgQ2Fubm90IGNvZXJjZSBcIiR7Y29udGVudC50eXBlfVwiIG1lc3NhZ2UgcGFydCBpbnRvIGEgc3RyaW5nLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9iYXNlTWVzc2FnZUNvbnRlbnRUb1N0cmluZyhjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50LnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgKyB0aGlzLl9tZXNzYWdlQ29udGVudENvbXBsZXhUb1N0cmluZyhpdGVtKSwgXCJcIik7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VUcmFuc2Zvcm1PdXRwdXRQYXJzZXIiLCJTdHJpbmdPdXRwdXRQYXJzZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJsY19uYW1lIiwicGFyc2UiLCJ0ZXh0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRGb3JtYXRJbnN0cnVjdGlvbnMiLCJfdGV4dENvbnRlbnRUb1N0cmluZyIsImNvbnRlbnQiLCJfaW1hZ2VVcmxDb250ZW50VG9TdHJpbmciLCJfY29udGVudCIsIkVycm9yIiwiX21lc3NhZ2VDb250ZW50Q29tcGxleFRvU3RyaW5nIiwidHlwZSIsIl9iYXNlTWVzc2FnZUNvbnRlbnRUb1N0cmluZyIsInJlZHVjZSIsImFjYyIsIml0ZW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/structured.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* binding */ AsymmetricStructuredOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* binding */ JsonMarkdownStructuredOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* binding */ StructuredOutputParser)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n\n\n\nclass StructuredOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    static lc_name() {\n        return \"StructuredOutputParser\";\n    }\n    toJSON() {\n        return this.toJSONNotImplemented();\n    }\n    constructor(schema){\n        super(schema);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: schema\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"structured\"\n            ]\n        });\n    }\n    /**\n     * Creates a new StructuredOutputParser from a Zod schema.\n     * @param schema The Zod schema which the output should match\n     * @returns A new instance of StructuredOutputParser.\n     */ static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    /**\n     * Creates a new StructuredOutputParser from a set of names and\n     * descriptions.\n     * @param schemas An object where each key is a name and each value is a description\n     * @returns A new instance of StructuredOutputParser.\n     */ static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[\n                name,\n                zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(description)\n            ])));\n        return new this(zodSchema);\n    }\n    /**\n     * Returns a markdown code snippet with a JSON object formatted according\n     * to the schema.\n     * @param options Optional. The options for formatting the instructions\n     * @returns A markdown code snippet with a JSON object formatted according to the schema.\n     */ getFormatInstructions() {\n        return `You must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}}}\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\n\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!\n\nHere is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:\n\\`\\`\\`json\n${JSON.stringify((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(this.schema))}\n\\`\\`\\`\n`;\n    }\n    /**\n     * Parses the given text according to the schema.\n     * @param text The text to parse\n     * @returns The parsed output.\n     */ async parse(text) {\n        try {\n            const json = text.includes(\"```\") ? text.trim().split(/```(?:json)?/)[1] : text.trim();\n            return await this.schema.parseAsync(JSON.parse(json));\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\n/**\n * A specific type of `StructuredOutputParser` that parses JSON data\n * formatted as a markdown code snippet.\n */ class JsonMarkdownStructuredOutputParser extends StructuredOutputParser {\n    static lc_name() {\n        return \"JsonMarkdownStructuredOutputParser\";\n    }\n    getFormatInstructions(options) {\n        const interpolationDepth = options?.interpolationDepth ?? 1;\n        if (interpolationDepth < 1) {\n            throw new Error(\"f string interpolation depth must be at least 1\");\n        }\n        return `Return a markdown code snippet with a JSON object formatted to look like:\\n\\`\\`\\`json\\n${this._schemaToInstruction((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(this.schema)).replaceAll(\"{\", \"{\".repeat(interpolationDepth)).replaceAll(\"}\", \"}\".repeat(interpolationDepth))}\\n\\`\\`\\``;\n    }\n    _schemaToInstruction(schemaInput, indent = 2) {\n        const schema = schemaInput;\n        if (\"type\" in schema) {\n            let nullable = false;\n            let type;\n            if (Array.isArray(schema.type)) {\n                const nullIdx = schema.type.findIndex((type)=>type === \"null\");\n                if (nullIdx !== -1) {\n                    nullable = true;\n                    schema.type.splice(nullIdx, 1);\n                }\n                type = schema.type.join(\" | \");\n            } else {\n                type = schema.type;\n            }\n            if (schema.type === \"object\" && schema.properties) {\n                const description = schema.description ? ` // ${schema.description}` : \"\";\n                const properties = Object.entries(schema.properties).map(([key, value])=>{\n                    const isOptional = schema.required?.includes(key) ? \"\" : \" (optional)\";\n                    return `${\" \".repeat(indent)}\"${key}\": ${this._schemaToInstruction(value, indent + 2)}${isOptional}`;\n                }).join(\"\\n\");\n                return `{\\n${properties}\\n${\" \".repeat(indent - 2)}}${description}`;\n            }\n            if (schema.type === \"array\" && schema.items) {\n                const description = schema.description ? ` // ${schema.description}` : \"\";\n                return `array[\\n${\" \".repeat(indent)}${this._schemaToInstruction(schema.items, indent + 2)}\\n${\" \".repeat(indent - 2)}] ${description}`;\n            }\n            const isNullable = nullable ? \" (nullable)\" : \"\";\n            const description = schema.description ? ` // ${schema.description}` : \"\";\n            return `${type}${description}${isNullable}`;\n        }\n        if (\"anyOf\" in schema) {\n            return schema.anyOf.map((s)=>this._schemaToInstruction(s, indent)).join(`\\n${\" \".repeat(indent - 2)}`);\n        }\n        throw new Error(\"unsupported schema type\");\n    }\n    static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[\n                name,\n                zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(description)\n            ])));\n        return new this(zodSchema);\n    }\n}\n/**\n * A type of `StructuredOutputParser` that handles asymmetric input and\n * output schemas.\n */ class AsymmetricStructuredOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    constructor({ inputSchema }){\n        super(...arguments);\n        Object.defineProperty(this, \"structuredInputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.structuredInputParser = new JsonMarkdownStructuredOutputParser(inputSchema);\n    }\n    async parse(text) {\n        let parsedInput;\n        try {\n            parsedInput = await this.structuredInputParser.parse(text);\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n        return this.outputProcessor(parsedInput);\n    }\n    getFormatInstructions() {\n        return this.structuredInputParser.getFormatInstructions();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/transform.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* binding */ BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* binding */ BaseTransformOutputParser)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _utils_cfworker_json_schema_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/@cfworker/json-schema/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/index.js\");\n\n\n\n\n/**\n * Class to parse the output of an LLM call that also allows streaming inputs.\n */ class BaseTransformOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    async *_transform(inputGenerator) {\n        for await (const chunk of inputGenerator){\n            if (typeof chunk === \"string\") {\n                yield this.parseResult([\n                    {\n                        text: chunk\n                    }\n                ]);\n            } else {\n                yield this.parseResult([\n                    {\n                        message: chunk,\n                        text: this._baseMessageToString(chunk)\n                    }\n                ]);\n            }\n        }\n    }\n    /**\n     * Transforms an asynchronous generator of input into an asynchronous\n     * generator of parsed output.\n     * @param inputGenerator An asynchronous generator of input.\n     * @param options A configuration object.\n     * @returns An asynchronous generator of parsed output.\n     */ async *transform(inputGenerator, options) {\n        yield* this._transformStreamWithConfig(inputGenerator, this._transform.bind(this), {\n            ...options,\n            runType: \"parser\"\n        });\n    }\n}\n/**\n * A base class for output parsers that can handle streaming input. It\n * extends the `BaseTransformOutputParser` class and provides a method for\n * converting parsed outputs into a diff format.\n */ class BaseCumulativeTransformOutputParser extends BaseTransformOutputParser {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"diff\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.diff = fields?.diff ?? this.diff;\n    }\n    async *_transform(inputGenerator) {\n        let prevParsed;\n        let accGen;\n        for await (const chunk of inputGenerator){\n            if (typeof chunk !== \"string\" && typeof chunk.content !== \"string\") {\n                throw new Error(\"Cannot handle non-string output.\");\n            }\n            let chunkGen;\n            if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessageChunk)(chunk)) {\n                if (typeof chunk.content !== \"string\") {\n                    throw new Error(\"Cannot handle non-string message output.\");\n                }\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_2__.ChatGenerationChunk({\n                    message: chunk,\n                    text: chunk.content\n                });\n            } else if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessage)(chunk)) {\n                if (typeof chunk.content !== \"string\") {\n                    throw new Error(\"Cannot handle non-string message output.\");\n                }\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_2__.ChatGenerationChunk({\n                    message: chunk.toChunk(),\n                    text: chunk.content\n                });\n            } else {\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_2__.GenerationChunk({\n                    text: chunk\n                });\n            }\n            if (accGen === undefined) {\n                accGen = chunkGen;\n            } else {\n                accGen = accGen.concat(chunkGen);\n            }\n            const parsed = await this.parsePartialResult([\n                accGen\n            ]);\n            if (parsed !== undefined && parsed !== null && !(0,_utils_cfworker_json_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.deepCompareStrict)(parsed, prevParsed)) {\n                if (this.diff) {\n                    yield this._diff(prevParsed, parsed);\n                } else {\n                    yield parsed;\n                }\n                prevParsed = parsed;\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/xml.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLOutputParser: () => (/* binding */ XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* binding */ XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseXMLMarkdown: () => (/* binding */ parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/json_patch.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\");\n/* harmony import */ var _utils_sax_js_sax_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/sax-js/sax.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js\");\n\n\n\nconst XML_FORMAT_INSTRUCTIONS = `The output should be formatted as a XML file.\n1. Output should conform to the tags below. \n2. If tags are not given, make them on your own.\n3. Remember to always open and close all the tags.\n\nAs an example, for the tags [\"foo\", \"bar\", \"baz\"]:\n1. String \"<foo>\\n   <bar>\\n      <baz></baz>\\n   </bar>\\n</foo>\" is a well-formatted instance of the schema. \n2. String \"<foo>\\n   <bar>\\n   </foo>\" is a badly-formatted instance.\n3. String \"<foo>\\n   <tag>\\n   </tag>\\n</foo>\" is a badly-formatted instance.\n\nHere are the output tags:\n\\`\\`\\`\n{tags}\n\\`\\`\\``;\nclass XMLOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.tags = fields?.tags;\n    }\n    static lc_name() {\n        return \"XMLOutputParser\";\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [\n                {\n                    op: \"replace\",\n                    path: \"\",\n                    value: next\n                }\n            ];\n        }\n        return (0,_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__.compare)(prev, next);\n    }\n    async parsePartialResult(generations) {\n        return parseXMLMarkdown(generations[0].text);\n    }\n    async parse(text) {\n        return parseXMLMarkdown(text);\n    }\n    getFormatInstructions() {\n        const withTags = !!(this.tags && this.tags.length > 0);\n        return withTags ? XML_FORMAT_INSTRUCTIONS.replace(\"{tags}\", this.tags?.join(\", \") ?? \"\") : XML_FORMAT_INSTRUCTIONS;\n    }\n}\nconst strip = (text)=>text.split(\"\\n\").map((line)=>line.replace(/^\\s+/, \"\")).join(\"\\n\").trim();\nconst parseParsedResult = (input)=>{\n    if (Object.keys(input).length === 0) {\n        return {};\n    }\n    const result = {};\n    if (input.children.length > 0) {\n        result[input.name] = input.children.map(parseParsedResult);\n        return result;\n    } else {\n        result[input.name] = input.text ?? undefined;\n        return result;\n    }\n};\nfunction parseXMLMarkdown(s) {\n    const cleanedString = strip(s);\n    const parser = _utils_sax_js_sax_js__WEBPACK_IMPORTED_MODULE_2__.sax.parser(true);\n    let parsedResult = {};\n    const elementStack = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.onopentag = (node)=>{\n        const element = {\n            name: node.name,\n            attributes: node.attributes,\n            children: [],\n            text: \"\",\n            isSelfClosing: node.isSelfClosing\n        };\n        if (elementStack.length > 0) {\n            const parentElement = elementStack[elementStack.length - 1];\n            parentElement.children.push(element);\n        } else {\n            parsedResult = element;\n        }\n        if (!node.isSelfClosing) {\n            elementStack.push(element);\n        }\n    };\n    parser.onclosetag = ()=>{\n        if (elementStack.length > 0) {\n            const lastElement = elementStack.pop();\n            if (elementStack.length === 0 && lastElement) {\n                parsedResult = lastElement;\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.ontext = (text)=>{\n        if (elementStack.length > 0) {\n            const currentElement = elementStack[elementStack.length - 1];\n            currentElement.text += text;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.onattribute = (attr)=>{\n        if (elementStack.length > 0) {\n            const currentElement = elementStack[elementStack.length - 1];\n            currentElement.attributes[attr.name] = attr.value;\n        }\n    };\n    // Try to find XML string within triple backticks.\n    const match = /```(xml)?(.*)```/s.exec(cleanedString);\n    const xmlString = match ? match[2] : cleanedString;\n    parser.write(xmlString).close();\n    // Remove the XML declaration if present\n    if (parsedResult && parsedResult.name === \"?xml\") {\n        parsedResult = parsedResult.children[0];\n    }\n    return parseParsedResult(parsedResult);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMveG1sLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRTtBQUNyQjtBQUNKO0FBQ3RDLE1BQU1HLDBCQUEwQixDQUFDOzs7Ozs7Ozs7Ozs7O01BYWxDLENBQUMsQ0FBQztBQUNELE1BQU1DLHdCQUF3QkosOEVBQW1DQTtJQUNwRUssWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQ0E7UUFDTkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWtCO2FBQWlCO1FBQy9DO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQSxJQUFJLENBQUNDLElBQUksR0FBR1AsUUFBUU87SUFDeEI7SUFDQSxPQUFPQyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLE1BQU1DLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ2QsSUFBSSxDQUFDQSxNQUFNO1lBQ1AsT0FBT0M7UUFDWDtRQUNBLElBQUksQ0FBQ0YsTUFBTTtZQUNQLE9BQU87Z0JBQUM7b0JBQUVHLElBQUk7b0JBQVdDLE1BQU07b0JBQUlSLE9BQU9LO2dCQUFLO2FBQUU7UUFDckQ7UUFDQSxPQUFPaEIsNkRBQU9BLENBQUNlLE1BQU1DO0lBQ3pCO0lBQ0EsTUFBTUksbUJBQW1CQyxXQUFXLEVBQUU7UUFDbEMsT0FBT0MsaUJBQWlCRCxXQUFXLENBQUMsRUFBRSxDQUFDRSxJQUFJO0lBQy9DO0lBQ0EsTUFBTUMsTUFBTUQsSUFBSSxFQUFFO1FBQ2QsT0FBT0QsaUJBQWlCQztJQUM1QjtJQUNBRSx3QkFBd0I7UUFDcEIsTUFBTUMsV0FBVyxDQUFDLENBQUUsS0FBSSxDQUFDZCxJQUFJLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNlLE1BQU0sR0FBRztRQUNwRCxPQUFPRCxXQUNEeEIsd0JBQXdCMEIsT0FBTyxDQUFDLFVBQVUsSUFBSSxDQUFDaEIsSUFBSSxFQUFFaUIsS0FBSyxTQUFTLE1BQ25FM0I7SUFDVjtBQUNKO0FBQ0EsTUFBTTRCLFFBQVEsQ0FBQ1AsT0FBU0EsS0FDbkJRLEtBQUssQ0FBQyxNQUNOQyxHQUFHLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS0wsT0FBTyxDQUFDLFFBQVEsS0FDbkNDLElBQUksQ0FBQyxNQUNMSyxJQUFJO0FBQ1QsTUFBTUMsb0JBQW9CLENBQUNDO0lBQ3ZCLElBQUk5QixPQUFPK0IsSUFBSSxDQUFDRCxPQUFPVCxNQUFNLEtBQUssR0FBRztRQUNqQyxPQUFPLENBQUM7SUFDWjtJQUNBLE1BQU1XLFNBQVMsQ0FBQztJQUNoQixJQUFJRixNQUFNRyxRQUFRLENBQUNaLE1BQU0sR0FBRyxHQUFHO1FBQzNCVyxNQUFNLENBQUNGLE1BQU1JLElBQUksQ0FBQyxHQUFHSixNQUFNRyxRQUFRLENBQUNQLEdBQUcsQ0FBQ0c7UUFDeEMsT0FBT0c7SUFDWCxPQUNLO1FBQ0RBLE1BQU0sQ0FBQ0YsTUFBTUksSUFBSSxDQUFDLEdBQUdKLE1BQU1iLElBQUksSUFBSU47UUFDbkMsT0FBT3FCO0lBQ1g7QUFDSjtBQUNPLFNBQVNoQixpQkFBaUJtQixDQUFDO0lBQzlCLE1BQU1DLGdCQUFnQlosTUFBTVc7SUFDNUIsTUFBTUUsU0FBUzFDLHFEQUFHQSxDQUFDMEMsTUFBTSxDQUFDO0lBQzFCLElBQUlDLGVBQWUsQ0FBQztJQUNwQixNQUFNQyxlQUFlLEVBQUU7SUFDdkIsOERBQThEO0lBQzlERixPQUFPRyxTQUFTLEdBQUcsQ0FBQ0M7UUFDaEIsTUFBTUMsVUFBVTtZQUNaUixNQUFNTyxLQUFLUCxJQUFJO1lBQ2ZTLFlBQVlGLEtBQUtFLFVBQVU7WUFDM0JWLFVBQVUsRUFBRTtZQUNaaEIsTUFBTTtZQUNOMkIsZUFBZUgsS0FBS0csYUFBYTtRQUNyQztRQUNBLElBQUlMLGFBQWFsQixNQUFNLEdBQUcsR0FBRztZQUN6QixNQUFNd0IsZ0JBQWdCTixZQUFZLENBQUNBLGFBQWFsQixNQUFNLEdBQUcsRUFBRTtZQUMzRHdCLGNBQWNaLFFBQVEsQ0FBQ2EsSUFBSSxDQUFDSjtRQUNoQyxPQUNLO1lBQ0RKLGVBQWVJO1FBQ25CO1FBQ0EsSUFBSSxDQUFDRCxLQUFLRyxhQUFhLEVBQUU7WUFDckJMLGFBQWFPLElBQUksQ0FBQ0o7UUFDdEI7SUFDSjtJQUNBTCxPQUFPVSxVQUFVLEdBQUc7UUFDaEIsSUFBSVIsYUFBYWxCLE1BQU0sR0FBRyxHQUFHO1lBQ3pCLE1BQU0yQixjQUFjVCxhQUFhVSxHQUFHO1lBQ3BDLElBQUlWLGFBQWFsQixNQUFNLEtBQUssS0FBSzJCLGFBQWE7Z0JBQzFDVixlQUFlVTtZQUNuQjtRQUNKO0lBQ0o7SUFDQSw4REFBOEQ7SUFDOURYLE9BQU9hLE1BQU0sR0FBRyxDQUFDakM7UUFDYixJQUFJc0IsYUFBYWxCLE1BQU0sR0FBRyxHQUFHO1lBQ3pCLE1BQU04QixpQkFBaUJaLFlBQVksQ0FBQ0EsYUFBYWxCLE1BQU0sR0FBRyxFQUFFO1lBQzVEOEIsZUFBZWxDLElBQUksSUFBSUE7UUFDM0I7SUFDSjtJQUNBLDhEQUE4RDtJQUM5RG9CLE9BQU9lLFdBQVcsR0FBRyxDQUFDQztRQUNsQixJQUFJZCxhQUFhbEIsTUFBTSxHQUFHLEdBQUc7WUFDekIsTUFBTThCLGlCQUFpQlosWUFBWSxDQUFDQSxhQUFhbEIsTUFBTSxHQUFHLEVBQUU7WUFDNUQ4QixlQUFlUixVQUFVLENBQUNVLEtBQUtuQixJQUFJLENBQUMsR0FBR21CLEtBQUtoRCxLQUFLO1FBQ3JEO0lBQ0o7SUFDQSxrREFBa0Q7SUFDbEQsTUFBTWlELFFBQVEsb0JBQW9CQyxJQUFJLENBQUNuQjtJQUN2QyxNQUFNb0IsWUFBWUYsUUFBUUEsS0FBSyxDQUFDLEVBQUUsR0FBR2xCO0lBQ3JDQyxPQUFPb0IsS0FBSyxDQUFDRCxXQUFXRSxLQUFLO0lBQzdCLHdDQUF3QztJQUN4QyxJQUFJcEIsZ0JBQWdCQSxhQUFhSixJQUFJLEtBQUssUUFBUTtRQUM5Q0ksZUFBZUEsYUFBYUwsUUFBUSxDQUFDLEVBQUU7SUFDM0M7SUFDQSxPQUFPSixrQkFBa0JTO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL3htbC5qcz9kZDQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyLCB9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuaW1wb3J0IHsgY29tcGFyZSB9IGZyb20gXCIuLi91dGlscy9qc29uX3BhdGNoLmpzXCI7XG5pbXBvcnQgeyBzYXggfSBmcm9tIFwiLi4vdXRpbHMvc2F4LWpzL3NheC5qc1wiO1xuZXhwb3J0IGNvbnN0IFhNTF9GT1JNQVRfSU5TVFJVQ1RJT05TID0gYFRoZSBvdXRwdXQgc2hvdWxkIGJlIGZvcm1hdHRlZCBhcyBhIFhNTCBmaWxlLlxuMS4gT3V0cHV0IHNob3VsZCBjb25mb3JtIHRvIHRoZSB0YWdzIGJlbG93LiBcbjIuIElmIHRhZ3MgYXJlIG5vdCBnaXZlbiwgbWFrZSB0aGVtIG9uIHlvdXIgb3duLlxuMy4gUmVtZW1iZXIgdG8gYWx3YXlzIG9wZW4gYW5kIGNsb3NlIGFsbCB0aGUgdGFncy5cblxuQXMgYW4gZXhhbXBsZSwgZm9yIHRoZSB0YWdzIFtcImZvb1wiLCBcImJhclwiLCBcImJhelwiXTpcbjEuIFN0cmluZyBcIjxmb28+XFxuICAgPGJhcj5cXG4gICAgICA8YmF6PjwvYmF6PlxcbiAgIDwvYmFyPlxcbjwvZm9vPlwiIGlzIGEgd2VsbC1mb3JtYXR0ZWQgaW5zdGFuY2Ugb2YgdGhlIHNjaGVtYS4gXG4yLiBTdHJpbmcgXCI8Zm9vPlxcbiAgIDxiYXI+XFxuICAgPC9mb28+XCIgaXMgYSBiYWRseS1mb3JtYXR0ZWQgaW5zdGFuY2UuXG4zLiBTdHJpbmcgXCI8Zm9vPlxcbiAgIDx0YWc+XFxuICAgPC90YWc+XFxuPC9mb28+XCIgaXMgYSBiYWRseS1mb3JtYXR0ZWQgaW5zdGFuY2UuXG5cbkhlcmUgYXJlIHRoZSBvdXRwdXQgdGFnczpcblxcYFxcYFxcYFxue3RhZ3N9XG5cXGBcXGBcXGBgO1xuZXhwb3J0IGNsYXNzIFhNTE91dHB1dFBhcnNlciBleHRlbmRzIEJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGFnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwib3V0cHV0X3BhcnNlcnNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50YWdzID0gZmllbGRzPy50YWdzO1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiWE1MT3V0cHV0UGFyc2VyXCI7XG4gICAgfVxuICAgIF9kaWZmKHByZXYsIG5leHQpIHtcbiAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHJldikge1xuICAgICAgICAgICAgcmV0dXJuIFt7IG9wOiBcInJlcGxhY2VcIiwgcGF0aDogXCJcIiwgdmFsdWU6IG5leHQgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBhcmUocHJldiwgbmV4dCk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlUGFydGlhbFJlc3VsdChnZW5lcmF0aW9ucykge1xuICAgICAgICByZXR1cm4gcGFyc2VYTUxNYXJrZG93bihnZW5lcmF0aW9uc1swXS50ZXh0KTtcbiAgICB9XG4gICAgYXN5bmMgcGFyc2UodGV4dCkge1xuICAgICAgICByZXR1cm4gcGFyc2VYTUxNYXJrZG93bih0ZXh0KTtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICBjb25zdCB3aXRoVGFncyA9ICEhKHRoaXMudGFncyAmJiB0aGlzLnRhZ3MubGVuZ3RoID4gMCk7XG4gICAgICAgIHJldHVybiB3aXRoVGFnc1xuICAgICAgICAgICAgPyBYTUxfRk9STUFUX0lOU1RSVUNUSU9OUy5yZXBsYWNlKFwie3RhZ3N9XCIsIHRoaXMudGFncz8uam9pbihcIiwgXCIpID8/IFwiXCIpXG4gICAgICAgICAgICA6IFhNTF9GT1JNQVRfSU5TVFJVQ1RJT05TO1xuICAgIH1cbn1cbmNvbnN0IHN0cmlwID0gKHRleHQpID0+IHRleHRcbiAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAubWFwKChsaW5lKSA9PiBsaW5lLnJlcGxhY2UoL15cXHMrLywgXCJcIikpXG4gICAgLmpvaW4oXCJcXG5cIilcbiAgICAudHJpbSgpO1xuY29uc3QgcGFyc2VQYXJzZWRSZXN1bHQgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAoT2JqZWN0LmtleXMoaW5wdXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGlmIChpbnB1dC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlc3VsdFtpbnB1dC5uYW1lXSA9IGlucHV0LmNoaWxkcmVuLm1hcChwYXJzZVBhcnNlZFJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHRbaW5wdXQubmFtZV0gPSBpbnB1dC50ZXh0ID8/IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWE1MTWFya2Rvd24ocykge1xuICAgIGNvbnN0IGNsZWFuZWRTdHJpbmcgPSBzdHJpcChzKTtcbiAgICBjb25zdCBwYXJzZXIgPSBzYXgucGFyc2VyKHRydWUpO1xuICAgIGxldCBwYXJzZWRSZXN1bHQgPSB7fTtcbiAgICBjb25zdCBlbGVtZW50U3RhY2sgPSBbXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHBhcnNlci5vbm9wZW50YWcgPSAobm9kZSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0ge1xuICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgYXR0cmlidXRlczogbm9kZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICAgIGlzU2VsZkNsb3Npbmc6IG5vZGUuaXNTZWxmQ2xvc2luZyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGVsZW1lbnRTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gZWxlbWVudFN0YWNrW2VsZW1lbnRTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlZFJlc3VsdCA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFub2RlLmlzU2VsZkNsb3NpbmcpIHtcbiAgICAgICAgICAgIGVsZW1lbnRTdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBwYXJzZXIub25jbG9zZXRhZyA9ICgpID0+IHtcbiAgICAgICAgaWYgKGVsZW1lbnRTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0RWxlbWVudCA9IGVsZW1lbnRTdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50U3RhY2subGVuZ3RoID09PSAwICYmIGxhc3RFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkUmVzdWx0ID0gbGFzdEVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgcGFyc2VyLm9udGV4dCA9ICh0ZXh0KSA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50U3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50U3RhY2tbZWxlbWVudFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQudGV4dCArPSB0ZXh0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHBhcnNlci5vbmF0dHJpYnV0ZSA9IChhdHRyKSA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50U3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50U3RhY2tbZWxlbWVudFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQuYXR0cmlidXRlc1thdHRyLm5hbWVdID0gYXR0ci52YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gVHJ5IHRvIGZpbmQgWE1MIHN0cmluZyB3aXRoaW4gdHJpcGxlIGJhY2t0aWNrcy5cbiAgICBjb25zdCBtYXRjaCA9IC9gYGAoeG1sKT8oLiopYGBgL3MuZXhlYyhjbGVhbmVkU3RyaW5nKTtcbiAgICBjb25zdCB4bWxTdHJpbmcgPSBtYXRjaCA/IG1hdGNoWzJdIDogY2xlYW5lZFN0cmluZztcbiAgICBwYXJzZXIud3JpdGUoeG1sU3RyaW5nKS5jbG9zZSgpO1xuICAgIC8vIFJlbW92ZSB0aGUgWE1MIGRlY2xhcmF0aW9uIGlmIHByZXNlbnRcbiAgICBpZiAocGFyc2VkUmVzdWx0ICYmIHBhcnNlZFJlc3VsdC5uYW1lID09PSBcIj94bWxcIikge1xuICAgICAgICBwYXJzZWRSZXN1bHQgPSBwYXJzZWRSZXN1bHQuY2hpbGRyZW5bMF07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZVBhcnNlZFJlc3VsdChwYXJzZWRSZXN1bHQpO1xufVxuIl0sIm5hbWVzIjpbIkJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIiwiY29tcGFyZSIsInNheCIsIlhNTF9GT1JNQVRfSU5TVFJVQ1RJT05TIiwiWE1MT3V0cHV0UGFyc2VyIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwidGFncyIsImxjX25hbWUiLCJfZGlmZiIsInByZXYiLCJuZXh0IiwidW5kZWZpbmVkIiwib3AiLCJwYXRoIiwicGFyc2VQYXJ0aWFsUmVzdWx0IiwiZ2VuZXJhdGlvbnMiLCJwYXJzZVhNTE1hcmtkb3duIiwidGV4dCIsInBhcnNlIiwiZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zIiwid2l0aFRhZ3MiLCJsZW5ndGgiLCJyZXBsYWNlIiwiam9pbiIsInN0cmlwIiwic3BsaXQiLCJtYXAiLCJsaW5lIiwidHJpbSIsInBhcnNlUGFyc2VkUmVzdWx0IiwiaW5wdXQiLCJrZXlzIiwicmVzdWx0IiwiY2hpbGRyZW4iLCJuYW1lIiwicyIsImNsZWFuZWRTdHJpbmciLCJwYXJzZXIiLCJwYXJzZWRSZXN1bHQiLCJlbGVtZW50U3RhY2siLCJvbm9wZW50YWciLCJub2RlIiwiZWxlbWVudCIsImF0dHJpYnV0ZXMiLCJpc1NlbGZDbG9zaW5nIiwicGFyZW50RWxlbWVudCIsInB1c2giLCJvbmNsb3NldGFnIiwibGFzdEVsZW1lbnQiLCJwb3AiLCJvbnRleHQiLCJjdXJyZW50RWxlbWVudCIsIm9uYXR0cmlidXRlIiwiYXR0ciIsIm1hdGNoIiwiZXhlYyIsInhtbFN0cmluZyIsIndyaXRlIiwiY2xvc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/outputs.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/core/dist/outputs.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGenerationChunk: () => (/* binding */ ChatGenerationChunk),\n/* harmony export */   GenerationChunk: () => (/* binding */ GenerationChunk),\n/* harmony export */   RUN_KEY: () => (/* binding */ RUN_KEY)\n/* harmony export */ });\nconst RUN_KEY = \"__run\";\n/**\n * Chunk of a single generation. Used for streaming.\n */ class GenerationChunk {\n    constructor(fields){\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"generationInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.text = fields.text;\n        this.generationInfo = fields.generationInfo;\n    }\n    concat(chunk) {\n        return new GenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo\n            }\n        });\n    }\n}\nclass ChatGenerationChunk extends GenerationChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = fields.message;\n    }\n    concat(chunk) {\n        return new ChatGenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo\n            },\n            message: this.message.concat(chunk.message)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxNQUFNQSxVQUFVLFFBQVE7QUFDL0I7O0NBRUMsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsOERBQThEO1FBQzlETCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQjtZQUMxQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUdQLE9BQU9PLElBQUk7UUFDdkIsSUFBSSxDQUFDQyxjQUFjLEdBQUdSLE9BQU9RLGNBQWM7SUFDL0M7SUFDQUMsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJWixnQkFBZ0I7WUFDdkJTLE1BQU0sSUFBSSxDQUFDQSxJQUFJLEdBQUdHLE1BQU1ILElBQUk7WUFDNUJDLGdCQUFnQjtnQkFDWixHQUFHLElBQUksQ0FBQ0EsY0FBYztnQkFDdEIsR0FBR0UsTUFBTUYsY0FBYztZQUMzQjtRQUNKO0lBQ0o7QUFDSjtBQUNPLE1BQU1HLDRCQUE0QmI7SUFDckNDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDTSxPQUFPLEdBQUdaLE9BQU9ZLE9BQU87SUFDakM7SUFDQUgsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJQyxvQkFBb0I7WUFDM0JKLE1BQU0sSUFBSSxDQUFDQSxJQUFJLEdBQUdHLE1BQU1ILElBQUk7WUFDNUJDLGdCQUFnQjtnQkFDWixHQUFHLElBQUksQ0FBQ0EsY0FBYztnQkFDdEIsR0FBR0UsTUFBTUYsY0FBYztZQUMzQjtZQUNBSSxTQUFTLElBQUksQ0FBQ0EsT0FBTyxDQUFDSCxNQUFNLENBQUNDLE1BQU1FLE9BQU87UUFDOUM7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dHMuanM/ZDc4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUlVOX0tFWSA9IFwiX19ydW5cIjtcbi8qKlxuICogQ2h1bmsgb2YgYSBzaW5nbGUgZ2VuZXJhdGlvbi4gVXNlZCBmb3Igc3RyZWFtaW5nLlxuICovXG5leHBvcnQgY2xhc3MgR2VuZXJhdGlvbkNodW5rIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGV4dFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZW5lcmF0aW9uSW5mb1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRleHQgPSBmaWVsZHMudGV4dDtcbiAgICAgICAgdGhpcy5nZW5lcmF0aW9uSW5mbyA9IGZpZWxkcy5nZW5lcmF0aW9uSW5mbztcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgR2VuZXJhdGlvbkNodW5rKHtcbiAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCArIGNodW5rLnRleHQsXG4gICAgICAgICAgICBnZW5lcmF0aW9uSW5mbzoge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2VuZXJhdGlvbkluZm8sXG4gICAgICAgICAgICAgICAgLi4uY2h1bmsuZ2VuZXJhdGlvbkluZm8sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hhdEdlbmVyYXRpb25DaHVuayBleHRlbmRzIEdlbmVyYXRpb25DaHVuayB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1lc3NhZ2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZmllbGRzLm1lc3NhZ2U7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IENoYXRHZW5lcmF0aW9uQ2h1bmsoe1xuICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0ICsgY2h1bmsudGV4dCxcbiAgICAgICAgICAgIGdlbmVyYXRpb25JbmZvOiB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgICAgICAuLi5jaHVuay5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UuY29uY2F0KGNodW5rLm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUlVOX0tFWSIsIkdlbmVyYXRpb25DaHVuayIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsInRleHQiLCJnZW5lcmF0aW9uSW5mbyIsImNvbmNhdCIsImNodW5rIiwiQ2hhdEdlbmVyYXRpb25DaHVuayIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/outputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompt_values.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompt_values.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePromptValue: () => (/* binding */ BasePromptValue),\n/* harmony export */   ChatPromptValue: () => (/* binding */ ChatPromptValue),\n/* harmony export */   ImagePromptValue: () => (/* binding */ ImagePromptValue),\n/* harmony export */   StringPromptValue: () => (/* binding */ StringPromptValue)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n\n/**\n * Base PromptValue class. All prompt values should extend this class.\n */ class BasePromptValue extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n}\n/**\n * Represents a prompt value as a string. It extends the BasePromptValue\n * class and overrides the toString and toChatMessages methods.\n */ class StringPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"StringPromptValue\";\n    }\n    constructor(value){\n        super({\n            value\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    toChatMessages() {\n        return [\n            new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(this.value)\n        ];\n    }\n}\n/**\n * Class that represents a chat prompt value. It extends the\n * BasePromptValue and includes an array of BaseMessage instances.\n */ class ChatPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ChatPromptValue\";\n    }\n    constructor(fields){\n        if (Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                messages: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = fields.messages;\n    }\n    toString() {\n        return (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.getBufferString)(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\n/**\n * Class that represents an image prompt value. It extends the\n * BasePromptValue and includes an ImageURL instance.\n */ class ImagePromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ImagePromptValue\";\n    }\n    constructor(fields){\n        if (!(\"imageUrl\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                imageUrl: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"imageUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @ignore */ Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.imageUrl = fields.imageUrl;\n    }\n    toString() {\n        return this.imageUrl.url;\n    }\n    toChatMessages() {\n        return [\n            new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage({\n                content: [\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            detail: this.imageUrl.detail,\n                            url: this.imageUrl.url\n                        }\n                    }\n                ]\n            })\n        ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/base.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePromptTemplate: () => (/* binding */ BasePromptTemplate)\n/* harmony export */ });\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\n\n/**\n * Base class for prompt templates. Exposes a format method that returns a\n * string prompt given a set of input values.\n */ class BasePromptTemplate extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    get lc_attributes() {\n        return {\n            partialVariables: undefined\n        };\n    }\n    constructor(input){\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompts\",\n                this._getPromptType()\n            ]\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"partialVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { inputVariables } = input;\n        if (inputVariables.includes(\"stop\")) {\n            throw new Error(\"Cannot have an input variable named 'stop', as it is used internally, please rename.\");\n        }\n        Object.assign(this, input);\n    }\n    /**\n     * Merges partial variables and user variables.\n     * @param userVariables The user variables to merge with the partial variables.\n     * @returns A Promise that resolves to an object containing the merged variables.\n     */ async mergePartialAndUserVariables(userVariables) {\n        const partialVariables = this.partialVariables ?? {};\n        const partialValues = {};\n        for (const [key, value] of Object.entries(partialVariables)){\n            if (typeof value === \"string\") {\n                partialValues[key] = value;\n            } else {\n                partialValues[key] = await value();\n            }\n        }\n        const allKwargs = {\n            ...partialValues,\n            ...userVariables\n        };\n        return allKwargs;\n    }\n    /**\n     * Invokes the prompt template with the given input and options.\n     * @param input The input to invoke the prompt template with.\n     * @param options Optional configuration for the callback.\n     * @returns A Promise that resolves to the output of the prompt template.\n     */ async invoke(input, options) {\n        return this._callWithConfig((input)=>this.formatPromptValue(input), input, {\n            ...options,\n            runType: \"prompt\"\n        });\n    }\n    /**\n     * Return a json-like object representing this prompt template.\n     * @deprecated\n     */ serialize() {\n        throw new Error(\"Use .toJSON() instead\");\n    }\n    /**\n     * @deprecated\n     * Load a prompt template from a json-like object describing it.\n     *\n     * @remarks\n     * Deserializing needs to be async because templates (e.g. {@link FewShotPromptTemplate}) can\n     * reference remote resources that we read asynchronously with a web\n     * request.\n     */ static async deserialize(data) {\n        switch(data._type){\n            case \"prompt\":\n                {\n                    const { PromptTemplate } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./prompt.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/prompt.js\"));\n                    return PromptTemplate.deserialize(data);\n                }\n            case undefined:\n                {\n                    const { PromptTemplate } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./prompt.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/prompt.js\"));\n                    return PromptTemplate.deserialize({\n                        ...data,\n                        _type: \"prompt\"\n                    });\n                }\n            case \"few_shot\":\n                {\n                    const { FewShotPromptTemplate } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./few_shot.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/few_shot.js\"));\n                    return FewShotPromptTemplate.deserialize(data);\n                }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/chat.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/chat.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessagePromptTemplate: () => (/* binding */ AIMessagePromptTemplate),\n/* harmony export */   BaseChatPromptTemplate: () => (/* binding */ BaseChatPromptTemplate),\n/* harmony export */   BaseMessagePromptTemplate: () => (/* binding */ BaseMessagePromptTemplate),\n/* harmony export */   BaseMessageStringPromptTemplate: () => (/* binding */ BaseMessageStringPromptTemplate),\n/* harmony export */   ChatMessagePromptTemplate: () => (/* binding */ ChatMessagePromptTemplate),\n/* harmony export */   ChatPromptTemplate: () => (/* binding */ ChatPromptTemplate),\n/* harmony export */   HumanMessagePromptTemplate: () => (/* binding */ HumanMessagePromptTemplate),\n/* harmony export */   MessagesPlaceholder: () => (/* binding */ MessagesPlaceholder),\n/* harmony export */   SystemMessagePromptTemplate: () => (/* binding */ SystemMessagePromptTemplate)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../prompt_values.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/string.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/base.js\");\n/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/prompt.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./image.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/image.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/template.js\");\n// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\n\n\n\n\n\n\n\n\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */ class BaseMessagePromptTemplate extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_2__.Runnable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompts\",\n                \"chat\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    /**\n     * Calls the formatMessages method with the provided input and options.\n     * @param input Input for the formatMessages method\n     * @param options Optional BaseCallbackConfig\n     * @returns Formatted output messages\n     */ async invoke(input, options) {\n        return this._callWithConfig((input)=>this.formatMessages(input), input, {\n            ...options,\n            runType: \"prompt\"\n        });\n    }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */ class MessagesPlaceholder extends BaseMessagePromptTemplate {\n    static lc_name() {\n        return \"MessagesPlaceholder\";\n    }\n    constructor(fields){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                variableName: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"variableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"optional\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.variableName = fields.variableName;\n        this.optional = fields.optional ?? false;\n    }\n    get inputVariables() {\n        return [\n            this.variableName\n        ];\n    }\n    validateInputOrThrow(input, variableName) {\n        if (this.optional && !input) {\n            return false;\n        } else if (!input) {\n            const error = new Error(`Error: Field \"${variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: undefined`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        let isInputBaseMessage = false;\n        if (Array.isArray(input)) {\n            isInputBaseMessage = input.every((message)=>(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(message));\n        } else {\n            isInputBaseMessage = (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(input);\n        }\n        if (!isInputBaseMessage) {\n            const readableInput = typeof input === \"string\" ? input : JSON.stringify(input, null, 2);\n            const error = new Error(`Error: Field \"${variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: ${readableInput}`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        return true;\n    }\n    async formatMessages(values) {\n        this.validateInputOrThrow(values[this.variableName], this.variableName);\n        return values[this.variableName] ?? [];\n    }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */ class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n    constructor(fields){\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                prompt: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n    }\n    get inputVariables() {\n        return this.prompt.inputVariables;\n    }\n    async formatMessages(values) {\n        return [\n            await this.format(values)\n        ];\n    }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */ class BaseChatPromptTemplate extends _base_js__WEBPACK_IMPORTED_MODULE_4__.BasePromptTemplate {\n    constructor(input){\n        super(input);\n    }\n    async format(values) {\n        return (await this.formatPromptValue(values)).toString();\n    }\n    async formatPromptValue(values) {\n        const resultMessages = await this.formatMessages(values);\n        return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptValue(resultMessages);\n    }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */ class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"ChatMessagePromptTemplate\";\n    }\n    constructor(fields, role){\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                prompt: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    async format(values) {\n        return new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessage(await this.prompt.format(values), this.role);\n    }\n    static fromTemplate(template, role) {\n        return new this(_prompt_js__WEBPACK_IMPORTED_MODULE_5__.PromptTemplate.fromTemplate(template), role);\n    }\n}\nclass _StringImageMessagePromptTemplate extends BaseMessagePromptTemplate {\n    static _messageClass() {\n        throw new Error(\"Can not invoke _messageClass from inside _StringImageMessagePromptTemplate\");\n    }\n    constructor(/** @TODO When we come up with a better way to type prompt templates, fix this */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fields, additionalOptions){\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                prompt: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompts\",\n                \"chat\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"additionalOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"messageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // ChatMessage contains role field, others don't.\n        // Because of this, we have a separate class property for ChatMessage.\n        Object.defineProperty(this, \"chatMessageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n        if (Array.isArray(this.prompt)) {\n            let inputVariables = [];\n            this.prompt.forEach((prompt)=>{\n                if (\"inputVariables\" in prompt) {\n                    inputVariables = inputVariables.concat(prompt.inputVariables);\n                }\n            });\n            this.inputVariables = inputVariables;\n        } else {\n            this.inputVariables = this.prompt.inputVariables;\n        }\n        this.additionalOptions = additionalOptions ?? this.additionalOptions;\n    }\n    createMessage(content) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const constructor = this.constructor;\n        if (constructor._messageClass()) {\n            const MsgClass = constructor._messageClass();\n            return new MsgClass({\n                content\n            });\n        } else if (constructor.chatMessageClass) {\n            const MsgClass = constructor.chatMessageClass();\n            // Assuming ChatMessage constructor also takes a content argument\n            return new MsgClass({\n                content,\n                role: this.getRoleFromMessageClass(MsgClass.lc_name())\n            });\n        } else {\n            throw new Error(\"No message class defined\");\n        }\n    }\n    getRoleFromMessageClass(name) {\n        switch(name){\n            case \"HumanMessage\":\n                return \"human\";\n            case \"AIMessage\":\n                return \"ai\";\n            case \"SystemMessage\":\n                return \"system\";\n            case \"ChatMessage\":\n                return \"chat\";\n            default:\n                throw new Error(\"Invalid message class name\");\n        }\n    }\n    static fromTemplate(template, additionalOptions) {\n        if (typeof template === \"string\") {\n            return new this(_prompt_js__WEBPACK_IMPORTED_MODULE_5__.PromptTemplate.fromTemplate(template));\n        }\n        const prompt = [];\n        for (const item of template){\n            if (typeof item === \"string\" || typeof item === \"object\" && \"text\" in item) {\n                let text = \"\";\n                if (typeof item === \"string\") {\n                    text = item;\n                } else if (typeof item.text === \"string\") {\n                    text = item.text ?? \"\";\n                }\n                prompt.push(_prompt_js__WEBPACK_IMPORTED_MODULE_5__.PromptTemplate.fromTemplate(text));\n            } else if (typeof item === \"object\" && \"image_url\" in item) {\n                let imgTemplate = item.image_url ?? \"\";\n                let imgTemplateObject;\n                let inputVariables = [];\n                if (typeof imgTemplate === \"string\") {\n                    const parsedTemplate = (0,_template_js__WEBPACK_IMPORTED_MODULE_7__.parseFString)(imgTemplate);\n                    const variables = parsedTemplate.flatMap((item)=>item.type === \"variable\" ? [\n                            item.name\n                        ] : []);\n                    if ((variables?.length ?? 0) > 0) {\n                        if (variables.length > 1) {\n                            throw new Error(`Only one format variable allowed per image template.\\nGot: ${variables}\\nFrom: ${imgTemplate}`);\n                        }\n                        inputVariables = [\n                            variables[0]\n                        ];\n                    } else {\n                        inputVariables = [];\n                    }\n                    imgTemplate = {\n                        url: imgTemplate\n                    };\n                    imgTemplateObject = new _image_js__WEBPACK_IMPORTED_MODULE_6__.ImagePromptTemplate({\n                        template: imgTemplate,\n                        inputVariables\n                    });\n                } else if (typeof imgTemplate === \"object\") {\n                    if (\"url\" in imgTemplate) {\n                        const parsedTemplate = (0,_template_js__WEBPACK_IMPORTED_MODULE_7__.parseFString)(imgTemplate.url);\n                        inputVariables = parsedTemplate.flatMap((item)=>item.type === \"variable\" ? [\n                                item.name\n                            ] : []);\n                    } else {\n                        inputVariables = [];\n                    }\n                    imgTemplateObject = new _image_js__WEBPACK_IMPORTED_MODULE_6__.ImagePromptTemplate({\n                        template: imgTemplate,\n                        inputVariables\n                    });\n                } else {\n                    throw new Error(\"Invalid image template\");\n                }\n                prompt.push(imgTemplateObject);\n            }\n        }\n        return new this({\n            prompt,\n            additionalOptions\n        });\n    }\n    async format(input) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (this.prompt instanceof _string_js__WEBPACK_IMPORTED_MODULE_3__.BaseStringPromptTemplate) {\n            const text = await this.prompt.format(input);\n            return this.createMessage(text);\n        } else {\n            const content = [];\n            for (const prompt of this.prompt){\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let inputs = {};\n                if (!(\"inputVariables\" in prompt)) {\n                    throw new Error(`Prompt ${prompt} does not have inputVariables defined.`);\n                }\n                for (const item of prompt.inputVariables){\n                    if (!inputs) {\n                        inputs = {\n                            [item]: input[item]\n                        };\n                    }\n                    inputs = {\n                        ...inputs,\n                        [item]: input[item]\n                    };\n                }\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (prompt instanceof _string_js__WEBPACK_IMPORTED_MODULE_3__.BaseStringPromptTemplate) {\n                    const formatted = await prompt.format(inputs);\n                    content.push({\n                        type: \"text\",\n                        text: formatted\n                    });\n                /** @TODO replace this */ // eslint-disable-next-line no-instanceof/no-instanceof\n                } else if (prompt instanceof _image_js__WEBPACK_IMPORTED_MODULE_6__.ImagePromptTemplate) {\n                    const formatted = await prompt.format(inputs);\n                    content.push({\n                        type: \"image_url\",\n                        image_url: formatted\n                    });\n                }\n            }\n            return this.createMessage(content);\n        }\n    }\n    async formatMessages(values) {\n        return [\n            await this.format(values)\n        ];\n    }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = HumanMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */ class HumanMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage;\n    }\n    static lc_name() {\n        return \"HumanMessagePromptTemplate\";\n    }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */ class AIMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage;\n    }\n    static lc_name() {\n        return \"AIMessagePromptTemplate\";\n    }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */ class SystemMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessage;\n    }\n    static lc_name() {\n        return \"SystemMessagePromptTemplate\";\n    }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n    return typeof baseMessagePromptTemplateLike.formatMessages === \"function\";\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike) {\n    if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) || (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(messagePromptTemplateLike)) {\n        return messagePromptTemplateLike;\n    }\n    const message = (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage)(messagePromptTemplateLike);\n    if (message._getType() === \"human\") {\n        return HumanMessagePromptTemplate.fromTemplate(message.content);\n    } else if (message._getType() === \"ai\") {\n        return AIMessagePromptTemplate.fromTemplate(message.content);\n    } else if (message._getType() === \"system\") {\n        return SystemMessagePromptTemplate.fromTemplate(message.content);\n    } else if (_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessage.isInstance(message)) {\n        return ChatMessagePromptTemplate.fromTemplate(message.content, message.role);\n    } else {\n        throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\n    }\n}\nfunction isMessagesPlaceholder(x) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return x.constructor.lc_name() === \"MessagesPlaceholder\";\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant.\"],\n *   message,\n * ]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */ class ChatPromptTemplate extends BaseChatPromptTemplate {\n    static lc_name() {\n        return \"ChatPromptTemplate\";\n    }\n    get lc_aliases() {\n        return {\n            promptMessages: \"messages\"\n        };\n    }\n    constructor(input){\n        super(input);\n        Object.defineProperty(this, \"promptMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            const inputVariablesMessages = new Set();\n            for (const promptMessage of this.promptMessages){\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (promptMessage instanceof _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage) continue;\n                for (const inputVariable of promptMessage.inputVariables){\n                    inputVariablesMessages.add(inputVariable);\n                }\n            }\n            const totalInputVariables = this.inputVariables;\n            const inputVariablesInstance = new Set(this.partialVariables ? totalInputVariables.concat(Object.keys(this.partialVariables)) : totalInputVariables);\n            const difference = new Set([\n                ...inputVariablesInstance\n            ].filter((x)=>!inputVariablesMessages.has(x)));\n            if (difference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...difference\n                ]}\\` are not used in any of the prompt messages.`);\n            }\n            const otherDifference = new Set([\n                ...inputVariablesMessages\n            ].filter((x)=>!inputVariablesInstance.has(x)));\n            if (otherDifference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...otherDifference\n                ]}\\` are used in prompt messages but not in the prompt template.`);\n            }\n        }\n    }\n    _getPromptType() {\n        return \"chat\";\n    }\n    async _parseImagePrompts(message, inputValues) {\n        if (typeof message.content === \"string\") {\n            return message;\n        }\n        const formattedMessageContent = await Promise.all(message.content.map(async (item)=>{\n            if (item.type !== \"image_url\") {\n                return item;\n            }\n            let imageUrl = \"\";\n            if (typeof item.image_url === \"string\") {\n                imageUrl = item.image_url;\n            } else {\n                imageUrl = item.image_url.url;\n            }\n            const promptTemplatePlaceholder = _prompt_js__WEBPACK_IMPORTED_MODULE_5__.PromptTemplate.fromTemplate(imageUrl);\n            const formattedUrl = await promptTemplatePlaceholder.format(inputValues);\n            if (typeof item.image_url !== \"string\" && \"url\" in item.image_url) {\n                // eslint-disable-next-line no-param-reassign\n                item.image_url.url = formattedUrl;\n            } else {\n                // eslint-disable-next-line no-param-reassign\n                item.image_url = formattedUrl;\n            }\n            return item;\n        }));\n        // eslint-disable-next-line no-param-reassign\n        message.content = formattedMessageContent;\n        return message;\n    }\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let resultMessages = [];\n        for (const promptMessage of this.promptMessages){\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage) {\n                resultMessages.push(await this._parseImagePrompts(promptMessage, allValues));\n            } else {\n                const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable)=>{\n                    if (!(inputVariable in allValues) && !(isMessagesPlaceholder(promptMessage) && promptMessage.optional)) {\n                        throw new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``);\n                    }\n                    acc[inputVariable] = allValues[inputVariable];\n                    return acc;\n                }, {});\n                const message = await promptMessage.formatMessages(inputValues);\n                resultMessages = resultMessages.concat(message);\n            }\n        }\n        return resultMessages;\n    }\n    async partial(values) {\n        // This is implemented in a way it doesn't require making\n        // BaseMessagePromptTemplate aware of .partial()\n        const newInputVariables = this.inputVariables.filter((iv)=>!(iv in values));\n        const newPartialVariables = {\n            ...this.partialVariables ?? {},\n            ...values\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables\n        };\n        return new ChatPromptTemplate(promptDict);\n    }\n    /**\n     * Load prompt template from a template f-string\n     */ static fromTemplate(template) {\n        const prompt = _prompt_js__WEBPACK_IMPORTED_MODULE_5__.PromptTemplate.fromTemplate(template);\n        const humanTemplate = new HumanMessagePromptTemplate({\n            prompt\n        });\n        return this.fromMessages([\n            humanTemplate\n        ]);\n    }\n    /**\n     * Create a chat model-specific prompt from individual chat messages\n     * or message-like tuples.\n     * @param promptMessages Messages to be passed to the chat model\n     * @returns A new ChatPromptTemplate\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromMessages(promptMessages) {\n        const flattenedMessages = promptMessages.reduce((acc, promptMessage)=>acc.concat(// eslint-disable-next-line no-instanceof/no-instanceof\n            promptMessage instanceof ChatPromptTemplate ? promptMessage.promptMessages : [\n                _coerceMessagePromptTemplateLike(promptMessage)\n            ]), []);\n        const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage)=>// eslint-disable-next-line no-instanceof/no-instanceof\n            promptMessage instanceof ChatPromptTemplate ? Object.assign(acc, promptMessage.partialVariables) : acc, Object.create(null));\n        const inputVariables = new Set();\n        for (const promptMessage of flattenedMessages){\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage) continue;\n            for (const inputVariable of promptMessage.inputVariables){\n                if (inputVariable in flattenedPartialVariables) {\n                    continue;\n                }\n                inputVariables.add(inputVariable);\n            }\n        }\n        return new ChatPromptTemplate({\n            inputVariables: [\n                ...inputVariables\n            ],\n            promptMessages: flattenedMessages,\n            partialVariables: flattenedPartialVariables\n        });\n    }\n    /** @deprecated Renamed to .fromMessages */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromPromptMessages(promptMessages) {\n        return this.fromMessages(promptMessages);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/chat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/few_shot.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/few_shot.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FewShotChatMessagePromptTemplate: () => (/* binding */ FewShotChatMessagePromptTemplate),\n/* harmony export */   FewShotPromptTemplate: () => (/* binding */ FewShotPromptTemplate)\n/* harmony export */ });\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/string.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/template.js\");\n/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/prompt.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/chat.js\");\n\n\n\n\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */ class FewShotPromptTemplate extends _string_js__WEBPACK_IMPORTED_MODULE_0__.BaseStringPromptTemplate {\n    constructor(input){\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            (0,_template_js__WEBPACK_IMPORTED_MODULE_1__.checkValidTemplate)(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    static lc_name() {\n        return \"FewShotPromptTemplate\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv)=>!(iv in values));\n        const newPartialVariables = {\n            ...this.partialVariables ?? {},\n            ...values\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */ async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example)=>this.examplePrompt.format(example)));\n        const template = [\n            this.prefix,\n            ...exampleStrings,\n            this.suffix\n        ].join(this.exampleSeparator);\n        return (0,_template_js__WEBPACK_IMPORTED_MODULE_1__.renderTemplate)(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await _prompt_js__WEBPACK_IMPORTED_MODULE_2__.PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        } else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format\n        });\n    }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */ class FewShotChatMessagePromptTemplate extends _chat_js__WEBPACK_IMPORTED_MODULE_3__.BaseChatPromptTemplate {\n    _getPromptType() {\n        return \"few_shot_chat\";\n    }\n    static lc_name() {\n        return \"FewShotChatMessagePromptTemplate\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.examples = fields.examples;\n        this.examplePrompt = fields.examplePrompt;\n        this.exampleSeparator = fields.exampleSeparator ?? \"\\n\\n\";\n        this.exampleSelector = fields.exampleSelector;\n        this.prefix = fields.prefix ?? \"\";\n        this.suffix = fields.suffix ?? \"\";\n        this.templateFormat = fields.templateFormat ?? \"f-string\";\n        this.validateTemplate = fields.validateTemplate ?? true;\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            (0,_template_js__WEBPACK_IMPORTED_MODULE_1__.checkValidTemplate)(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    /**\n     * Formats the list of values and returns a list of formatted messages.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */ async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let examples = await this.getExamples(allValues);\n        examples = examples.map((example)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const result = {};\n            this.examplePrompt.inputVariables.forEach((inputVariable)=>{\n                result[inputVariable] = example[inputVariable];\n            });\n            return result;\n        });\n        const messages = [];\n        for (const example of examples){\n            const exampleMessages = await this.examplePrompt.formatMessages(example);\n            messages.push(...exampleMessages);\n        }\n        return messages;\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */ async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleMessages = await Promise.all(examples.map((example)=>this.examplePrompt.formatMessages(example)));\n        const exampleStrings = exampleMessages.flat().map((message)=>message.content);\n        const template = [\n            this.prefix,\n            ...exampleStrings,\n            this.suffix\n        ].join(this.exampleSeparator);\n        return (0,_template_js__WEBPACK_IMPORTED_MODULE_1__.renderTemplate)(template, this.templateFormat, allValues);\n    }\n    /**\n     * Partially formats the prompt with the given values.\n     * @param values The values to partially format the prompt with.\n     * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n     */ async partial(values) {\n        const newInputVariables = this.inputVariables.filter((variable)=>!(variable in values));\n        const newPartialVariables = {\n            ...this.partialVariables ?? {},\n            ...values\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables\n        };\n        return new FewShotChatMessagePromptTemplate(promptDict);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/few_shot.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/image.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/image.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImagePromptTemplate: () => (/* binding */ ImagePromptTemplate)\n/* harmony export */ });\n/* harmony import */ var _prompt_values_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../prompt_values.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/base.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/template.js\");\n\n\n\n/**\n * An image prompt template for a multimodal model.\n */ class ImagePromptTemplate extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BasePromptTemplate {\n    static lc_name() {\n        return \"ImagePromptTemplate\";\n    }\n    constructor(input){\n        super(input);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompts\",\n                \"image\"\n            ]\n        });\n        Object.defineProperty(this, \"template\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.template = input.template;\n        this.templateFormat = input.templateFormat ?? this.templateFormat;\n        this.validateTemplate = input.validateTemplate ?? this.validateTemplate;\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            (0,_template_js__WEBPACK_IMPORTED_MODULE_2__.checkValidTemplate)([\n                {\n                    type: \"image_url\",\n                    image_url: this.template\n                }\n            ], this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"prompt\";\n    }\n    /**\n     * Partially applies values to the prompt template.\n     * @param values The values to be partially applied to the prompt template.\n     * @returns A new instance of ImagePromptTemplate with the partially applied values.\n     */ async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv)=>!(iv in values));\n        const newPartialVariables = {\n            ...this.partialVariables ?? {},\n            ...values\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables\n        };\n        return new ImagePromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt template with the provided values.\n     * @param values The values to be used to format the prompt template.\n     * @returns A promise that resolves to a string which is the formatted prompt.\n     */ async format(values) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const formatted = {};\n        for (const [key, value] of Object.entries(this.template)){\n            if (typeof value === \"string\") {\n                formatted[key] = value.replace(/{([^{}]*)}/g, (match, group)=>{\n                    const replacement = values[group];\n                    return typeof replacement === \"string\" || typeof replacement === \"number\" ? String(replacement) : match;\n                });\n            } else {\n                formatted[key] = value;\n            }\n        }\n        const url = values.url || formatted.url;\n        const detail = values.detail || formatted.detail;\n        if (!url) {\n            throw new Error(\"Must provide either an image URL.\");\n        }\n        if (typeof url !== \"string\") {\n            throw new Error(\"url must be a string.\");\n        }\n        const output = {\n            url\n        };\n        if (detail) {\n            output.detail = detail;\n        }\n        return output;\n    }\n    /**\n     * Formats the prompt given the input values and returns a formatted\n     * prompt value.\n     * @param values The input values to format the prompt.\n     * @returns A Promise that resolves to a formatted prompt value.\n     */ async formatPromptValue(values) {\n        const formattedPrompt = await this.format(values);\n        return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_0__.ImagePromptValue(formattedPrompt);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/image.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessagePromptTemplate: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.AIMessagePromptTemplate),\n/* harmony export */   BaseChatPromptTemplate: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.BaseChatPromptTemplate),\n/* harmony export */   BaseMessagePromptTemplate: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessagePromptTemplate),\n/* harmony export */   BaseMessageStringPromptTemplate: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageStringPromptTemplate),\n/* harmony export */   BasePromptTemplate: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptTemplate),\n/* harmony export */   BaseStringPromptTemplate: () => (/* reexport safe */ _string_js__WEBPACK_IMPORTED_MODULE_6__.BaseStringPromptTemplate),\n/* harmony export */   ChatMessagePromptTemplate: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.ChatMessagePromptTemplate),\n/* harmony export */   ChatPromptTemplate: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptTemplate),\n/* harmony export */   DEFAULT_FORMATTER_MAPPING: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_FORMATTER_MAPPING),\n/* harmony export */   DEFAULT_PARSER_MAPPING: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_PARSER_MAPPING),\n/* harmony export */   FewShotChatMessagePromptTemplate: () => (/* reexport safe */ _few_shot_js__WEBPACK_IMPORTED_MODULE_2__.FewShotChatMessagePromptTemplate),\n/* harmony export */   FewShotPromptTemplate: () => (/* reexport safe */ _few_shot_js__WEBPACK_IMPORTED_MODULE_2__.FewShotPromptTemplate),\n/* harmony export */   HumanMessagePromptTemplate: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessagePromptTemplate),\n/* harmony export */   ImagePromptTemplate: () => (/* reexport safe */ _image_js__WEBPACK_IMPORTED_MODULE_8__.ImagePromptTemplate),\n/* harmony export */   MessagesPlaceholder: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.MessagesPlaceholder),\n/* harmony export */   PipelinePromptTemplate: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_3__.PipelinePromptTemplate),\n/* harmony export */   PromptTemplate: () => (/* reexport safe */ _prompt_js__WEBPACK_IMPORTED_MODULE_4__.PromptTemplate),\n/* harmony export */   SystemMessagePromptTemplate: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.SystemMessagePromptTemplate),\n/* harmony export */   checkValidTemplate: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.checkValidTemplate),\n/* harmony export */   interpolateFString: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.interpolateFString),\n/* harmony export */   parseFString: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.parseFString),\n/* harmony export */   parseTemplate: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.parseTemplate),\n/* harmony export */   renderTemplate: () => (/* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.renderTemplate)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/chat.js\");\n/* harmony import */ var _few_shot_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./few_shot.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/few_shot.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/pipeline.js\");\n/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/prompt.js\");\n/* harmony import */ var _serde_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./serde.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/serde.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./string.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/string.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/template.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./image.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/image.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcHJvbXB0cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwQjtBQUNBO0FBQ0k7QUFDQTtBQUNGO0FBQ0Q7QUFDQztBQUNFO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcHJvbXB0cy9pbmRleC5qcz9kMjI5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NoYXQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zld19zaG90LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9waXBlbGluZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcHJvbXB0LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZXJkZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90ZW1wbGF0ZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW1hZ2UuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/pipeline.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/pipeline.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PipelinePromptTemplate: () => (/* binding */ PipelinePromptTemplate)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/chat.js\");\n\n\n/**\n * Class that handles a sequence of prompts, each of which may require\n * different input variables. Includes methods for formatting these\n * prompts, extracting required input values, and handling partial\n * prompts.\n * @example\n * ```typescript\n * const composedPrompt = new PipelinePromptTemplate({\n *   pipelinePrompts: [\n *     {\n *       name: \"introduction\",\n *       prompt: PromptTemplate.fromTemplate(`You are impersonating {person}.`),\n *     },\n *     {\n *       name: \"example\",\n *       prompt: PromptTemplate.fromTemplate(\n *         `Here's an example of an interaction:\n * Q: {example_q}\n * A: {example_a}`,\n *       ),\n *     },\n *     {\n *       name: \"start\",\n *       prompt: PromptTemplate.fromTemplate(\n *         `Now, do this for real!\n * Q: {input}\n * A:`,\n *       ),\n *     },\n *   ],\n *   finalPrompt: PromptTemplate.fromTemplate(\n *     `{introduction}\n * {example}\n * {start}`,\n *   ),\n * });\n *\n * const formattedPrompt = await composedPrompt.format({\n *   person: \"Elon Musk\",\n *   example_q: `What's your favorite car?`,\n *   example_a: \"Tesla\",\n *   input: `What's your favorite social media site?`,\n * });\n * ```\n */ class PipelinePromptTemplate extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptTemplate {\n    static lc_name() {\n        return \"PipelinePromptTemplate\";\n    }\n    constructor(input){\n        super({\n            ...input,\n            inputVariables: []\n        });\n        Object.defineProperty(this, \"pipelinePrompts\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"finalPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pipelinePrompts = input.pipelinePrompts;\n        this.finalPrompt = input.finalPrompt;\n        this.inputVariables = this.computeInputValues();\n    }\n    /**\n     * Computes the input values required by the pipeline prompts.\n     * @returns Array of input values required by the pipeline prompts.\n     */ computeInputValues() {\n        const intermediateValues = this.pipelinePrompts.map((pipelinePrompt)=>pipelinePrompt.name);\n        const inputValues = this.pipelinePrompts.map((pipelinePrompt)=>pipelinePrompt.prompt.inputVariables.filter((inputValue)=>!intermediateValues.includes(inputValue))).flat();\n        return [\n            ...new Set(inputValues)\n        ];\n    }\n    static extractRequiredInputValues(allValues, requiredValueNames) {\n        return requiredValueNames.reduce((requiredValues, valueName)=>{\n            // eslint-disable-next-line no-param-reassign\n            requiredValues[valueName] = allValues[valueName];\n            return requiredValues;\n        }, {});\n    }\n    /**\n     * Formats the pipeline prompts based on the provided input values.\n     * @param values Input values to format the pipeline prompts.\n     * @returns Promise that resolves with the formatted input values.\n     */ async formatPipelinePrompts(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        for (const { name: pipelinePromptName, prompt: pipelinePrompt } of this.pipelinePrompts){\n            const pipelinePromptInputValues = PipelinePromptTemplate.extractRequiredInputValues(allValues, pipelinePrompt.inputVariables);\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (pipelinePrompt instanceof _chat_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptTemplate) {\n                allValues[pipelinePromptName] = await pipelinePrompt.formatMessages(pipelinePromptInputValues);\n            } else {\n                allValues[pipelinePromptName] = await pipelinePrompt.format(pipelinePromptInputValues);\n            }\n        }\n        return PipelinePromptTemplate.extractRequiredInputValues(allValues, this.finalPrompt.inputVariables);\n    }\n    /**\n     * Formats the final prompt value based on the provided input values.\n     * @param values Input values to format the final prompt value.\n     * @returns Promise that resolves with the formatted final prompt value.\n     */ async formatPromptValue(values) {\n        return this.finalPrompt.formatPromptValue(await this.formatPipelinePrompts(values));\n    }\n    async format(values) {\n        return this.finalPrompt.format(await this.formatPipelinePrompts(values));\n    }\n    /**\n     * Handles partial prompts, which are prompts that have been partially\n     * filled with input values.\n     * @param values Partial input values.\n     * @returns Promise that resolves with a new PipelinePromptTemplate instance with updated input variables.\n     */ async partial(values) {\n        const promptDict = {\n            ...this\n        };\n        promptDict.inputVariables = this.inputVariables.filter((iv)=>!(iv in values));\n        promptDict.partialVariables = {\n            ...this.partialVariables ?? {},\n            ...values\n        };\n        return new PipelinePromptTemplate(promptDict);\n    }\n    serialize() {\n        throw new Error(\"Not implemented.\");\n    }\n    _getPromptType() {\n        return \"pipeline\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/prompt.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/prompt.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PromptTemplate: () => (/* binding */ PromptTemplate)\n/* harmony export */ });\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/string.js\");\n/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/template.js\");\n// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\n\n\n/**\n * Schema to represent a basic prompt for an LLM.\n * @augments BasePromptTemplate\n * @augments PromptTemplateInput\n *\n * @example\n * ```ts\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * const prompt = new PromptTemplate({\n *   inputVariables: [\"foo\"],\n *   template: \"Say {foo}\",\n * });\n * ```\n */ class PromptTemplate extends _string_js__WEBPACK_IMPORTED_MODULE_0__.BaseStringPromptTemplate {\n    static lc_name() {\n        return \"PromptTemplate\";\n    }\n    constructor(input){\n        super(input);\n        Object.defineProperty(this, \"template\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            (0,_template_js__WEBPACK_IMPORTED_MODULE_1__.checkValidTemplate)(this.template, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"prompt\";\n    }\n    /**\n     * Formats the prompt template with the provided values.\n     * @param values The values to be used to format the prompt template.\n     * @returns A promise that resolves to a string which is the formatted prompt.\n     */ async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        return (0,_template_js__WEBPACK_IMPORTED_MODULE_1__.renderTemplate)(this.template, this.templateFormat, allValues);\n    }\n    /**\n     * Take examples in list format with prefix and suffix to create a prompt.\n     *\n     * Intended to be used a a way to dynamically create a prompt from examples.\n     *\n     * @param examples - List of examples to use in the prompt.\n     * @param suffix - String to go after the list of examples. Should generally set up the user's input.\n     * @param inputVariables - A list of variable names the final prompt template will expect\n     * @param exampleSeparator - The separator to use in between examples\n     * @param prefix - String that should go before any examples. Generally includes examples.\n     *\n     * @returns The final prompt template generated.\n     */ static fromExamples(examples, suffix, inputVariables, exampleSeparator = \"\\n\\n\", prefix = \"\") {\n        const template = [\n            prefix,\n            ...examples,\n            suffix\n        ].join(exampleSeparator);\n        return new PromptTemplate({\n            inputVariables,\n            template\n        });\n    }\n    /**\n     * Load prompt template from a template f-string\n     */ static fromTemplate(template, { templateFormat = \"f-string\", ...rest } = {}) {\n        const names = new Set();\n        (0,_template_js__WEBPACK_IMPORTED_MODULE_1__.parseTemplate)(template, templateFormat).forEach((node)=>{\n            if (node.type === \"variable\") {\n                names.add(node.name);\n            }\n        });\n        return new PromptTemplate({\n            // Rely on extracted types\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            inputVariables: [\n                ...names\n            ],\n            templateFormat,\n            template,\n            ...rest\n        });\n    }\n    /**\n     * Partially applies values to the prompt template.\n     * @param values The values to be partially applied to the prompt template.\n     * @returns A new instance of PromptTemplate with the partially applied values.\n     */ async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv)=>!(iv in values));\n        const newPartialVariables = {\n            ...this.partialVariables ?? {},\n            ...values\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables\n        };\n        return new PromptTemplate(promptDict);\n    }\n    serialize() {\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Cannot serialize a prompt template with an output parser\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            template: this.template,\n            template_format: this.templateFormat\n        };\n    }\n    static async deserialize(data) {\n        if (!data.template) {\n            throw new Error(\"Prompt template must have a template\");\n        }\n        const res = new PromptTemplate({\n            inputVariables: data.input_variables,\n            template: data.template,\n            templateFormat: data.template_format\n        });\n        return res;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/prompt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/serde.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/serde.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcHJvbXB0cy9zZXJkZS5qcyIsIm1hcHBpbmdzIjoiO0FBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcHJvbXB0cy9zZXJkZS5qcz8wNDY0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/serde.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/string.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/string.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseStringPromptTemplate: () => (/* binding */ BaseStringPromptTemplate)\n/* harmony export */ });\n/* harmony import */ var _prompt_values_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../prompt_values.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/base.js\");\n// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\n\n\n/**\n * Base class for string prompt templates. It extends the\n * BasePromptTemplate class and overrides the formatPromptValue method to\n * return a StringPromptValue.\n */ class BaseStringPromptTemplate extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BasePromptTemplate {\n    /**\n     * Formats the prompt given the input values and returns a formatted\n     * prompt value.\n     * @param values The input values to format the prompt.\n     * @returns A Promise that resolves to a formatted prompt value.\n     */ async formatPromptValue(values) {\n        const formattedPrompt = await this.format(values);\n        return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_0__.StringPromptValue(formattedPrompt);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcHJvbXB0cy9zdHJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0VBQWdFO0FBQ2hFLHdFQUF3RTtBQUNmO0FBQ1Y7QUFDL0M7Ozs7Q0FJQyxHQUNNLE1BQU1FLGlDQUFpQ0Qsd0RBQWtCQTtJQUM1RDs7Ozs7S0FLQyxHQUNELE1BQU1FLGtCQUFrQkMsTUFBTSxFQUFFO1FBQzVCLE1BQU1DLGtCQUFrQixNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDRjtRQUMxQyxPQUFPLElBQUlKLGdFQUFpQkEsQ0FBQ0s7SUFDakM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9wcm9tcHRzL3N0cmluZy5qcz8wZDFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERlZmF1bHQgZ2VuZXJpYyBcImFueVwiIHZhbHVlcyBhcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuLy8gUmVwbGFjZSB3aXRoIFwic3RyaW5nXCIgd2hlbiB3ZSBhcmUgY29tZm9ydGFibGUgd2l0aCBhIGJyZWFraW5nIGNoYW5nZS5cbmltcG9ydCB7IFN0cmluZ1Byb21wdFZhbHVlLCB9IGZyb20gXCIuLi9wcm9tcHRfdmFsdWVzLmpzXCI7XG5pbXBvcnQgeyBCYXNlUHJvbXB0VGVtcGxhdGUgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHN0cmluZyBwcm9tcHQgdGVtcGxhdGVzLiBJdCBleHRlbmRzIHRoZVxuICogQmFzZVByb21wdFRlbXBsYXRlIGNsYXNzIGFuZCBvdmVycmlkZXMgdGhlIGZvcm1hdFByb21wdFZhbHVlIG1ldGhvZCB0b1xuICogcmV0dXJuIGEgU3RyaW5nUHJvbXB0VmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlU3RyaW5nUHJvbXB0VGVtcGxhdGUgZXh0ZW5kcyBCYXNlUHJvbXB0VGVtcGxhdGUge1xuICAgIC8qKlxuICAgICAqIEZvcm1hdHMgdGhlIHByb21wdCBnaXZlbiB0aGUgaW5wdXQgdmFsdWVzIGFuZCByZXR1cm5zIGEgZm9ybWF0dGVkXG4gICAgICogcHJvbXB0IHZhbHVlLlxuICAgICAqIEBwYXJhbSB2YWx1ZXMgVGhlIGlucHV0IHZhbHVlcyB0byBmb3JtYXQgdGhlIHByb21wdC5cbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIGZvcm1hdHRlZCBwcm9tcHQgdmFsdWUuXG4gICAgICovXG4gICAgYXN5bmMgZm9ybWF0UHJvbXB0VmFsdWUodmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFByb21wdCA9IGF3YWl0IHRoaXMuZm9ybWF0KHZhbHVlcyk7XG4gICAgICAgIHJldHVybiBuZXcgU3RyaW5nUHJvbXB0VmFsdWUoZm9ybWF0dGVkUHJvbXB0KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiU3RyaW5nUHJvbXB0VmFsdWUiLCJCYXNlUHJvbXB0VGVtcGxhdGUiLCJCYXNlU3RyaW5nUHJvbXB0VGVtcGxhdGUiLCJmb3JtYXRQcm9tcHRWYWx1ZSIsInZhbHVlcyIsImZvcm1hdHRlZFByb21wdCIsImZvcm1hdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompts/template.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/template.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_FORMATTER_MAPPING: () => (/* binding */ DEFAULT_FORMATTER_MAPPING),\n/* harmony export */   DEFAULT_PARSER_MAPPING: () => (/* binding */ DEFAULT_PARSER_MAPPING),\n/* harmony export */   checkValidTemplate: () => (/* binding */ checkValidTemplate),\n/* harmony export */   interpolateFString: () => (/* binding */ interpolateFString),\n/* harmony export */   parseFString: () => (/* binding */ parseFString),\n/* harmony export */   parseTemplate: () => (/* binding */ parseTemplate),\n/* harmony export */   renderTemplate: () => (/* binding */ renderTemplate)\n/* harmony export */ });\nconst parseFString = (template)=>{\n    // Core logic replicated from internals of pythons built in Formatter class.\n    // https://github.com/python/cpython/blob/135ec7cefbaffd516b77362ad2b2ad1025af462e/Objects/stringlib/unicode_format.h#L700-L706\n    const chars = template.split(\"\");\n    const nodes = [];\n    const nextBracket = (bracket, start)=>{\n        for(let i = start; i < chars.length; i += 1){\n            if (bracket.includes(chars[i])) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    let i = 0;\n    while(i < chars.length){\n        if (chars[i] === \"{\" && i + 1 < chars.length && chars[i + 1] === \"{\") {\n            nodes.push({\n                type: \"literal\",\n                text: \"{\"\n            });\n            i += 2;\n        } else if (chars[i] === \"}\" && i + 1 < chars.length && chars[i + 1] === \"}\") {\n            nodes.push({\n                type: \"literal\",\n                text: \"}\"\n            });\n            i += 2;\n        } else if (chars[i] === \"{\") {\n            const j = nextBracket(\"}\", i);\n            if (j < 0) {\n                throw new Error(\"Unclosed '{' in template.\");\n            }\n            nodes.push({\n                type: \"variable\",\n                name: chars.slice(i + 1, j).join(\"\")\n            });\n            i = j + 1;\n        } else if (chars[i] === \"}\") {\n            throw new Error(\"Single '}' in template.\");\n        } else {\n            const next = nextBracket(\"{}\", i);\n            const text = (next < 0 ? chars.slice(i) : chars.slice(i, next)).join(\"\");\n            nodes.push({\n                type: \"literal\",\n                text\n            });\n            i = next < 0 ? chars.length : next;\n        }\n    }\n    return nodes;\n};\nconst interpolateFString = (template, values)=>parseFString(template).reduce((res, node)=>{\n        if (node.type === \"variable\") {\n            if (node.name in values) {\n                return res + values[node.name];\n            }\n            throw new Error(`Missing value for input ${node.name}`);\n        }\n        return res + node.text;\n    }, \"\");\nconst DEFAULT_FORMATTER_MAPPING = {\n    \"f-string\": interpolateFString\n};\nconst DEFAULT_PARSER_MAPPING = {\n    \"f-string\": parseFString\n};\nconst renderTemplate = (template, templateFormat, inputValues)=>DEFAULT_FORMATTER_MAPPING[templateFormat](template, inputValues);\nconst parseTemplate = (template, templateFormat)=>DEFAULT_PARSER_MAPPING[templateFormat](template);\nconst checkValidTemplate = (template, templateFormat, inputVariables)=>{\n    if (!(templateFormat in DEFAULT_FORMATTER_MAPPING)) {\n        const validFormats = Object.keys(DEFAULT_FORMATTER_MAPPING);\n        throw new Error(`Invalid template format. Got \\`${templateFormat}\\`;\n                         should be one of ${validFormats}`);\n    }\n    try {\n        const dummyInputs = inputVariables.reduce((acc, v)=>{\n            acc[v] = \"foo\";\n            return acc;\n        }, {});\n        if (Array.isArray(template)) {\n            template.forEach((message)=>{\n                if (message.type === \"text\") {\n                    renderTemplate(message.text, templateFormat, dummyInputs);\n                } else if (message.type === \"image_url\") {\n                    if (typeof message.image_url === \"string\") {\n                        renderTemplate(message.image_url, templateFormat, dummyInputs);\n                    } else {\n                        const imageUrl = message.image_url.url;\n                        renderTemplate(imageUrl, templateFormat, dummyInputs);\n                    }\n                } else {\n                    throw new Error(`Invalid message template received. ${JSON.stringify(message, null, 2)}`);\n                }\n            });\n        } else {\n            renderTemplate(template, templateFormat, dummyInputs);\n        }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e) {\n        throw new Error(`Invalid prompt schema: ${e.message}`);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcHJvbXB0cy90ZW1wbGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQU8sTUFBTUEsZUFBZSxDQUFDQztJQUN6Qiw0RUFBNEU7SUFDNUUsK0hBQStIO0lBQy9ILE1BQU1DLFFBQVFELFNBQVNFLEtBQUssQ0FBQztJQUM3QixNQUFNQyxRQUFRLEVBQUU7SUFDaEIsTUFBTUMsY0FBYyxDQUFDQyxTQUFTQztRQUMxQixJQUFLLElBQUlDLElBQUlELE9BQU9DLElBQUlOLE1BQU1PLE1BQU0sRUFBRUQsS0FBSyxFQUFHO1lBQzFDLElBQUlGLFFBQVFJLFFBQVEsQ0FBQ1IsS0FBSyxDQUFDTSxFQUFFLEdBQUc7Z0JBQzVCLE9BQU9BO1lBQ1g7UUFDSjtRQUNBLE9BQU8sQ0FBQztJQUNaO0lBQ0EsSUFBSUEsSUFBSTtJQUNSLE1BQU9BLElBQUlOLE1BQU1PLE1BQU0sQ0FBRTtRQUNyQixJQUFJUCxLQUFLLENBQUNNLEVBQUUsS0FBSyxPQUFPQSxJQUFJLElBQUlOLE1BQU1PLE1BQU0sSUFBSVAsS0FBSyxDQUFDTSxJQUFJLEVBQUUsS0FBSyxLQUFLO1lBQ2xFSixNQUFNTyxJQUFJLENBQUM7Z0JBQUVDLE1BQU07Z0JBQVdDLE1BQU07WUFBSTtZQUN4Q0wsS0FBSztRQUNULE9BQ0ssSUFBSU4sS0FBSyxDQUFDTSxFQUFFLEtBQUssT0FDbEJBLElBQUksSUFBSU4sTUFBTU8sTUFBTSxJQUNwQlAsS0FBSyxDQUFDTSxJQUFJLEVBQUUsS0FBSyxLQUFLO1lBQ3RCSixNQUFNTyxJQUFJLENBQUM7Z0JBQUVDLE1BQU07Z0JBQVdDLE1BQU07WUFBSTtZQUN4Q0wsS0FBSztRQUNULE9BQ0ssSUFBSU4sS0FBSyxDQUFDTSxFQUFFLEtBQUssS0FBSztZQUN2QixNQUFNTSxJQUFJVCxZQUFZLEtBQUtHO1lBQzNCLElBQUlNLElBQUksR0FBRztnQkFDUCxNQUFNLElBQUlDLE1BQU07WUFDcEI7WUFDQVgsTUFBTU8sSUFBSSxDQUFDO2dCQUNQQyxNQUFNO2dCQUNOSSxNQUFNZCxNQUFNZSxLQUFLLENBQUNULElBQUksR0FBR00sR0FBR0ksSUFBSSxDQUFDO1lBQ3JDO1lBQ0FWLElBQUlNLElBQUk7UUFDWixPQUNLLElBQUlaLEtBQUssQ0FBQ00sRUFBRSxLQUFLLEtBQUs7WUFDdkIsTUFBTSxJQUFJTyxNQUFNO1FBQ3BCLE9BQ0s7WUFDRCxNQUFNSSxPQUFPZCxZQUFZLE1BQU1HO1lBQy9CLE1BQU1LLE9BQU8sQ0FBQ00sT0FBTyxJQUFJakIsTUFBTWUsS0FBSyxDQUFDVCxLQUFLTixNQUFNZSxLQUFLLENBQUNULEdBQUdXLEtBQUksRUFBR0QsSUFBSSxDQUFDO1lBQ3JFZCxNQUFNTyxJQUFJLENBQUM7Z0JBQUVDLE1BQU07Z0JBQVdDO1lBQUs7WUFDbkNMLElBQUlXLE9BQU8sSUFBSWpCLE1BQU1PLE1BQU0sR0FBR1U7UUFDbEM7SUFDSjtJQUNBLE9BQU9mO0FBQ1gsRUFBRTtBQUNLLE1BQU1nQixxQkFBcUIsQ0FBQ25CLFVBQVVvQixTQUFXckIsYUFBYUMsVUFBVXFCLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztRQUN4RixJQUFJQSxLQUFLWixJQUFJLEtBQUssWUFBWTtZQUMxQixJQUFJWSxLQUFLUixJQUFJLElBQUlLLFFBQVE7Z0JBQ3JCLE9BQU9FLE1BQU1GLE1BQU0sQ0FBQ0csS0FBS1IsSUFBSSxDQUFDO1lBQ2xDO1lBQ0EsTUFBTSxJQUFJRCxNQUFNLENBQUMsd0JBQXdCLEVBQUVTLEtBQUtSLElBQUksQ0FBQyxDQUFDO1FBQzFEO1FBQ0EsT0FBT08sTUFBTUMsS0FBS1gsSUFBSTtJQUMxQixHQUFHLElBQUk7QUFDQSxNQUFNWSw0QkFBNEI7SUFDckMsWUFBWUw7QUFDaEIsRUFBRTtBQUNLLE1BQU1NLHlCQUF5QjtJQUNsQyxZQUFZMUI7QUFDaEIsRUFBRTtBQUNLLE1BQU0yQixpQkFBaUIsQ0FBQzFCLFVBQVUyQixnQkFBZ0JDLGNBQWdCSix5QkFBeUIsQ0FBQ0csZUFBZSxDQUFDM0IsVUFBVTRCLGFBQWE7QUFDbkksTUFBTUMsZ0JBQWdCLENBQUM3QixVQUFVMkIsaUJBQW1CRixzQkFBc0IsQ0FBQ0UsZUFBZSxDQUFDM0IsVUFBVTtBQUNyRyxNQUFNOEIscUJBQXFCLENBQUM5QixVQUFVMkIsZ0JBQWdCSTtJQUN6RCxJQUFJLENBQUVKLENBQUFBLGtCQUFrQkgseUJBQXdCLEdBQUk7UUFDaEQsTUFBTVEsZUFBZUMsT0FBT0MsSUFBSSxDQUFDVjtRQUNqQyxNQUFNLElBQUlWLE1BQU0sQ0FBQywrQkFBK0IsRUFBRWEsZUFBZTswQ0FDL0IsRUFBRUssYUFBYSxDQUFDO0lBQ3REO0lBQ0EsSUFBSTtRQUNBLE1BQU1HLGNBQWNKLGVBQWVWLE1BQU0sQ0FBQyxDQUFDZSxLQUFLQztZQUM1Q0QsR0FBRyxDQUFDQyxFQUFFLEdBQUc7WUFDVCxPQUFPRDtRQUNYLEdBQUcsQ0FBQztRQUNKLElBQUlFLE1BQU1DLE9BQU8sQ0FBQ3ZDLFdBQVc7WUFDekJBLFNBQVN3QyxPQUFPLENBQUMsQ0FBQ0M7Z0JBQ2QsSUFBSUEsUUFBUTlCLElBQUksS0FBSyxRQUFRO29CQUN6QmUsZUFBZWUsUUFBUTdCLElBQUksRUFBRWUsZ0JBQWdCUTtnQkFDakQsT0FDSyxJQUFJTSxRQUFROUIsSUFBSSxLQUFLLGFBQWE7b0JBQ25DLElBQUksT0FBTzhCLFFBQVFDLFNBQVMsS0FBSyxVQUFVO3dCQUN2Q2hCLGVBQWVlLFFBQVFDLFNBQVMsRUFBRWYsZ0JBQWdCUTtvQkFDdEQsT0FDSzt3QkFDRCxNQUFNUSxXQUFXRixRQUFRQyxTQUFTLENBQUNFLEdBQUc7d0JBQ3RDbEIsZUFBZWlCLFVBQVVoQixnQkFBZ0JRO29CQUM3QztnQkFDSixPQUNLO29CQUNELE1BQU0sSUFBSXJCLE1BQU0sQ0FBQyxtQ0FBbUMsRUFBRStCLEtBQUtDLFNBQVMsQ0FBQ0wsU0FBUyxNQUFNLEdBQUcsQ0FBQztnQkFDNUY7WUFDSjtRQUNKLE9BQ0s7WUFDRGYsZUFBZTFCLFVBQVUyQixnQkFBZ0JRO1FBQzdDO0lBQ0EsOERBQThEO0lBQ2xFLEVBQ0EsT0FBT1ksR0FBRztRQUNOLE1BQU0sSUFBSWpDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRWlDLEVBQUVOLE9BQU8sQ0FBQyxDQUFDO0lBQ3pEO0FBQ0osRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9wcm9tcHRzL3RlbXBsYXRlLmpzPzZjNjIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHBhcnNlRlN0cmluZyA9ICh0ZW1wbGF0ZSkgPT4ge1xuICAgIC8vIENvcmUgbG9naWMgcmVwbGljYXRlZCBmcm9tIGludGVybmFscyBvZiBweXRob25zIGJ1aWx0IGluIEZvcm1hdHRlciBjbGFzcy5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcHl0aG9uL2NweXRob24vYmxvYi8xMzVlYzdjZWZiYWZmZDUxNmI3NzM2MmFkMmIyYWQxMDI1YWY0NjJlL09iamVjdHMvc3RyaW5nbGliL3VuaWNvZGVfZm9ybWF0LmgjTDcwMC1MNzA2XG4gICAgY29uc3QgY2hhcnMgPSB0ZW1wbGF0ZS5zcGxpdChcIlwiKTtcbiAgICBjb25zdCBub2RlcyA9IFtdO1xuICAgIGNvbnN0IG5leHRCcmFja2V0ID0gKGJyYWNrZXQsIHN0YXJ0KSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoYXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYnJhY2tldC5pbmNsdWRlcyhjaGFyc1tpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBjaGFycy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGNoYXJzW2ldID09PSBcIntcIiAmJiBpICsgMSA8IGNoYXJzLmxlbmd0aCAmJiBjaGFyc1tpICsgMV0gPT09IFwie1wiKSB7XG4gICAgICAgICAgICBub2Rlcy5wdXNoKHsgdHlwZTogXCJsaXRlcmFsXCIsIHRleHQ6IFwie1wiIH0pO1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYXJzW2ldID09PSBcIn1cIiAmJlxuICAgICAgICAgICAgaSArIDEgPCBjaGFycy5sZW5ndGggJiZcbiAgICAgICAgICAgIGNoYXJzW2kgKyAxXSA9PT0gXCJ9XCIpIHtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goeyB0eXBlOiBcImxpdGVyYWxcIiwgdGV4dDogXCJ9XCIgfSk7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hhcnNbaV0gPT09IFwie1wiKSB7XG4gICAgICAgICAgICBjb25zdCBqID0gbmV4dEJyYWNrZXQoXCJ9XCIsIGkpO1xuICAgICAgICAgICAgaWYgKGogPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5jbG9zZWQgJ3snIGluIHRlbXBsYXRlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidmFyaWFibGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBjaGFycy5zbGljZShpICsgMSwgaikuam9pbihcIlwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaSA9IGogKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYXJzW2ldID09PSBcIn1cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2luZ2xlICd9JyBpbiB0ZW1wbGF0ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV4dEJyYWNrZXQoXCJ7fVwiLCBpKTtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSAobmV4dCA8IDAgPyBjaGFycy5zbGljZShpKSA6IGNoYXJzLnNsaWNlKGksIG5leHQpKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgbm9kZXMucHVzaCh7IHR5cGU6IFwibGl0ZXJhbFwiLCB0ZXh0IH0pO1xuICAgICAgICAgICAgaSA9IG5leHQgPCAwID8gY2hhcnMubGVuZ3RoIDogbmV4dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG59O1xuZXhwb3J0IGNvbnN0IGludGVycG9sYXRlRlN0cmluZyA9ICh0ZW1wbGF0ZSwgdmFsdWVzKSA9PiBwYXJzZUZTdHJpbmcodGVtcGxhdGUpLnJlZHVjZSgocmVzLCBub2RlKSA9PiB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gXCJ2YXJpYWJsZVwiKSB7XG4gICAgICAgIGlmIChub2RlLm5hbWUgaW4gdmFsdWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzICsgdmFsdWVzW25vZGUubmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIHZhbHVlIGZvciBpbnB1dCAke25vZGUubmFtZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcyArIG5vZGUudGV4dDtcbn0sIFwiXCIpO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfRk9STUFUVEVSX01BUFBJTkcgPSB7XG4gICAgXCJmLXN0cmluZ1wiOiBpbnRlcnBvbGF0ZUZTdHJpbmcsXG59O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUEFSU0VSX01BUFBJTkcgPSB7XG4gICAgXCJmLXN0cmluZ1wiOiBwYXJzZUZTdHJpbmcsXG59O1xuZXhwb3J0IGNvbnN0IHJlbmRlclRlbXBsYXRlID0gKHRlbXBsYXRlLCB0ZW1wbGF0ZUZvcm1hdCwgaW5wdXRWYWx1ZXMpID0+IERFRkFVTFRfRk9STUFUVEVSX01BUFBJTkdbdGVtcGxhdGVGb3JtYXRdKHRlbXBsYXRlLCBpbnB1dFZhbHVlcyk7XG5leHBvcnQgY29uc3QgcGFyc2VUZW1wbGF0ZSA9ICh0ZW1wbGF0ZSwgdGVtcGxhdGVGb3JtYXQpID0+IERFRkFVTFRfUEFSU0VSX01BUFBJTkdbdGVtcGxhdGVGb3JtYXRdKHRlbXBsYXRlKTtcbmV4cG9ydCBjb25zdCBjaGVja1ZhbGlkVGVtcGxhdGUgPSAodGVtcGxhdGUsIHRlbXBsYXRlRm9ybWF0LCBpbnB1dFZhcmlhYmxlcykgPT4ge1xuICAgIGlmICghKHRlbXBsYXRlRm9ybWF0IGluIERFRkFVTFRfRk9STUFUVEVSX01BUFBJTkcpKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkRm9ybWF0cyA9IE9iamVjdC5rZXlzKERFRkFVTFRfRk9STUFUVEVSX01BUFBJTkcpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdGVtcGxhdGUgZm9ybWF0LiBHb3QgXFxgJHt0ZW1wbGF0ZUZvcm1hdH1cXGA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIG9uZSBvZiAke3ZhbGlkRm9ybWF0c31gKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZHVtbXlJbnB1dHMgPSBpbnB1dFZhcmlhYmxlcy5yZWR1Y2UoKGFjYywgdikgPT4ge1xuICAgICAgICAgICAgYWNjW3ZdID0gXCJmb29cIjtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGVtcGxhdGUpKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5mb3JFYWNoKChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyVGVtcGxhdGUobWVzc2FnZS50ZXh0LCB0ZW1wbGF0ZUZvcm1hdCwgZHVtbXlJbnB1dHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiaW1hZ2VfdXJsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmltYWdlX3VybCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyVGVtcGxhdGUobWVzc2FnZS5pbWFnZV91cmwsIHRlbXBsYXRlRm9ybWF0LCBkdW1teUlucHV0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZVVybCA9IG1lc3NhZ2UuaW1hZ2VfdXJsLnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclRlbXBsYXRlKGltYWdlVXJsLCB0ZW1wbGF0ZUZvcm1hdCwgZHVtbXlJbnB1dHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbWVzc2FnZSB0ZW1wbGF0ZSByZWNlaXZlZC4gJHtKU09OLnN0cmluZ2lmeShtZXNzYWdlLCBudWxsLCAyKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB0ZW1wbGF0ZUZvcm1hdCwgZHVtbXlJbnB1dHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcm9tcHQgc2NoZW1hOiAke2UubWVzc2FnZX1gKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbInBhcnNlRlN0cmluZyIsInRlbXBsYXRlIiwiY2hhcnMiLCJzcGxpdCIsIm5vZGVzIiwibmV4dEJyYWNrZXQiLCJicmFja2V0Iiwic3RhcnQiLCJpIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJwdXNoIiwidHlwZSIsInRleHQiLCJqIiwiRXJyb3IiLCJuYW1lIiwic2xpY2UiLCJqb2luIiwibmV4dCIsImludGVycG9sYXRlRlN0cmluZyIsInZhbHVlcyIsInJlZHVjZSIsInJlcyIsIm5vZGUiLCJERUZBVUxUX0ZPUk1BVFRFUl9NQVBQSU5HIiwiREVGQVVMVF9QQVJTRVJfTUFQUElORyIsInJlbmRlclRlbXBsYXRlIiwidGVtcGxhdGVGb3JtYXQiLCJpbnB1dFZhbHVlcyIsInBhcnNlVGVtcGxhdGUiLCJjaGVja1ZhbGlkVGVtcGxhdGUiLCJpbnB1dFZhcmlhYmxlcyIsInZhbGlkRm9ybWF0cyIsIk9iamVjdCIsImtleXMiLCJkdW1teUlucHV0cyIsImFjYyIsInYiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwibWVzc2FnZSIsImltYWdlX3VybCIsImltYWdlVXJsIiwidXJsIiwiSlNPTiIsInN0cmluZ2lmeSIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompts/template.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runnable: () => (/* binding */ Runnable),\n/* harmony export */   RunnableAssign: () => (/* binding */ RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* binding */ RunnableBinding),\n/* harmony export */   RunnableEach: () => (/* binding */ RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* binding */ RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* binding */ RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* binding */ RunnableParallel),\n/* harmony export */   RunnablePick: () => (/* binding */ RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* binding */ RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* binding */ RunnableSequence),\n/* harmony export */   RunnableWithFallbacks: () => (/* binding */ RunnableWithFallbacks),\n/* harmony export */   _coerceToDict: () => (/* binding */ _coerceToDict),\n/* harmony export */   _coerceToRunnable: () => (/* binding */ _coerceToRunnable)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/log_stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tracers/root_listener.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graph.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && // eslint-disable-next-line no-instanceof/no-instanceof\n    !(value instanceof Date) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */ class Runnable extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_3__.Serializable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    getName(suffix) {\n        const name = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.name ?? this.constructor.lc_name() ?? this.constructor.name;\n        return suffix ? `${name}${suffix}` : name;\n    }\n    /**\n     * Bind arguments to a Runnable, returning a new Runnable.\n     * @param kwargs\n     * @returns A new RunnableBinding that, when invoked, will apply the bound args.\n     */ bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            kwargs,\n            config: {}\n        });\n    }\n    /**\n     * Return a new Runnable that maps a list of inputs to a list of outputs,\n     * by calling invoke() with each input.\n     */ map() {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableEach({\n            bound: this\n        });\n    }\n    /**\n     * Add retry logic to an existing runnable.\n     * @param kwargs\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */ withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this,\n            kwargs: {},\n            config: {},\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields\n        });\n    }\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */ withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config,\n            kwargs: {}\n        });\n    }\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */ withFallbacks(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableWithFallbacks({\n            runnable: this,\n            fallbacks: fields.fallbacks\n        });\n    }\n    _getOptionsList(options, length = 0) {\n        if (Array.isArray(options)) {\n            if (options.length !== length) {\n                throw new Error(`Passed \"options\" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);\n            }\n            return options.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig);\n        }\n        return Array.from({\n            length\n        }, ()=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = configList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_6__.AsyncCaller({\n            maxConcurrency,\n            onFailedAttempt: (e)=>{\n                throw e;\n            }\n        });\n        const batchCalls = inputs.map((input, i)=>caller.call(async ()=>{\n                try {\n                    const result = await this.invoke(input, configList[i]);\n                    return result;\n                } catch (e) {\n                    if (batchOptions?.returnExceptions) {\n                        return e;\n                    }\n                    throw e;\n                }\n            }));\n        return Promise.all(batchCalls);\n    }\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */ async *_streamIterator(input, options) {\n        yield this.invoke(input, options);\n    }\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */ async stream(input, options) {\n        // Buffer the first streamed chunk to allow for initial errors\n        // to surface immediately.\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this._streamIterator(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options)));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n    _separateRunnableConfigFromCallOptions(options = {}) {\n        const runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)({\n            callbacks: options.callbacks,\n            tags: options.tags,\n            metadata: options.metadata,\n            runName: options.runName,\n            configurable: options.configurable,\n            recursionLimit: options.recursionLimit,\n            maxConcurrency: options.maxConcurrency\n        });\n        const callOptions = {\n            ...options\n        };\n        delete callOptions.callbacks;\n        delete callOptions.tags;\n        delete callOptions.metadata;\n        delete callOptions.runName;\n        delete callOptions.configurable;\n        delete callOptions.recursionLimit;\n        delete callOptions.maxConcurrency;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async _callWithConfig(func, input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, config?.runType, undefined, undefined, config?.runName ?? this.getName());\n        let output;\n        try {\n            output = await func.call(this, input, config, runManager);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n        return output;\n    }\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */ async _batchWithConfig(func, inputs, options, batchOptions) {\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(optionsList.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), undefined, optionsList[i].runType, undefined, undefined, optionsList[i].runName ?? this.getName())));\n        let outputs;\n        try {\n            outputs = await func.call(this, inputs, optionsList, runManagers, batchOptions);\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(outputs, \"output\"))));\n        return outputs;\n    }\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */ async *_transformStreamWithConfig(inputGenerator, transformer, options) {\n        let finalInput;\n        let finalInputSupported = true;\n        let finalOutput;\n        let finalOutputSupported = true;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        async function* wrapInputForTracing() {\n            for await (const chunk of inputGenerator){\n                if (finalInputSupported) {\n                    if (finalInput === undefined) {\n                        finalInput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalInput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalInput, chunk);\n                        } catch  {\n                            finalInput = undefined;\n                            finalInputSupported = false;\n                        }\n                    }\n                }\n                yield chunk;\n            }\n        }\n        let runManager;\n        try {\n            const pipe = await (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.pipeGeneratorWithSetup)(transformer.bind(this), wrapInputForTracing(), async ()=>callbackManager_?.handleChainStart(this.toJSON(), {\n                    input: \"\"\n                }, undefined, config?.runType, undefined, undefined, config?.runName ?? this.getName()), config);\n            runManager = pipe.setup;\n            const isLogStreamHandler = (handler)=>handler.name === \"log_stream_tracer\";\n            const streamLogHandler = runManager?.handlers.find(isLogStreamHandler);\n            let iterator = pipe.output;\n            if (streamLogHandler !== undefined && runManager !== undefined) {\n                iterator = await streamLogHandler.tapOutputIterable(runManager.runId, pipe.output);\n            }\n            for await (const chunk of iterator){\n                yield chunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalOutput, chunk);\n                        } catch  {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e, undefined, undefined, undefined, {\n                inputs: _coerceToDict(finalInput, \"input\")\n            });\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {}, undefined, undefined, undefined, {\n            inputs: _coerceToDict(finalInput, \"input\")\n        });\n    }\n    getGraph(_) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_10__.Graph();\n        // TODO: Add input schema for runnables\n        const inputNode = graph.addNode({\n            name: `${this.getName()}Input`,\n            schema: zod__WEBPACK_IMPORTED_MODULE_11__.z.any()\n        });\n        const runnableNode = graph.addNode(this);\n        // TODO: Add output schemas for runnables\n        const outputNode = graph.addNode({\n            name: `${this.getName()}Output`,\n            schema: zod__WEBPACK_IMPORTED_MODULE_11__.z.any()\n        });\n        graph.addEdge(inputNode, runnableNode);\n        graph.addEdge(runnableNode, outputNode);\n        return graph;\n    }\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */ pipe(coerceable) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableSequence({\n            first: this,\n            last: _coerceToRunnable(coerceable)\n        });\n    }\n    /**\n     * Pick keys from the dict output of this runnable. Returns a new runnable.\n     */ pick(keys) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return this.pipe(new RunnablePick(keys));\n    }\n    /**\n     * Assigns new fields to the dict output of this runnable. Returns a new runnable.\n     */ assign(mapping) {\n        return this.pipe(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableAssign(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableMap({\n            steps: mapping\n        })));\n    }\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */ async *transform(generator, options) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                // This method should throw an error if gathering fails.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalChunk, chunk);\n            }\n        }\n        yield* this._streamIterator(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options));\n    }\n    /**\n     * Stream all output from a runnable, as reported to the callback system.\n     * This includes all inner runs of LLMs, Retrievers, Tools, etc.\n     * Output is streamed as Log objects, which include a list of\n     * jsonpatch ops that describe how the state of the run has changed in each\n     * step, and the final state of the run.\n     * The jsonpatch ops can be applied in order to construct state.\n     * @param input\n     * @param options\n     * @param streamOptions\n     */ async *streamLog(input, options, streamOptions) {\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"original\"\n        });\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        yield* this._streamLog(input, logStreamCallbackHandler, config);\n    }\n    async *_streamLog(input, logStreamCallbackHandler, config) {\n        const { callbacks } = config;\n        if (callbacks === undefined) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = [\n                logStreamCallbackHandler\n            ];\n        } else if (Array.isArray(callbacks)) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = callbacks.concat([\n                logStreamCallbackHandler\n            ]);\n        } else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.inheritableHandlers.push(logStreamCallbackHandler);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const runnableStreamPromise = this.stream(input, config);\n        async function consumeRunnableStream() {\n            try {\n                const runnableStream = await runnableStreamPromise;\n                for await (const chunk of runnableStream){\n                    const patch = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: \"/streamed_output/-\",\n                                value: chunk\n                            }\n                        ]\n                    });\n                    await logStreamCallbackHandler.writer.write(patch);\n                }\n            } finally{\n                await logStreamCallbackHandler.writer.close();\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        try {\n            for await (const log of logStreamCallbackHandler){\n                yield log;\n            }\n        } finally{\n            await runnableStreamConsumePromise;\n        }\n    }\n    /**\n     * Generate a stream of events emitted by the internal steps of the runnable.\n     *\n     * Use to create an iterator over StreamEvents that provide real-time information\n     * about the progress of the runnable, including StreamEvents from intermediate\n     * results.\n     *\n     * A StreamEvent is a dictionary with the following schema:\n     *\n     * - `event`: string - Event names are of the format: on_[runnable_type]_(start|stream|end).\n     * - `name`: string - The name of the runnable that generated the event.\n     * - `run_id`: string - Randomly generated ID associated with the given execution of\n     *   the runnable that emitted the event. A child runnable that gets invoked as part of the execution of a\n     *   parent runnable is assigned its own unique ID.\n     * - `tags`: string[] - The tags of the runnable that generated the event.\n     * - `metadata`: Record<string, any> - The metadata of the runnable that generated the event.\n     * - `data`: Record<string, any>\n     *\n     * Below is a table that illustrates some events that might be emitted by various\n     * chains. Metadata fields have been omitted from the table for brevity.\n     * Chain definitions have been included after the table.\n     *\n     * | event                | name             | chunk                              | input                                         | output                                          |\n     * |----------------------|------------------|------------------------------------|-----------------------------------------------|-------------------------------------------------|\n     * | on_llm_start         | [model name]     |                                    | {'input': 'hello'}                            |                                                 |\n     * | on_llm_stream        | [model name]     | 'Hello' OR AIMessageChunk(\"hello\") |                                               |                                                 |\n     * | on_llm_end           | [model name]     |                                    | 'Hello human!'                                |\n     * | on_chain_start       | format_docs      |                                    |                                               |                                                 |\n     * | on_chain_stream      | format_docs      | \"hello world!, goodbye world!\"     |                                               |                                                 |\n     * | on_chain_end         | format_docs      |                                    | [Document(...)]                               | \"hello world!, goodbye world!\"                  |\n     * | on_tool_start        | some_tool        |                                    | {\"x\": 1, \"y\": \"2\"}                            |                                                 |\n     * | on_tool_stream       | some_tool        |   {\"x\": 1, \"y\": \"2\"}               |                                               |                                                 |\n     * | on_tool_end          | some_tool        |                                    |                                               | {\"x\": 1, \"y\": \"2\"}                              |\n     * | on_retriever_start   | [retriever name] |                                    | {\"query\": \"hello\"}                            |                                                 |\n     * | on_retriever_chunk   | [retriever name] |  {documents: [...]}                |                                               |                                                 |\n     * | on_retriever_end     | [retriever name] |                                    | {\"query\": \"hello\"}                            | {documents: [...]}                              |\n     * | on_prompt_start      | [template_name]  |                                    | {\"question\": \"hello\"}                         |                                                 |\n     * | on_prompt_end        | [template_name]  |                                    | {\"question\": \"hello\"}                         | ChatPromptValue(messages: [SystemMessage, ...]) |\n     */ async *streamEvents(input, options, streamOptions) {\n        if (options.version !== \"v1\") {\n            throw new Error(`Only version \"v1\" of the events schema is currently supported.`);\n        }\n        let runLog;\n        let hasEncounteredStartEvent = false;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const rootTags = config.tags ?? [];\n        const rootMetadata = config.metadata ?? {};\n        const rootName = config.runName ?? this.getName();\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"streaming_events\"\n        });\n        const rootEventFilter = new _utils_js__WEBPACK_IMPORTED_MODULE_8__._RootEventFilter({\n            ...streamOptions\n        });\n        const logStream = this._streamLog(input, logStreamCallbackHandler, config);\n        for await (const log of logStream){\n            if (!runLog) {\n                runLog = _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLog.fromRunLogPatch(log);\n            } else {\n                runLog = runLog.concat(log);\n            }\n            if (runLog.state === undefined) {\n                throw new Error(`Internal error: \"streamEvents\" state is missing. Please open a bug report.`);\n            }\n            // Yield the start event for the root runnable if it hasn't been seen.\n            // The root run is never filtered out\n            if (!hasEncounteredStartEvent) {\n                hasEncounteredStartEvent = true;\n                const state = {\n                    ...runLog.state\n                };\n                const event = {\n                    run_id: state.id,\n                    event: `on_${state.type}_start`,\n                    name: rootName,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    data: {\n                        input\n                    }\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n            const paths = log.ops.filter((op)=>op.path.startsWith(\"/logs/\")).map((op)=>op.path.split(\"/\")[2]);\n            const dedupedPaths = [\n                ...new Set(paths)\n            ];\n            for (const path of dedupedPaths){\n                let eventType;\n                let data = {};\n                const logEntry = runLog.state.logs[path];\n                if (logEntry.end_time === undefined) {\n                    if (logEntry.streamed_output.length > 0) {\n                        eventType = \"stream\";\n                    } else {\n                        eventType = \"start\";\n                    }\n                } else {\n                    eventType = \"end\";\n                }\n                if (eventType === \"start\") {\n                    // Include the inputs with the start event if they are available.\n                    // Usually they will NOT be available for components that operate\n                    // on streams, since those components stream the input and\n                    // don't know its final value until the end of the stream.\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                } else if (eventType === \"end\") {\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                    data.output = logEntry.final_output;\n                } else if (eventType === \"stream\") {\n                    const chunkCount = logEntry.streamed_output.length;\n                    if (chunkCount !== 1) {\n                        throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${logEntry.name}\"`);\n                    }\n                    data = {\n                        chunk: logEntry.streamed_output[0]\n                    };\n                    // Clean up the stream, we don't need it anymore.\n                    // And this avoids duplicates as well!\n                    logEntry.streamed_output = [];\n                }\n                yield {\n                    event: `on_${logEntry.type}_${eventType}`,\n                    name: logEntry.name,\n                    run_id: logEntry.id,\n                    tags: logEntry.tags,\n                    metadata: logEntry.metadata,\n                    data\n                };\n            }\n            // Finally, we take care of the streaming output from the root chain\n            // if there is any.\n            const { state } = runLog;\n            if (state.streamed_output.length > 0) {\n                const chunkCount = state.streamed_output.length;\n                if (chunkCount !== 1) {\n                    throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${state.name}\"`);\n                }\n                const data = {\n                    chunk: state.streamed_output[0]\n                };\n                // Clean up the stream, we don't need it anymore.\n                state.streamed_output = [];\n                const event = {\n                    event: `on_${state.type}_stream`,\n                    run_id: state.id,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    name: rootName,\n                    data\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n        }\n        const state = runLog?.state;\n        if (state !== undefined) {\n            // Finally, yield the end event for the root runnable.\n            const event = {\n                event: `on_${state.type}_end`,\n                name: rootName,\n                run_id: state.id,\n                tags: rootTags,\n                metadata: rootMetadata,\n                data: {\n                    output: state.final_output\n                }\n            };\n            if (rootEventFilter.includeEvent(event, state.type)) yield event;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isRunnableInterface)(thing);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config: {},\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable with a set of kwargs.\n */ class RunnableBinding extends Runnable {\n    static lc_name() {\n        return \"RunnableBinding\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"configFactories\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n        this.kwargs = fields.kwargs;\n        this.config = fields.config;\n        this.configFactories = fields.configFactories;\n    }\n    getName(suffix) {\n        return this.bound.getName(suffix);\n    }\n    async _mergeConfig(...options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.mergeConfigs)(this.config, ...options);\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.mergeConfigs)(config, ...this.configFactories ? await Promise.all(this.configFactories.map(async (configFactory)=>await configFactory(config))) : []);\n    }\n    bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: {\n                ...this.kwargs,\n                ...kwargs\n            },\n            config: this.config\n        });\n    }\n    withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: {\n                ...this.config,\n                ...config\n            }\n        });\n    }\n    withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound.withRetry(fields),\n            kwargs: this.kwargs,\n            config: this.config\n        });\n    }\n    async invoke(input, options) {\n        return this.bound.invoke(input, await this._mergeConfig(options, this.kwargs));\n    }\n    async batch(inputs, options, batchOptions) {\n        const mergedOptions = Array.isArray(options) ? await Promise.all(options.map(async (individualOption)=>this._mergeConfig(individualOption, this.kwargs))) : await this._mergeConfig(options, this.kwargs);\n        return this.bound.batch(inputs, mergedOptions, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        yield* this.bound._streamIterator(input, await this._mergeConfig(options, this.kwargs));\n    }\n    async stream(input, options) {\n        return this.bound.stream(input, await this._mergeConfig(options, this.kwargs));\n    }\n    async *transform(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    generator, options) {\n        yield* this.bound.transform(generator, await this._mergeConfig(options, this.kwargs));\n    }\n    async *streamEvents(input, options, streamOptions) {\n        yield* this.bound.streamEvents(input, {\n            ...await this._mergeConfig(options, this.kwargs),\n            version: options.version\n        }, streamOptions);\n    }\n    static isRunnableBinding(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing) {\n        return thing.bound && Runnable.isRunnable(thing.bound);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableBinding({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n */ class RunnableEach extends Runnable {\n    static lc_name() {\n        return \"RunnableEach\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableEach` class that is bound with the specified arguments.\n     */ bind(kwargs) {\n        return new RunnableEach({\n            bound: this.bound.bind(kwargs)\n        });\n    }\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(inputs, config) {\n        return this._callWithConfig(this._invoke, inputs, config);\n    }\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async _invoke(inputs, config, runManager) {\n        return this.bound.batch(inputs, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n            callbacks: runManager?.getChild()\n        }));\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableEach({\n            bound: this.bound.withListeners({\n                onStart,\n                onEnd,\n                onError\n            })\n        });\n    }\n}\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n */ class RunnableRetry extends RunnableBinding {\n    static lc_name() {\n        return \"RunnableRetry\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"maxAttemptNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ()=>{}\n        });\n        this.maxAttemptNumber = fields.maxAttemptNumber ?? this.maxAttemptNumber;\n        this.onFailedAttempt = fields.onFailedAttempt ?? this.onFailedAttempt;\n    }\n    _patchConfigForRetry(attempt, config, runManager) {\n        const tag = attempt > 1 ? `retry:attempt:${attempt}` : undefined;\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n            callbacks: runManager?.getChild(tag)\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return p_retry__WEBPACK_IMPORTED_MODULE_0__((attemptNumber)=>super.invoke(input, this._patchConfigForRetry(attemptNumber, config, runManager)), {\n            onFailedAttempt: this.onFailedAttempt,\n            retries: Math.max(this.maxAttemptNumber - 1, 0),\n            randomize: true\n        });\n    }\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(input, config) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async _batch(inputs, configs, runManagers, batchOptions) {\n        const resultsMap = {};\n        try {\n            await p_retry__WEBPACK_IMPORTED_MODULE_0__(async (attemptNumber)=>{\n                const remainingIndexes = inputs.map((_, i)=>i).filter((i)=>resultsMap[i.toString()] === undefined || // eslint-disable-next-line no-instanceof/no-instanceof\n                    resultsMap[i.toString()] instanceof Error);\n                const remainingInputs = remainingIndexes.map((i)=>inputs[i]);\n                const patchedConfigs = remainingIndexes.map((i)=>this._patchConfigForRetry(attemptNumber, configs?.[i], runManagers?.[i]));\n                const results = await super.batch(remainingInputs, patchedConfigs, {\n                    ...batchOptions,\n                    returnExceptions: true\n                });\n                let firstException;\n                for(let i = 0; i < results.length; i += 1){\n                    const result = results[i];\n                    const resultMapIndex = remainingIndexes[i];\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (result instanceof Error) {\n                        if (firstException === undefined) {\n                            firstException = result;\n                        }\n                    }\n                    resultsMap[resultMapIndex.toString()] = result;\n                }\n                if (firstException) {\n                    throw firstException;\n                }\n                return results;\n            }, {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: Math.max(this.maxAttemptNumber - 1, 0),\n                randomize: true\n            });\n        } catch (e) {\n            if (batchOptions?.returnExceptions !== true) {\n                throw e;\n            }\n        }\n        return Object.keys(resultsMap).sort((a, b)=>parseInt(a, 10) - parseInt(b, 10)).map((key)=>resultsMap[parseInt(key, 10)]);\n    }\n    async batch(inputs, options, batchOptions) {\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n}\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n * const chain = RunnableSequence.from([promptTemplate, new ChatOpenAI({})]);\n * const result = await chain.invoke({ topic: \"bears\" });\n * ```\n */ class RunnableSequence extends Runnable {\n    static lc_name() {\n        return \"RunnableSequence\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"first\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"middle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"last\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        this.first = fields.first;\n        this.middle = fields.middle ?? this.middle;\n        this.last = fields.last;\n        this.name = fields.name;\n    }\n    get steps() {\n        return [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, undefined, undefined, undefined, config?.runName);\n        let nextStepInput = input;\n        let finalOutput;\n        try {\n            const initialSteps = [\n                this.first,\n                ...this.middle\n            ];\n            for(let i = 0; i < initialSteps.length; i += 1){\n                const step = initialSteps[i];\n                nextStepInput = await step.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`seq:step:${i + 1}`)\n                }));\n            }\n            // TypeScript can't detect that the last output of the sequence returns RunOutput, so call it out of the loop here\n            finalOutput = await this.last.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(`seq:step:${this.steps.length}`)\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n        return finalOutput;\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), undefined, undefined, undefined, undefined, configList[i].runName)));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let nextStepInputs = inputs;\n        try {\n            for(let i = 0; i < this.steps.length; i += 1){\n                const step = this.steps[i];\n                nextStepInputs = await step.batch(nextStepInputs, runManagers.map((runManager, j)=>{\n                    const childRunManager = runManager?.getChild(`seq:step:${i + 1}`);\n                    return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(configList[j], {\n                        callbacks: childRunManager\n                    });\n                }), batchOptions);\n            }\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(nextStepInputs, \"output\"))));\n        return nextStepInputs;\n    }\n    async *_streamIterator(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, undefined, undefined, undefined, options?.runName);\n        const steps = [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n        let concatSupported = true;\n        let finalOutput;\n        async function* inputGenerator() {\n            yield input;\n        }\n        try {\n            let finalGenerator = steps[0].transform(inputGenerator(), (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                callbacks: runManager?.getChild(`seq:step:1`)\n            }));\n            for(let i = 1; i < steps.length; i += 1){\n                const step = steps[i];\n                finalGenerator = await step.transform(finalGenerator, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                    callbacks: runManager?.getChild(`seq:step:${i + 1}`)\n                }));\n            }\n            for await (const chunk of finalGenerator){\n                yield chunk;\n                if (concatSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalOutput, chunk);\n                        } catch (e) {\n                            finalOutput = undefined;\n                            concatSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n    }\n    getGraph(config) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_10__.Graph();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let currentLastNode = null;\n        this.steps.forEach((step, index)=>{\n            const stepGraph = step.getGraph(config);\n            if (index !== 0) {\n                stepGraph.trimFirstNode();\n            }\n            if (index !== this.steps.length - 1) {\n                stepGraph.trimLastNode();\n            }\n            graph.extend(stepGraph);\n            const stepFirstNode = stepGraph.firstNode();\n            if (!stepFirstNode) {\n                throw new Error(`Runnable ${step} has no first node`);\n            }\n            if (currentLastNode) {\n                graph.addEdge(currentLastNode, stepFirstNode);\n            }\n            currentLastNode = stepGraph.lastNode();\n        });\n        return graph;\n    }\n    pipe(coerceable) {\n        if (RunnableSequence.isRunnableSequence(coerceable)) {\n            return new RunnableSequence({\n                first: this.first,\n                middle: this.middle.concat([\n                    this.last,\n                    coerceable.first,\n                    ...coerceable.middle\n                ]),\n                last: coerceable.last,\n                name: this.name ?? coerceable.name\n            });\n        } else {\n            return new RunnableSequence({\n                first: this.first,\n                middle: [\n                    ...this.middle,\n                    this.last\n                ],\n                last: _coerceToRunnable(coerceable),\n                name: this.name\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing) {\n        return Array.isArray(thing.middle) && Runnable.isRunnable(thing);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from([first, ...runnables], name) {\n        return new RunnableSequence({\n            first: _coerceToRunnable(first),\n            middle: runnables.slice(0, -1).map(_coerceToRunnable),\n            last: _coerceToRunnable(runnables[runnables.length - 1]),\n            name\n        });\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * const mapChain = RunnableMap.from({\n *   joke: PromptTemplate.fromTemplate(\"Tell me a joke about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n *   poem: PromptTemplate.fromTemplate(\"write a 2-line poem about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n * });\n * const result = await mapChain.invoke({ topic: \"bear\" });\n * ```\n */ class RunnableMap extends Runnable {\n    static lc_name() {\n        return \"RunnableMap\";\n    }\n    getStepsKeys() {\n        return Object.keys(this.steps);\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"steps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.steps = {};\n        for (const [key, value] of Object.entries(fields.steps)){\n            this.steps[key] = _coerceToRunnable(value);\n        }\n    }\n    static from(steps) {\n        return new RunnableMap({\n            steps\n        });\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), {\n            input\n        }, undefined, undefined, undefined, undefined, config?.runName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const output = {};\n        try {\n            await Promise.all(Object.entries(this.steps).map(async ([key, runnable])=>{\n                output[key] = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`map:key:${key}`)\n                }));\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(output);\n        return output;\n    }\n    async *_transform(generator, runManager, options) {\n        // shallow copy steps to ignore changes while iterating\n        const steps = {\n            ...this.steps\n        };\n        // each step gets a copy of the input iterator\n        const inputCopies = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.atee)(generator, Object.keys(steps).length);\n        // start the first iteration of each output iterator\n        const tasks = new Map(Object.entries(steps).map(([key, runnable], i)=>{\n            const gen = runnable.transform(inputCopies[i], (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                callbacks: runManager?.getChild(`map:key:${key}`)\n            }));\n            return [\n                key,\n                gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    }))\n            ];\n        }));\n        // yield chunks as they become available,\n        // starting new iterations as needed,\n        // until all iterators are done\n        while(tasks.size){\n            const { key, result, gen } = await Promise.race(tasks.values());\n            tasks.delete(key);\n            if (!result.done) {\n                yield {\n                    [key]: result.value\n                };\n                tasks.set(key, gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    })));\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that runs a callable.\n */ class RunnableLambda extends Runnable {\n    static lc_name() {\n        return \"RunnableLambda\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.func = fields.func;\n    }\n    static from(func) {\n        return new RunnableLambda({\n            func\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return new Promise((resolve, reject)=>{\n            const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n            });\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorageProviderSingleton.getInstance().run(childConfig, async ()=>{\n                try {\n                    let output = await this.func(input, {\n                        ...childConfig,\n                        config: childConfig\n                    });\n                    if (output && Runnable.isRunnable(output)) {\n                        if (config?.recursionLimit === 0) {\n                            throw new Error(\"Recursion limit reached.\");\n                        }\n                        output = await output.invoke(input, {\n                            ...childConfig,\n                            recursionLimit: (childConfig.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n                        });\n                    }\n                    resolve(output);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke, input, options);\n    }\n    async *_transform(generator, runManager, config) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalChunk, chunk);\n                } catch (e) {\n                    finalChunk = chunk;\n                }\n            }\n        }\n        const output = await new Promise((resolve, reject)=>{\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorageProviderSingleton.getInstance().run(config, async ()=>{\n                try {\n                    const res = await this.func(finalChunk, {\n                        ...config,\n                        config\n                    });\n                    resolve(res);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n        if (output && Runnable.isRunnable(output)) {\n            if (config?.recursionLimit === 0) {\n                throw new Error(\"Recursion limit reached.\");\n            }\n            const stream = await output.stream(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n            }));\n            for await (const chunk of stream){\n                yield chunk;\n            }\n        } else {\n            yield output;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nclass RunnableParallel extends RunnableMap {\n}\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n */ class RunnableWithFallbacks extends Runnable {\n    static lc_name() {\n        return \"RunnableWithFallbacks\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fallbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.fallbacks = fields.fallbacks;\n    }\n    *runnables() {\n        yield this.runnable;\n        for (const fallback of this.fallbacks){\n            yield fallback;\n        }\n    }\n    async invoke(input, options) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(options?.callbacks, undefined, options?.tags, undefined, options?.metadata);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, undefined, undefined, undefined, options?.runName);\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const output = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                    callbacks: runManager?.getChild()\n                }));\n                await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n                return output;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (firstError === undefined) {\n            throw new Error(\"No error stored at end of fallback.\");\n        }\n        await runManager?.handleChainError(firstError);\n        throw firstError;\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"Not implemented.\");\n        }\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map((config)=>_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata)));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), undefined, undefined, undefined, undefined, configList[i].runName)));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const outputs = await runnable.batch(inputs, runManagers.map((runManager, j)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(configList[j], {\n                        callbacks: runManager?.getChild()\n                    })), batchOptions);\n                await Promise.all(runManagers.map((runManager, i)=>runManager?.handleChainEnd(_coerceToDict(outputs[i], \"output\"))));\n                return outputs;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (!firstError) {\n            throw new Error(\"No error stored at end of fallbacks.\");\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(firstError)));\n        throw firstError;\n    }\n}\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nfunction _coerceToRunnable(coerceable) {\n    if (typeof coerceable === \"function\") {\n        return new RunnableLambda({\n            func: coerceable\n        });\n    } else if (Runnable.isRunnable(coerceable)) {\n        return coerceable;\n    } else if (!Array.isArray(coerceable) && typeof coerceable === \"object\") {\n        const runnables = {};\n        for (const [key, value] of Object.entries(coerceable)){\n            runnables[key] = _coerceToRunnable(value);\n        }\n        return new RunnableMap({\n            steps: runnables\n        });\n    } else {\n        throw new Error(`Expected a Runnable, function or object.\\nInstead got an unsupported type.`);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n */ class RunnableAssign extends Runnable {\n    static lc_name() {\n        return \"RunnableAssign\";\n    }\n    constructor(fields){\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (fields instanceof RunnableMap) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                mapper: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"mapper\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.mapper = fields.mapper;\n    }\n    async invoke(input, options) {\n        const mapperResult = await this.mapper.invoke(input, options);\n        return {\n            ...input,\n            ...mapperResult\n        };\n    }\n    async *_transform(generator, runManager, options) {\n        // collect mapper keys\n        const mapperKeys = this.mapper.getStepsKeys();\n        // create two input gens, one for the mapper, one for the input\n        const [forPassthrough, forMapper] = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.atee)(generator);\n        // create mapper output gen\n        const mapperOutput = this.mapper.transform(forMapper, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n            callbacks: runManager?.getChild()\n        }));\n        // start the mapper\n        const firstMapperChunkPromise = mapperOutput.next();\n        // yield the passthrough\n        for await (const chunk of forPassthrough){\n            if (typeof chunk !== \"object\" || Array.isArray(chunk)) {\n                throw new Error(`RunnableAssign can only be used with objects as input, got ${typeof chunk}`);\n            }\n            const filtered = Object.fromEntries(Object.entries(chunk).filter(([key])=>!mapperKeys.includes(key)));\n            if (Object.keys(filtered).length > 0) {\n                yield filtered;\n            }\n        }\n        // yield the mapper output\n        yield (await firstMapperChunkPromise).value;\n        for await (const chunk of mapperOutput){\n            yield chunk;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n */ class RunnablePick extends Runnable {\n    static lc_name() {\n        return \"RunnablePick\";\n    }\n    constructor(fields){\n        if (typeof fields === \"string\" || Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                keys: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"keys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keys = fields.keys;\n    }\n    async _pick(input) {\n        if (typeof this.keys === \"string\") {\n            return input[this.keys];\n        } else {\n            const picked = this.keys.map((key)=>[\n                    key,\n                    input[key]\n                ]).filter((v)=>v[1] !== undefined);\n            return picked.length === 0 ? undefined : Object.fromEntries(picked);\n        }\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._pick.bind(this), input, options);\n    }\n    async *_transform(generator) {\n        for await (const chunk of generator){\n            const picked = await this._pick(chunk);\n            if (picked !== undefined) {\n                yield picked;\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/branch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnableBranch: () => (/* binding */ RunnableBranch)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n\n\n\n/**\n * Class that represents a runnable branch. The RunnableBranch is\n * initialized with an array of branches and a default branch. When invoked,\n * it evaluates the condition of each branch in order and executes the\n * corresponding branch if the condition is true. If none of the conditions\n * are true, it executes the default branch.\n * @example\n * ```typescript\n * const branch = RunnableBranch.from([\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"anthropic\"),\n *     anthropicChain,\n *   ],\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"langchain\"),\n *     langChainChain,\n *   ],\n *   generalChain,\n * ]);\n *\n * const fullChain = RunnableSequence.from([\n *   {\n *     topic: classificationChain,\n *     question: (input: { question: string }) => input.question,\n *   },\n *   branch,\n * ]);\n *\n * const result = await fullChain.invoke({\n *   question: \"how do I use LangChain?\",\n * });\n * ```\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass RunnableBranch extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    static lc_name() {\n        return \"RunnableBranch\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"default\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"branches\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.branches = fields.branches;\n        this.default = fields.default;\n    }\n    /**\n     * Convenience method for instantiating a RunnableBranch from\n     * RunnableLikes (objects, functions, or Runnables).\n     *\n     * Each item in the input except for the last one should be a\n     * tuple with two items. The first is a \"condition\" RunnableLike that\n     * returns \"true\" if the second RunnableLike in the tuple should run.\n     *\n     * The final item in the input should be a RunnableLike that acts as a\n     * default branch if no other branches match.\n     *\n     * @example\n     * ```ts\n     * import { RunnableBranch } from \"@langchain/core/runnables\";\n     *\n     * const branch = RunnableBranch.from([\n     *   [(x: number) => x > 0, (x: number) => x + 1],\n     *   [(x: number) => x < 0, (x: number) => x - 1],\n     *   (x: number) => x\n     * ]);\n     * ```\n     * @param branches An array where the every item except the last is a tuple of [condition, runnable]\n     *   pairs. The last item is a default runnable which is invoked if no other condition matches.\n     * @returns A new RunnableBranch.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from(branches) {\n        if (branches.length < 1) {\n            throw new Error(\"RunnableBranch requires at least one branch\");\n        }\n        const branchLikes = branches.slice(0, -1);\n        const coercedBranches = branchLikes.map(([condition, runnable])=>[\n                (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(condition),\n                (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(runnable)\n            ]);\n        const defaultBranch = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(branches[branches.length - 1]);\n        return new this({\n            branches: coercedBranches,\n            default: defaultBranch\n        });\n    }\n    async _invoke(input, config, runManager) {\n        let result;\n        for(let i = 0; i < this.branches.length; i += 1){\n            const [condition, branchRunnable] = this.branches[i];\n            const conditionValue = await condition.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                callbacks: runManager?.getChild(`condition:${i + 1}`)\n            }));\n            if (conditionValue) {\n                result = await branchRunnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`branch:${i + 1}`)\n                }));\n                break;\n            }\n        }\n        if (!result) {\n            result = await this.default.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                callbacks: runManager?.getChild(\"branch:default\")\n            }));\n        }\n        return result;\n    }\n    async invoke(input, config = {}) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async *_streamIterator(input, config) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToDict)(input, \"input\"), undefined, undefined, undefined, undefined, config?.runName);\n        let finalOutput;\n        let finalOutputSupported = true;\n        let stream;\n        try {\n            for(let i = 0; i < this.branches.length; i += 1){\n                const [condition, branchRunnable] = this.branches[i];\n                const conditionValue = await condition.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`condition:${i + 1}`)\n                }));\n                if (conditionValue) {\n                    stream = await branchRunnable.stream(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                        callbacks: runManager?.getChild(`branch:${i + 1}`)\n                    }));\n                    for await (const chunk of stream){\n                        yield chunk;\n                        if (finalOutputSupported) {\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            } else {\n                                try {\n                                    finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.concat)(finalOutput, chunk);\n                                } catch (e) {\n                                    finalOutput = undefined;\n                                    finalOutputSupported = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (stream === undefined) {\n                stream = await this.default.stream(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(\"branch:default\")\n                }));\n                for await (const chunk of stream){\n                    yield chunk;\n                    if (finalOutputSupported) {\n                        if (finalOutput === undefined) {\n                            finalOutput = chunk;\n                        } else {\n                            try {\n                                finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.concat)(finalOutput, chunk);\n                            } catch (e) {\n                                finalOutput = undefined;\n                                finalOutputSupported = false;\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {});\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/config.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RECURSION_LIMIT: () => (/* binding */ DEFAULT_RECURSION_LIMIT),\n/* harmony export */   ensureConfig: () => (/* binding */ ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* binding */ getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   patchConfig: () => (/* binding */ patchConfig)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n\n\nconst DEFAULT_RECURSION_LIMIT = 25;\nasync function getCallbackManagerForConfig(config) {\n    return _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n}\nfunction mergeConfigs(...configs) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const copy = ensureConfig();\n    for (const options of configs.filter((c)=>!!c)){\n        for (const key of Object.keys(options)){\n            if (key === \"metadata\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"tags\") {\n                copy[key] = [\n                    ...new Set(copy[key].concat(options[key] ?? []))\n                ];\n            } else if (key === \"configurable\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"callbacks\") {\n                const baseCallbacks = copy.callbacks;\n                const providedCallbacks = options.callbacks;\n                // callbacks can be either undefined, Array<handler> or manager\n                // so merging two callbacks values has 6 cases\n                if (Array.isArray(providedCallbacks)) {\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        copy.callbacks = baseCallbacks.concat(providedCallbacks);\n                    } else {\n                        // baseCallbacks is a manager\n                        const manager = baseCallbacks.copy();\n                        for (const callback of providedCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    }\n                } else if (providedCallbacks) {\n                    // providedCallbacks is a manager\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        const manager = providedCallbacks.copy();\n                        for (const callback of baseCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    } else {\n                        // baseCallbacks is also a manager\n                        copy.callbacks = new _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager(providedCallbacks._parentRunId, {\n                            handlers: baseCallbacks.handlers.concat(providedCallbacks.handlers),\n                            inheritableHandlers: baseCallbacks.inheritableHandlers.concat(providedCallbacks.inheritableHandlers),\n                            tags: Array.from(new Set(baseCallbacks.tags.concat(providedCallbacks.tags))),\n                            inheritableTags: Array.from(new Set(baseCallbacks.inheritableTags.concat(providedCallbacks.inheritableTags))),\n                            metadata: {\n                                ...baseCallbacks.metadata,\n                                ...providedCallbacks.metadata\n                            }\n                        });\n                    }\n                }\n            } else {\n                const typedKey = key;\n                copy[typedKey] = options[typedKey] ?? copy[typedKey];\n            }\n        }\n    }\n    return copy;\n}\nconst PRIMITIVES = new Set([\n    \"string\",\n    \"number\",\n    \"boolean\"\n]);\n/**\n * Ensure that a passed config is an object with all required keys present.\n */ function ensureConfig(config) {\n    const loadedConfig = config ?? _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.getInstance().getStore();\n    let empty = {\n        tags: [],\n        metadata: {},\n        callbacks: undefined,\n        recursionLimit: 25\n    };\n    if (loadedConfig) {\n        empty = {\n            ...empty,\n            ...loadedConfig\n        };\n    }\n    if (loadedConfig?.configurable) {\n        for (const key of Object.keys(loadedConfig.configurable)){\n            if (PRIMITIVES.has(typeof loadedConfig.configurable[key]) && !empty.metadata?.[key]) {\n                if (!empty.metadata) {\n                    empty.metadata = {};\n                }\n                empty.metadata[key] = loadedConfig.configurable[key];\n            }\n        }\n    }\n    return empty;\n}\n/**\n * Helper function that patches runnable configs with updated properties.\n */ function patchConfig(config = {}, { callbacks, maxConcurrency, recursionLimit, runName, configurable } = {}) {\n    const newConfig = ensureConfig(config);\n    if (callbacks !== undefined) {\n        /**\n         * If we're replacing callbacks we need to unset runName\n         * since that should apply only to the same run as the original callbacks\n         */ delete newConfig.runName;\n        newConfig.callbacks = callbacks;\n    }\n    if (recursionLimit !== undefined) {\n        newConfig.recursionLimit = recursionLimit;\n    }\n    if (maxConcurrency !== undefined) {\n        newConfig.maxConcurrency = maxConcurrency;\n    }\n    if (runName !== undefined) {\n        newConfig.runName = runName;\n    }\n    if (configurable !== undefined) {\n        newConfig.configurable = {\n            ...newConfig.configurable,\n            ...configurable\n        };\n    }\n    return newConfig;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTBFO0FBQ0U7QUFDckUsTUFBTUcsMEJBQTBCLEdBQUc7QUFDbkMsZUFBZUMsNEJBQTRCQyxNQUFNO0lBQ3BELE9BQU9MLGtFQUFlQSxDQUFDTSxTQUFTLENBQUNELFFBQVFFLFdBQVdDLFdBQVdILFFBQVFJLE1BQU1ELFdBQVdILFFBQVFLO0FBQ3BHO0FBQ08sU0FBU0MsYUFBYSxHQUFHQyxPQUFPO0lBQ25DLDhEQUE4RDtJQUM5RCxNQUFNQyxPQUFPQztJQUNiLEtBQUssTUFBTUMsV0FBV0gsUUFBUUksTUFBTSxDQUFDLENBQUNDLElBQU0sQ0FBQyxDQUFDQSxHQUFJO1FBQzlDLEtBQUssTUFBTUMsT0FBT0MsT0FBT0MsSUFBSSxDQUFDTCxTQUFVO1lBQ3BDLElBQUlHLFFBQVEsWUFBWTtnQkFDcEJMLElBQUksQ0FBQ0ssSUFBSSxHQUFHO29CQUFFLEdBQUdMLElBQUksQ0FBQ0ssSUFBSTtvQkFBRSxHQUFHSCxPQUFPLENBQUNHLElBQUk7Z0JBQUM7WUFDaEQsT0FDSyxJQUFJQSxRQUFRLFFBQVE7Z0JBQ3JCTCxJQUFJLENBQUNLLElBQUksR0FBRzt1QkFBSSxJQUFJRyxJQUFJUixJQUFJLENBQUNLLElBQUksQ0FBQ0ksTUFBTSxDQUFDUCxPQUFPLENBQUNHLElBQUksSUFBSSxFQUFFO2lCQUFHO1lBQ2xFLE9BQ0ssSUFBSUEsUUFBUSxnQkFBZ0I7Z0JBQzdCTCxJQUFJLENBQUNLLElBQUksR0FBRztvQkFBRSxHQUFHTCxJQUFJLENBQUNLLElBQUk7b0JBQUUsR0FBR0gsT0FBTyxDQUFDRyxJQUFJO2dCQUFDO1lBQ2hELE9BQ0ssSUFBSUEsUUFBUSxhQUFhO2dCQUMxQixNQUFNSyxnQkFBZ0JWLEtBQUtOLFNBQVM7Z0JBQ3BDLE1BQU1pQixvQkFBb0JULFFBQVFSLFNBQVM7Z0JBQzNDLCtEQUErRDtnQkFDL0QsOENBQThDO2dCQUM5QyxJQUFJa0IsTUFBTUMsT0FBTyxDQUFDRixvQkFBb0I7b0JBQ2xDLElBQUksQ0FBQ0QsZUFBZTt3QkFDaEJWLEtBQUtOLFNBQVMsR0FBR2lCO29CQUNyQixPQUNLLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0gsZ0JBQWdCO3dCQUNuQ1YsS0FBS04sU0FBUyxHQUFHZ0IsY0FBY0QsTUFBTSxDQUFDRTtvQkFDMUMsT0FDSzt3QkFDRCw2QkFBNkI7d0JBQzdCLE1BQU1HLFVBQVVKLGNBQWNWLElBQUk7d0JBQ2xDLEtBQUssTUFBTWUsWUFBWUosa0JBQW1COzRCQUN0Q0csUUFBUUUsVUFBVSxDQUFDNUIsb0VBQWFBLENBQUMyQixXQUFXO3dCQUNoRDt3QkFDQWYsS0FBS04sU0FBUyxHQUFHb0I7b0JBQ3JCO2dCQUNKLE9BQ0ssSUFBSUgsbUJBQW1CO29CQUN4QixpQ0FBaUM7b0JBQ2pDLElBQUksQ0FBQ0QsZUFBZTt3QkFDaEJWLEtBQUtOLFNBQVMsR0FBR2lCO29CQUNyQixPQUNLLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0gsZ0JBQWdCO3dCQUNuQyxNQUFNSSxVQUFVSCxrQkFBa0JYLElBQUk7d0JBQ3RDLEtBQUssTUFBTWUsWUFBWUwsY0FBZTs0QkFDbENJLFFBQVFFLFVBQVUsQ0FBQzVCLG9FQUFhQSxDQUFDMkIsV0FBVzt3QkFDaEQ7d0JBQ0FmLEtBQUtOLFNBQVMsR0FBR29CO29CQUNyQixPQUNLO3dCQUNELGtDQUFrQzt3QkFDbENkLEtBQUtOLFNBQVMsR0FBRyxJQUFJUCxrRUFBZUEsQ0FBQ3dCLGtCQUFrQk0sWUFBWSxFQUFFOzRCQUNqRUMsVUFBVVIsY0FBY1EsUUFBUSxDQUFDVCxNQUFNLENBQUNFLGtCQUFrQk8sUUFBUTs0QkFDbEVDLHFCQUFxQlQsY0FBY1MsbUJBQW1CLENBQUNWLE1BQU0sQ0FBQ0Usa0JBQWtCUSxtQkFBbUI7NEJBQ25HdkIsTUFBTWdCLE1BQU1RLElBQUksQ0FBQyxJQUFJWixJQUFJRSxjQUFjZCxJQUFJLENBQUNhLE1BQU0sQ0FBQ0Usa0JBQWtCZixJQUFJOzRCQUN6RXlCLGlCQUFpQlQsTUFBTVEsSUFBSSxDQUFDLElBQUlaLElBQUlFLGNBQWNXLGVBQWUsQ0FBQ1osTUFBTSxDQUFDRSxrQkFBa0JVLGVBQWU7NEJBQzFHeEIsVUFBVTtnQ0FDTixHQUFHYSxjQUFjYixRQUFRO2dDQUN6QixHQUFHYyxrQkFBa0JkLFFBQVE7NEJBQ2pDO3dCQUNKO29CQUNKO2dCQUNKO1lBQ0osT0FDSztnQkFDRCxNQUFNeUIsV0FBV2pCO2dCQUNqQkwsSUFBSSxDQUFDc0IsU0FBUyxHQUFHcEIsT0FBTyxDQUFDb0IsU0FBUyxJQUFJdEIsSUFBSSxDQUFDc0IsU0FBUztZQUN4RDtRQUNKO0lBQ0o7SUFDQSxPQUFPdEI7QUFDWDtBQUNBLE1BQU11QixhQUFhLElBQUlmLElBQUk7SUFBQztJQUFVO0lBQVU7Q0FBVTtBQUMxRDs7Q0FFQyxHQUNNLFNBQVNQLGFBQWFULE1BQU07SUFDL0IsTUFBTWdDLGVBQWVoQyxVQUFVSCxvRkFBa0NBLENBQUNvQyxXQUFXLEdBQUdDLFFBQVE7SUFDeEYsSUFBSUMsUUFBUTtRQUNSL0IsTUFBTSxFQUFFO1FBQ1JDLFVBQVUsQ0FBQztRQUNYSCxXQUFXQztRQUNYaUMsZ0JBQWdCO0lBQ3BCO0lBQ0EsSUFBSUosY0FBYztRQUNkRyxRQUFRO1lBQUUsR0FBR0EsS0FBSztZQUFFLEdBQUdILFlBQVk7UUFBQztJQUN4QztJQUNBLElBQUlBLGNBQWNLLGNBQWM7UUFDNUIsS0FBSyxNQUFNeEIsT0FBT0MsT0FBT0MsSUFBSSxDQUFDaUIsYUFBYUssWUFBWSxFQUFHO1lBQ3RELElBQUlOLFdBQVdPLEdBQUcsQ0FBQyxPQUFPTixhQUFhSyxZQUFZLENBQUN4QixJQUFJLEtBQ3BELENBQUNzQixNQUFNOUIsUUFBUSxFQUFFLENBQUNRLElBQUksRUFBRTtnQkFDeEIsSUFBSSxDQUFDc0IsTUFBTTlCLFFBQVEsRUFBRTtvQkFDakI4QixNQUFNOUIsUUFBUSxHQUFHLENBQUM7Z0JBQ3RCO2dCQUNBOEIsTUFBTTlCLFFBQVEsQ0FBQ1EsSUFBSSxHQUFHbUIsYUFBYUssWUFBWSxDQUFDeEIsSUFBSTtZQUN4RDtRQUNKO0lBQ0o7SUFDQSxPQUFPc0I7QUFDWDtBQUNBOztDQUVDLEdBQ00sU0FBU0ksWUFBWXZDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRUUsU0FBUyxFQUFFc0MsY0FBYyxFQUFFSixjQUFjLEVBQUVLLE9BQU8sRUFBRUosWUFBWSxFQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQy9HLE1BQU1LLFlBQVlqQyxhQUFhVDtJQUMvQixJQUFJRSxjQUFjQyxXQUFXO1FBQ3pCOzs7U0FHQyxHQUNELE9BQU91QyxVQUFVRCxPQUFPO1FBQ3hCQyxVQUFVeEMsU0FBUyxHQUFHQTtJQUMxQjtJQUNBLElBQUlrQyxtQkFBbUJqQyxXQUFXO1FBQzlCdUMsVUFBVU4sY0FBYyxHQUFHQTtJQUMvQjtJQUNBLElBQUlJLG1CQUFtQnJDLFdBQVc7UUFDOUJ1QyxVQUFVRixjQUFjLEdBQUdBO0lBQy9CO0lBQ0EsSUFBSUMsWUFBWXRDLFdBQVc7UUFDdkJ1QyxVQUFVRCxPQUFPLEdBQUdBO0lBQ3hCO0lBQ0EsSUFBSUosaUJBQWlCbEMsV0FBVztRQUM1QnVDLFVBQVVMLFlBQVksR0FBRztZQUFFLEdBQUdLLFVBQVVMLFlBQVk7WUFBRSxHQUFHQSxZQUFZO1FBQUM7SUFDMUU7SUFDQSxPQUFPSztBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy9jb25maWcuanM/MjdlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWxsYmFja01hbmFnZXIsIGVuc3VyZUhhbmRsZXIsIH0gZnJvbSBcIi4uL2NhbGxiYWNrcy9tYW5hZ2VyLmpzXCI7XG5pbXBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIH0gZnJvbSBcIi4uL3NpbmdsZXRvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFQ1VSU0lPTl9MSU1JVCA9IDI1O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhbGxiYWNrTWFuYWdlckZvckNvbmZpZyhjb25maWcpIHtcbiAgICByZXR1cm4gQ2FsbGJhY2tNYW5hZ2VyLmNvbmZpZ3VyZShjb25maWc/LmNhbGxiYWNrcywgdW5kZWZpbmVkLCBjb25maWc/LnRhZ3MsIHVuZGVmaW5lZCwgY29uZmlnPy5tZXRhZGF0YSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDb25maWdzKC4uLmNvbmZpZ3MpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IGNvcHkgPSBlbnN1cmVDb25maWcoKTtcbiAgICBmb3IgKGNvbnN0IG9wdGlvbnMgb2YgY29uZmlncy5maWx0ZXIoKGMpID0+ICEhYykpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob3B0aW9ucykpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IFwibWV0YWRhdGFcIikge1xuICAgICAgICAgICAgICAgIGNvcHlba2V5XSA9IHsgLi4uY29weVtrZXldLCAuLi5vcHRpb25zW2tleV0gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJ0YWdzXCIpIHtcbiAgICAgICAgICAgICAgICBjb3B5W2tleV0gPSBbLi4ubmV3IFNldChjb3B5W2tleV0uY29uY2F0KG9wdGlvbnNba2V5XSA/PyBbXSkpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJjb25maWd1cmFibGVcIikge1xuICAgICAgICAgICAgICAgIGNvcHlba2V5XSA9IHsgLi4uY29weVtrZXldLCAuLi5vcHRpb25zW2tleV0gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJjYWxsYmFja3NcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VDYWxsYmFja3MgPSBjb3B5LmNhbGxiYWNrcztcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlZENhbGxiYWNrcyA9IG9wdGlvbnMuY2FsbGJhY2tzO1xuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrcyBjYW4gYmUgZWl0aGVyIHVuZGVmaW5lZCwgQXJyYXk8aGFuZGxlcj4gb3IgbWFuYWdlclxuICAgICAgICAgICAgICAgIC8vIHNvIG1lcmdpbmcgdHdvIGNhbGxiYWNrcyB2YWx1ZXMgaGFzIDYgY2FzZXNcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm92aWRlZENhbGxiYWNrcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFiYXNlQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5LmNhbGxiYWNrcyA9IHByb3ZpZGVkQ2FsbGJhY2tzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYmFzZUNhbGxiYWNrcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHkuY2FsbGJhY2tzID0gYmFzZUNhbGxiYWNrcy5jb25jYXQocHJvdmlkZWRDYWxsYmFja3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFzZUNhbGxiYWNrcyBpcyBhIG1hbmFnZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hbmFnZXIgPSBiYXNlQ2FsbGJhY2tzLmNvcHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgcHJvdmlkZWRDYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VyLmFkZEhhbmRsZXIoZW5zdXJlSGFuZGxlcihjYWxsYmFjayksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29weS5jYWxsYmFja3MgPSBtYW5hZ2VyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3ZpZGVkQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHByb3ZpZGVkQ2FsbGJhY2tzIGlzIGEgbWFuYWdlclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJhc2VDYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHkuY2FsbGJhY2tzID0gcHJvdmlkZWRDYWxsYmFja3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShiYXNlQ2FsbGJhY2tzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFuYWdlciA9IHByb3ZpZGVkQ2FsbGJhY2tzLmNvcHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgYmFzZUNhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZXIuYWRkSGFuZGxlcihlbnN1cmVIYW5kbGVyKGNhbGxiYWNrKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5LmNhbGxiYWNrcyA9IG1hbmFnZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiYXNlQ2FsbGJhY2tzIGlzIGFsc28gYSBtYW5hZ2VyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5LmNhbGxiYWNrcyA9IG5ldyBDYWxsYmFja01hbmFnZXIocHJvdmlkZWRDYWxsYmFja3MuX3BhcmVudFJ1bklkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnM6IGJhc2VDYWxsYmFja3MuaGFuZGxlcnMuY29uY2F0KHByb3ZpZGVkQ2FsbGJhY2tzLmhhbmRsZXJzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0YWJsZUhhbmRsZXJzOiBiYXNlQ2FsbGJhY2tzLmluaGVyaXRhYmxlSGFuZGxlcnMuY29uY2F0KHByb3ZpZGVkQ2FsbGJhY2tzLmluaGVyaXRhYmxlSGFuZGxlcnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3M6IEFycmF5LmZyb20obmV3IFNldChiYXNlQ2FsbGJhY2tzLnRhZ3MuY29uY2F0KHByb3ZpZGVkQ2FsbGJhY2tzLnRhZ3MpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFibGVUYWdzOiBBcnJheS5mcm9tKG5ldyBTZXQoYmFzZUNhbGxiYWNrcy5pbmhlcml0YWJsZVRhZ3MuY29uY2F0KHByb3ZpZGVkQ2FsbGJhY2tzLmluaGVyaXRhYmxlVGFncykpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5iYXNlQ2FsbGJhY2tzLm1ldGFkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5wcm92aWRlZENhbGxiYWNrcy5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlZEtleSA9IGtleTtcbiAgICAgICAgICAgICAgICBjb3B5W3R5cGVkS2V5XSA9IG9wdGlvbnNbdHlwZWRLZXldID8/IGNvcHlbdHlwZWRLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xufVxuY29uc3QgUFJJTUlUSVZFUyA9IG5ldyBTZXQoW1wic3RyaW5nXCIsIFwibnVtYmVyXCIsIFwiYm9vbGVhblwiXSk7XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgcGFzc2VkIGNvbmZpZyBpcyBhbiBvYmplY3Qgd2l0aCBhbGwgcmVxdWlyZWQga2V5cyBwcmVzZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlQ29uZmlnKGNvbmZpZykge1xuICAgIGNvbnN0IGxvYWRlZENvbmZpZyA9IGNvbmZpZyA/PyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uLmdldEluc3RhbmNlKCkuZ2V0U3RvcmUoKTtcbiAgICBsZXQgZW1wdHkgPSB7XG4gICAgICAgIHRhZ3M6IFtdLFxuICAgICAgICBtZXRhZGF0YToge30sXG4gICAgICAgIGNhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICByZWN1cnNpb25MaW1pdDogMjUsXG4gICAgfTtcbiAgICBpZiAobG9hZGVkQ29uZmlnKSB7XG4gICAgICAgIGVtcHR5ID0geyAuLi5lbXB0eSwgLi4ubG9hZGVkQ29uZmlnIH07XG4gICAgfVxuICAgIGlmIChsb2FkZWRDb25maWc/LmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhsb2FkZWRDb25maWcuY29uZmlndXJhYmxlKSkge1xuICAgICAgICAgICAgaWYgKFBSSU1JVElWRVMuaGFzKHR5cGVvZiBsb2FkZWRDb25maWcuY29uZmlndXJhYmxlW2tleV0pICYmXG4gICAgICAgICAgICAgICAgIWVtcHR5Lm1ldGFkYXRhPy5ba2V5XSkge1xuICAgICAgICAgICAgICAgIGlmICghZW1wdHkubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1wdHkubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW1wdHkubWV0YWRhdGFba2V5XSA9IGxvYWRlZENvbmZpZy5jb25maWd1cmFibGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW1wdHk7XG59XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IHBhdGNoZXMgcnVubmFibGUgY29uZmlncyB3aXRoIHVwZGF0ZWQgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhdGNoQ29uZmlnKGNvbmZpZyA9IHt9LCB7IGNhbGxiYWNrcywgbWF4Q29uY3VycmVuY3ksIHJlY3Vyc2lvbkxpbWl0LCBydW5OYW1lLCBjb25maWd1cmFibGUsIH0gPSB7fSkge1xuICAgIGNvbnN0IG5ld0NvbmZpZyA9IGVuc3VyZUNvbmZpZyhjb25maWcpO1xuICAgIGlmIChjYWxsYmFja3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UncmUgcmVwbGFjaW5nIGNhbGxiYWNrcyB3ZSBuZWVkIHRvIHVuc2V0IHJ1bk5hbWVcbiAgICAgICAgICogc2luY2UgdGhhdCBzaG91bGQgYXBwbHkgb25seSB0byB0aGUgc2FtZSBydW4gYXMgdGhlIG9yaWdpbmFsIGNhbGxiYWNrc1xuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlIG5ld0NvbmZpZy5ydW5OYW1lO1xuICAgICAgICBuZXdDb25maWcuY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICAgIH1cbiAgICBpZiAocmVjdXJzaW9uTGltaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdDb25maWcucmVjdXJzaW9uTGltaXQgPSByZWN1cnNpb25MaW1pdDtcbiAgICB9XG4gICAgaWYgKG1heENvbmN1cnJlbmN5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3Q29uZmlnLm1heENvbmN1cnJlbmN5ID0gbWF4Q29uY3VycmVuY3k7XG4gICAgfVxuICAgIGlmIChydW5OYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3Q29uZmlnLnJ1bk5hbWUgPSBydW5OYW1lO1xuICAgIH1cbiAgICBpZiAoY29uZmlndXJhYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3Q29uZmlnLmNvbmZpZ3VyYWJsZSA9IHsgLi4ubmV3Q29uZmlnLmNvbmZpZ3VyYWJsZSwgLi4uY29uZmlndXJhYmxlIH07XG4gICAgfVxuICAgIHJldHVybiBuZXdDb25maWc7XG59XG4iXSwibmFtZXMiOlsiQ2FsbGJhY2tNYW5hZ2VyIiwiZW5zdXJlSGFuZGxlciIsIkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24iLCJERUZBVUxUX1JFQ1VSU0lPTl9MSU1JVCIsImdldENhbGxiYWNrTWFuYWdlckZvckNvbmZpZyIsImNvbmZpZyIsImNvbmZpZ3VyZSIsImNhbGxiYWNrcyIsInVuZGVmaW5lZCIsInRhZ3MiLCJtZXRhZGF0YSIsIm1lcmdlQ29uZmlncyIsImNvbmZpZ3MiLCJjb3B5IiwiZW5zdXJlQ29uZmlnIiwib3B0aW9ucyIsImZpbHRlciIsImMiLCJrZXkiLCJPYmplY3QiLCJrZXlzIiwiU2V0IiwiY29uY2F0IiwiYmFzZUNhbGxiYWNrcyIsInByb3ZpZGVkQ2FsbGJhY2tzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFuYWdlciIsImNhbGxiYWNrIiwiYWRkSGFuZGxlciIsIl9wYXJlbnRSdW5JZCIsImhhbmRsZXJzIiwiaW5oZXJpdGFibGVIYW5kbGVycyIsImZyb20iLCJpbmhlcml0YWJsZVRhZ3MiLCJ0eXBlZEtleSIsIlBSSU1JVElWRVMiLCJsb2FkZWRDb25maWciLCJnZXRJbnN0YW5jZSIsImdldFN0b3JlIiwiZW1wdHkiLCJyZWN1cnNpb25MaW1pdCIsImNvbmZpZ3VyYWJsZSIsImhhcyIsInBhdGNoQ29uZmlnIiwibWF4Q29uY3VycmVuY3kiLCJydW5OYW1lIiwibmV3Q29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/graph.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graph: () => (/* binding */ Graph),\n/* harmony export */   nodeDataStr: () => (/* binding */ nodeDataStr)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\");\n\n\n\nconst MAX_DATA_DISPLAY_NAME_LENGTH = 42;\nfunction nodeDataStr(node) {\n    if (!(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node.id)) {\n        return node.id;\n    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isRunnableInterface)(node.data)) {\n        try {\n            let data = node.data.toString();\n            if (data.startsWith(\"<\") || data[0] !== data[0].toUpperCase() || data.split(\"\\n\").length > 1) {\n                data = node.data.getName();\n            } else if (data.length > MAX_DATA_DISPLAY_NAME_LENGTH) {\n                data = `${data.substring(0, MAX_DATA_DISPLAY_NAME_LENGTH)}...`;\n            }\n            return data.startsWith(\"Runnable\") ? data.slice(\"Runnable\".length) : data;\n        } catch (error) {\n            return node.data.getName();\n        }\n    } else {\n        return node.data.name ?? \"UnknownSchema\";\n    }\n}\nfunction nodeDataJson(node) {\n    // if node.data is implements Runnable\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isRunnableInterface)(node.data)) {\n        return {\n            type: \"runnable\",\n            data: {\n                id: node.data.lc_id,\n                name: node.data.getName()\n            }\n        };\n    } else {\n        return {\n            type: \"schema\",\n            data: {\n                ...(0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(node.data.schema),\n                title: node.data.name\n            }\n        };\n    }\n}\nclass Graph {\n    constructor(){\n        Object.defineProperty(this, \"nodes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"edges\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    // Convert the graph to a JSON-serializable format.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const stableNodeIds = {};\n        Object.values(this.nodes).forEach((node, i)=>{\n            stableNodeIds[node.id] = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node.id) ? i : node.id;\n        });\n        return {\n            nodes: Object.values(this.nodes).map((node)=>({\n                    id: stableNodeIds[node.id],\n                    ...nodeDataJson(node)\n                })),\n            edges: this.edges.map((edge)=>edge.data ? {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target],\n                    data: edge.data\n                } : {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target]\n                })\n        };\n    }\n    addNode(data, id) {\n        if (id !== undefined && this.nodes[id] !== undefined) {\n            throw new Error(`Node with id ${id} already exists`);\n        }\n        const nodeId = id || (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        const node = {\n            id: nodeId,\n            data\n        };\n        this.nodes[nodeId] = node;\n        return node;\n    }\n    removeNode(node) {\n        // Remove the node from the nodes map\n        delete this.nodes[node.id];\n        // Filter out edges connected to the node\n        this.edges = this.edges.filter((edge)=>edge.source !== node.id && edge.target !== node.id);\n    }\n    addEdge(source, target, data) {\n        if (this.nodes[source.id] === undefined) {\n            throw new Error(`Source node ${source.id} not in graph`);\n        }\n        if (this.nodes[target.id] === undefined) {\n            throw new Error(`Target node ${target.id} not in graph`);\n        }\n        const edge = {\n            source: source.id,\n            target: target.id,\n            data\n        };\n        this.edges.push(edge);\n        return edge;\n    }\n    firstNode() {\n        const targets = new Set(this.edges.map((edge)=>edge.target));\n        const found = [];\n        Object.values(this.nodes).forEach((node)=>{\n            if (!targets.has(node.id)) {\n                found.push(node);\n            }\n        });\n        return found[0];\n    }\n    lastNode() {\n        const sources = new Set(this.edges.map((edge)=>edge.source));\n        const found = [];\n        Object.values(this.nodes).forEach((node)=>{\n            if (!sources.has(node.id)) {\n                found.push(node);\n            }\n        });\n        return found[0];\n    }\n    extend(graph) {\n        // Add all nodes from the other graph, taking care to avoid duplicates\n        Object.entries(graph.nodes).forEach(([key, value])=>{\n            this.nodes[key] = value;\n        });\n        // Add all edges from the other graph\n        this.edges = [\n            ...this.edges,\n            ...graph.edges\n        ];\n    }\n    trimFirstNode() {\n        const firstNode = this.firstNode();\n        if (firstNode) {\n            const outgoingEdges = this.edges.filter((edge)=>edge.source === firstNode.id);\n            if (Object.keys(this.nodes).length === 1 || outgoingEdges.length === 1) {\n                this.removeNode(firstNode);\n            }\n        }\n    }\n    trimLastNode() {\n        const lastNode = this.lastNode();\n        if (lastNode) {\n            const incomingEdges = this.edges.filter((edge)=>edge.target === lastNode.id);\n            if (Object.keys(this.nodes).length === 1 || incomingEdges.length === 1) {\n                this.removeNode(lastNode);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/history.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/history.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnableWithMessageHistory: () => (/* binding */ RunnableWithMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./passthrough.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\");\n\n\n\n/**\n * Wraps a LCEL chain and manages history. It appends input messages\n * and chain outputs as history, and adds the current history messages to\n * the chain input.\n * @example\n * ```typescript\n * // yarn add @langchain/anthropic @langchain/community @upstash/redis\n *\n * import {\n *   ChatPromptTemplate,\n *   MessagesPlaceholder,\n * } from \"@langchain/core/prompts\";\n * import { ChatAnthropic } from \"@langchain/anthropic\";\n * import { UpstashRedisChatMessageHistory } from \"@langchain/community/stores/message/upstash_redis\";\n * // For demos, you can also use an in-memory store:\n * // import { ChatMessageHistory } from \"langchain/stores/message/in_memory\";\n *\n * const prompt = ChatPromptTemplate.fromMessages([\n *   [\"system\", \"You're an assistant who's good at {ability}\"],\n *   new MessagesPlaceholder(\"history\"),\n *   [\"human\", \"{question}\"],\n * ]);\n *\n * const chain = prompt.pipe(new ChatAnthropic({}));\n *\n * const chainWithHistory = new RunnableWithMessageHistory({\n *   runnable: chain,\n *   getMessageHistory: (sessionId) =>\n *     new UpstashRedisChatMessageHistory({\n *       sessionId,\n *       config: {\n *         url: process.env.UPSTASH_REDIS_REST_URL!,\n *         token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n *       },\n *     }),\n *   inputMessagesKey: \"question\",\n *   historyMessagesKey: \"history\",\n * });\n *\n * const result = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What does cosine mean?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n *\n * const result2 = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What's its inverse?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n * ```\n */ class RunnableWithMessageHistory extends _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableBinding {\n    constructor(fields){\n        let historyChain = new _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableLambda({\n            func: (input, options)=>this._enterHistory(input, options ?? {})\n        }).withConfig({\n            runName: \"loadHistory\"\n        });\n        const messagesKey = fields.historyMessagesKey ?? fields.inputMessagesKey;\n        if (messagesKey) {\n            historyChain = _passthrough_js__WEBPACK_IMPORTED_MODULE_2__.RunnablePassthrough.assign({\n                [messagesKey]: historyChain\n            }).withConfig({\n                runName: \"insertHistory\"\n            });\n        }\n        const bound = historyChain.pipe(fields.runnable.withListeners({\n            onEnd: (run, config)=>this._exitHistory(run, config ?? {})\n        })).withConfig({\n            runName: \"RunnableWithMessageHistory\"\n        });\n        const config = fields.config ?? {};\n        super({\n            ...fields,\n            config,\n            bound\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"historyMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"getMessageHistory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.getMessageHistory = fields.getMessageHistory;\n        this.inputMessagesKey = fields.inputMessagesKey;\n        this.outputMessagesKey = fields.outputMessagesKey;\n        this.historyMessagesKey = fields.historyMessagesKey;\n    }\n    _getInputMessages(inputValue) {\n        if (typeof inputValue === \"string\") {\n            return [\n                new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(inputValue)\n            ];\n        } else if (Array.isArray(inputValue)) {\n            return inputValue;\n        } else {\n            return [\n                inputValue\n            ];\n        }\n    }\n    _getOutputMessages(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    outputValue) {\n        let newOutputValue = outputValue;\n        if (!Array.isArray(outputValue) && !(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(outputValue) && typeof outputValue !== \"string\") {\n            newOutputValue = outputValue[this.outputMessagesKey ?? \"output\"];\n        }\n        if (typeof newOutputValue === \"string\") {\n            return [\n                new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(newOutputValue)\n            ];\n        } else if (Array.isArray(newOutputValue)) {\n            return newOutputValue;\n        } else if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(newOutputValue)) {\n            return [\n                newOutputValue\n            ];\n        }\n        throw new Error(`Expected a string, BaseMessage, or array of BaseMessages. Received: ${JSON.stringify(newOutputValue, null, 2)}`);\n    }\n    async _enterHistory(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, kwargs) {\n        const history = kwargs?.config?.configurable?.messageHistory;\n        if (this.historyMessagesKey) {\n            return history.getMessages();\n        }\n        const inputVal = input || (this.inputMessagesKey ? input[this.inputMessagesKey] : undefined);\n        const historyMessages = history ? await history.getMessages() : [];\n        const returnType = [\n            ...historyMessages,\n            ...this._getInputMessages(inputVal)\n        ];\n        return returnType;\n    }\n    async _exitHistory(run, config) {\n        const history = config.configurable?.messageHistory;\n        // Get input messages\n        const { inputs } = run;\n        const inputValue = inputs[this.inputMessagesKey ?? \"input\"];\n        const inputMessages = this._getInputMessages(inputValue);\n        // Get output messages\n        const outputValue = run.outputs;\n        if (!outputValue) {\n            throw new Error(`Output values from 'Run' undefined. Run: ${JSON.stringify(run, null, 2)}`);\n        }\n        const outputMessages = this._getOutputMessages(outputValue);\n        for await (const message of [\n            ...inputMessages,\n            ...outputMessages\n        ]){\n            await history.addMessage(message);\n        }\n    }\n    async _mergeConfig(...configs) {\n        const config = await super._mergeConfig(...configs);\n        // Extract sessionId\n        if (!config.configurable || !config.configurable.sessionId) {\n            const exampleInput = {\n                [this.inputMessagesKey ?? \"input\"]: \"foo\"\n            };\n            const exampleConfig = {\n                configurable: {\n                    sessionId: \"123\"\n                }\n            };\n            throw new Error(`sessionId is required. Pass it in as part of the config argument to .invoke() or .stream()\\n` + `eg. chain.invoke(${JSON.stringify(exampleInput)}, ${JSON.stringify(exampleConfig)})`);\n        }\n        // attach messageHistory\n        const { sessionId } = config.configurable;\n        config.configurable.messageHistory = await this.getMessageHistory(sessionId);\n        return config;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/history.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_3__.RouterRunnable),\n/* harmony export */   Runnable: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable),\n/* harmony export */   RunnableAssign: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding),\n/* harmony export */   RunnableBranch: () => (/* reexport safe */ _branch_js__WEBPACK_IMPORTED_MODULE_4__.RunnableBranch),\n/* harmony export */   RunnableEach: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel),\n/* harmony export */   RunnablePassthrough: () => (/* reexport safe */ _passthrough_js__WEBPACK_IMPORTED_MODULE_2__.RunnablePassthrough),\n/* harmony export */   RunnablePick: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence),\n/* harmony export */   RunnableWithFallbacks: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks),\n/* harmony export */   RunnableWithMessageHistory: () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_5__.RunnableWithMessageHistory),\n/* harmony export */   _coerceToRunnable: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable),\n/* harmony export */   ensureConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.getCallbackManagerForConfig),\n/* harmony export */   patchConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./passthrough.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./router.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/router.js\");\n/* harmony import */ var _branch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./branch.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js\");\n/* harmony import */ var _history_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./history.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/history.js\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNk47QUFDdkk7QUFDL0I7QUFDVjtBQUNBO0FBQ2MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2luZGV4LmpzPzU1NjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgUnVubmFibGUsIFJ1bm5hYmxlQmluZGluZywgUnVubmFibGVFYWNoLCBSdW5uYWJsZVJldHJ5LCBSdW5uYWJsZVNlcXVlbmNlLCBSdW5uYWJsZU1hcCwgUnVubmFibGVQYXJhbGxlbCwgUnVubmFibGVMYW1iZGEsIFJ1bm5hYmxlV2l0aEZhbGxiYWNrcywgUnVubmFibGVBc3NpZ24sIFJ1bm5hYmxlUGljaywgX2NvZXJjZVRvUnVubmFibGUsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0IHsgZ2V0Q2FsbGJhY2tNYW5hZ2VyRm9yQ29uZmlnLCBwYXRjaENvbmZpZywgZW5zdXJlQ29uZmlnLCB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuZXhwb3J0IHsgUnVubmFibGVQYXNzdGhyb3VnaCB9IGZyb20gXCIuL3Bhc3N0aHJvdWdoLmpzXCI7XG5leHBvcnQgeyBSb3V0ZXJSdW5uYWJsZSB9IGZyb20gXCIuL3JvdXRlci5qc1wiO1xuZXhwb3J0IHsgUnVubmFibGVCcmFuY2ggfSBmcm9tIFwiLi9icmFuY2guanNcIjtcbmV4cG9ydCB7IFJ1bm5hYmxlV2l0aE1lc3NhZ2VIaXN0b3J5LCB9IGZyb20gXCIuL2hpc3RvcnkuanNcIjtcbiJdLCJuYW1lcyI6WyJSdW5uYWJsZSIsIlJ1bm5hYmxlQmluZGluZyIsIlJ1bm5hYmxlRWFjaCIsIlJ1bm5hYmxlUmV0cnkiLCJSdW5uYWJsZVNlcXVlbmNlIiwiUnVubmFibGVNYXAiLCJSdW5uYWJsZVBhcmFsbGVsIiwiUnVubmFibGVMYW1iZGEiLCJSdW5uYWJsZVdpdGhGYWxsYmFja3MiLCJSdW5uYWJsZUFzc2lnbiIsIlJ1bm5hYmxlUGljayIsIl9jb2VyY2VUb1J1bm5hYmxlIiwiZ2V0Q2FsbGJhY2tNYW5hZ2VyRm9yQ29uZmlnIiwicGF0Y2hDb25maWciLCJlbnN1cmVDb25maWciLCJSdW5uYWJsZVBhc3N0aHJvdWdoIiwiUm91dGVyUnVubmFibGUiLCJSdW5uYWJsZUJyYW5jaCIsIlJ1bm5hYmxlV2l0aE1lc3NhZ2VIaXN0b3J5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/passthrough.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnablePassthrough: () => (/* binding */ RunnablePassthrough)\n/* harmony export */ });\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\n\n/**\n * A runnable to passthrough inputs unchanged or with additional keys.\n *\n * This runnable behaves almost like the identity function, except that it\n * can be configured to add additional keys to the output, if the input is\n * an object.\n *\n * The example below demonstrates how to use `RunnablePassthrough to\n * passthrough the input from the `.invoke()`\n *\n * @example\n * ```typescript\n * const chain = RunnableSequence.from([\n *   {\n *     question: new RunnablePassthrough(),\n *     context: async () => loadContextFromStore(),\n *   },\n *   prompt,\n *   llm,\n *   outputParser,\n * ]);\n * const response = await chain.invoke(\n *   \"I can pass a single string instead of an object since I'm using `RunnablePassthrough`.\"\n * );\n * ```\n */ class RunnablePassthrough extends _base_js__WEBPACK_IMPORTED_MODULE_1__.Runnable {\n    static lc_name() {\n        return \"RunnablePassthrough\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (fields) {\n            this.func = fields.func;\n        }\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        if (this.func) {\n            await this.func(input, config);\n        }\n        return this._callWithConfig((input)=>Promise.resolve(input), input, config);\n    }\n    async *transform(generator, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        let finalOutput;\n        let finalOutputSupported = true;\n        for await (const chunk of this._transformStreamWithConfig(generator, (input)=>input, config)){\n            yield chunk;\n            if (finalOutputSupported) {\n                if (finalOutput === undefined) {\n                    finalOutput = chunk;\n                } else {\n                    try {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.concat)(finalOutput, chunk);\n                    } catch  {\n                        finalOutput = undefined;\n                        finalOutputSupported = false;\n                    }\n                }\n            }\n        }\n        if (this.func && finalOutput !== undefined) {\n            await this.func(finalOutput, config);\n        }\n    }\n    /**\n     * A runnable that assigns key-value pairs to the input.\n     *\n     * The example below shows how you could use it with an inline function.\n     *\n     * @example\n     * ```typescript\n     * const prompt =\n     *   PromptTemplate.fromTemplate(`Write a SQL query to answer the question using the following schema: {schema}\n     * Question: {question}\n     * SQL Query:`);\n     *\n     * // The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`\n     * // call (in this example it's the question), along with any inputs passed to the `.assign()` method.\n     * // In this case, we're passing the schema.\n     * const sqlQueryGeneratorChain = RunnableSequence.from([\n     *   RunnablePassthrough.assign({\n     *     schema: async () => db.getTableInfo(),\n     *   }),\n     *   prompt,\n     *   new ChatOpenAI({}).bind({ stop: [\"\\nSQLResult:\"] }),\n     *   new StringOutputParser(),\n     * ]);\n     * const result = await sqlQueryGeneratorChain.invoke({\n     *   question: \"How many employees are there?\",\n     * });\n     * ```\n     */ static assign(mapping) {\n        return new _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableAssign(new _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableMap({\n            steps: mapping\n        }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/router.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/router.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* binding */ RouterRunnable)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\n/**\n * A runnable that routes to a set of runnables based on Input['key'].\n * Returns the output of the selected runnable.\n */ class RouterRunnable extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    static lc_name() {\n        return \"RouterRunnable\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnables = fields.runnables;\n    }\n    async invoke(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.invoke(actualInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const keys = inputs.map((input)=>input.key);\n        const actualInputs = inputs.map((input)=>input.input);\n        const missingKey = keys.find((key)=>this.runnables[key] === undefined);\n        if (missingKey !== undefined) {\n            throw new Error(`One or more keys do not have a corresponding runnable.`);\n        }\n        const runnables = keys.map((key)=>this.runnables[key]);\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = optionsList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const batchSize = maxConcurrency && maxConcurrency > 0 ? maxConcurrency : inputs.length;\n        const batchResults = [];\n        for(let i = 0; i < actualInputs.length; i += batchSize){\n            const batchPromises = actualInputs.slice(i, i + batchSize).map((actualInput, i)=>runnables[i].invoke(actualInput, optionsList[i]));\n            const batchResult = await Promise.all(batchPromises);\n            batchResults.push(batchResult);\n        }\n        return batchResults.flat();\n    }\n    async stream(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.stream(actualInput, options);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3JvdXRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUM7QUFDTTtBQUMzQzs7O0NBR0MsR0FDTSxNQUFNRSx1QkFBdUJGLDhDQUFRQTtJQUN4QyxPQUFPRyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFrQjthQUFZO1FBQzFDO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFNBQVMsR0FBR1AsT0FBT08sU0FBUztJQUNyQztJQUNBLE1BQU1DLE9BQU9DLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ3pCLE1BQU0sRUFBRUMsR0FBRyxFQUFFRixPQUFPRyxXQUFXLEVBQUUsR0FBR0g7UUFDcEMsTUFBTUksV0FBVyxJQUFJLENBQUNOLFNBQVMsQ0FBQ0ksSUFBSTtRQUNwQyxJQUFJRSxhQUFhQyxXQUFXO1lBQ3hCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGlDQUFpQyxFQUFFSixJQUFJLEVBQUUsQ0FBQztRQUMvRDtRQUNBLE9BQU9FLFNBQVNMLE1BQU0sQ0FBQ0ksYUFBYWhCLHdEQUFZQSxDQUFDYztJQUNyRDtJQUNBLE1BQU1NLE1BQU1DLE1BQU0sRUFBRVAsT0FBTyxFQUFFUSxZQUFZLEVBQUU7UUFDdkMsTUFBTUMsT0FBT0YsT0FBT0csR0FBRyxDQUFDLENBQUNYLFFBQVVBLE1BQU1FLEdBQUc7UUFDNUMsTUFBTVUsZUFBZUosT0FBT0csR0FBRyxDQUFDLENBQUNYLFFBQVVBLE1BQU1BLEtBQUs7UUFDdEQsTUFBTWEsYUFBYUgsS0FBS0ksSUFBSSxDQUFDLENBQUNaLE1BQVEsSUFBSSxDQUFDSixTQUFTLENBQUNJLElBQUksS0FBS0c7UUFDOUQsSUFBSVEsZUFBZVIsV0FBVztZQUMxQixNQUFNLElBQUlDLE1BQU0sQ0FBQyxzREFBc0QsQ0FBQztRQUM1RTtRQUNBLE1BQU1SLFlBQVlZLEtBQUtDLEdBQUcsQ0FBQyxDQUFDVCxNQUFRLElBQUksQ0FBQ0osU0FBUyxDQUFDSSxJQUFJO1FBQ3ZELE1BQU1hLGNBQWMsSUFBSSxDQUFDQyxlQUFlLENBQUNmLFdBQVcsQ0FBQyxHQUFHTyxPQUFPUyxNQUFNO1FBQ3JFLE1BQU1DLGlCQUFpQkgsV0FBVyxDQUFDLEVBQUUsRUFBRUcsa0JBQWtCVCxjQUFjUztRQUN2RSxNQUFNQyxZQUFZRCxrQkFBa0JBLGlCQUFpQixJQUFJQSxpQkFBaUJWLE9BQU9TLE1BQU07UUFDdkYsTUFBTUcsZUFBZSxFQUFFO1FBQ3ZCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJVCxhQUFhSyxNQUFNLEVBQUVJLEtBQUtGLFVBQVc7WUFDckQsTUFBTUcsZ0JBQWdCVixhQUNqQlcsS0FBSyxDQUFDRixHQUFHQSxJQUFJRixXQUNiUixHQUFHLENBQUMsQ0FBQ1IsYUFBYWtCLElBQU12QixTQUFTLENBQUN1QixFQUFFLENBQUN0QixNQUFNLENBQUNJLGFBQWFZLFdBQVcsQ0FBQ00sRUFBRTtZQUM1RSxNQUFNRyxjQUFjLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0o7WUFDdENGLGFBQWFPLElBQUksQ0FBQ0g7UUFDdEI7UUFDQSxPQUFPSixhQUFhUSxJQUFJO0lBQzVCO0lBQ0EsTUFBTUMsT0FBTzdCLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ3pCLE1BQU0sRUFBRUMsR0FBRyxFQUFFRixPQUFPRyxXQUFXLEVBQUUsR0FBR0g7UUFDcEMsTUFBTUksV0FBVyxJQUFJLENBQUNOLFNBQVMsQ0FBQ0ksSUFBSTtRQUNwQyxJQUFJRSxhQUFhQyxXQUFXO1lBQ3hCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGlDQUFpQyxFQUFFSixJQUFJLEVBQUUsQ0FBQztRQUMvRDtRQUNBLE9BQU9FLFNBQVN5QixNQUFNLENBQUMxQixhQUFhRjtJQUN4QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy9yb3V0ZXIuanM/YzI4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdW5uYWJsZSB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmltcG9ydCB7IGVuc3VyZUNvbmZpZyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuLyoqXG4gKiBBIHJ1bm5hYmxlIHRoYXQgcm91dGVzIHRvIGEgc2V0IG9mIHJ1bm5hYmxlcyBiYXNlZCBvbiBJbnB1dFsna2V5J10uXG4gKiBSZXR1cm5zIHRoZSBvdXRwdXQgb2YgdGhlIHNlbGVjdGVkIHJ1bm5hYmxlLlxuICovXG5leHBvcnQgY2xhc3MgUm91dGVyUnVubmFibGUgZXh0ZW5kcyBSdW5uYWJsZSB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlJvdXRlclJ1bm5hYmxlXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwicnVubmFibGVzXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJ1bm5hYmxlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJ1bm5hYmxlcyA9IGZpZWxkcy5ydW5uYWJsZXM7XG4gICAgfVxuICAgIGFzeW5jIGludm9rZShpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGtleSwgaW5wdXQ6IGFjdHVhbElucHV0IH0gPSBpbnB1dDtcbiAgICAgICAgY29uc3QgcnVubmFibGUgPSB0aGlzLnJ1bm5hYmxlc1trZXldO1xuICAgICAgICBpZiAocnVubmFibGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBydW5uYWJsZSBhc3NvY2lhdGVkIHdpdGgga2V5IFwiJHtrZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bm5hYmxlLmludm9rZShhY3R1YWxJbnB1dCwgZW5zdXJlQ29uZmlnKG9wdGlvbnMpKTtcbiAgICB9XG4gICAgYXN5bmMgYmF0Y2goaW5wdXRzLCBvcHRpb25zLCBiYXRjaE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IGlucHV0cy5tYXAoKGlucHV0KSA9PiBpbnB1dC5rZXkpO1xuICAgICAgICBjb25zdCBhY3R1YWxJbnB1dHMgPSBpbnB1dHMubWFwKChpbnB1dCkgPT4gaW5wdXQuaW5wdXQpO1xuICAgICAgICBjb25zdCBtaXNzaW5nS2V5ID0ga2V5cy5maW5kKChrZXkpID0+IHRoaXMucnVubmFibGVzW2tleV0gPT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtaXNzaW5nS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT25lIG9yIG1vcmUga2V5cyBkbyBub3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgcnVubmFibGUuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcnVubmFibGVzID0ga2V5cy5tYXAoKGtleSkgPT4gdGhpcy5ydW5uYWJsZXNba2V5XSk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnNMaXN0ID0gdGhpcy5fZ2V0T3B0aW9uc0xpc3Qob3B0aW9ucyA/PyB7fSwgaW5wdXRzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IG1heENvbmN1cnJlbmN5ID0gb3B0aW9uc0xpc3RbMF0/Lm1heENvbmN1cnJlbmN5ID8/IGJhdGNoT3B0aW9ucz8ubWF4Q29uY3VycmVuY3k7XG4gICAgICAgIGNvbnN0IGJhdGNoU2l6ZSA9IG1heENvbmN1cnJlbmN5ICYmIG1heENvbmN1cnJlbmN5ID4gMCA/IG1heENvbmN1cnJlbmN5IDogaW5wdXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYmF0Y2hSZXN1bHRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0dWFsSW5wdXRzLmxlbmd0aDsgaSArPSBiYXRjaFNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoUHJvbWlzZXMgPSBhY3R1YWxJbnB1dHNcbiAgICAgICAgICAgICAgICAuc2xpY2UoaSwgaSArIGJhdGNoU2l6ZSlcbiAgICAgICAgICAgICAgICAubWFwKChhY3R1YWxJbnB1dCwgaSkgPT4gcnVubmFibGVzW2ldLmludm9rZShhY3R1YWxJbnB1dCwgb3B0aW9uc0xpc3RbaV0pKTtcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoUmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5hbGwoYmF0Y2hQcm9taXNlcyk7XG4gICAgICAgICAgICBiYXRjaFJlc3VsdHMucHVzaChiYXRjaFJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhdGNoUmVzdWx0cy5mbGF0KCk7XG4gICAgfVxuICAgIGFzeW5jIHN0cmVhbShpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGtleSwgaW5wdXQ6IGFjdHVhbElucHV0IH0gPSBpbnB1dDtcbiAgICAgICAgY29uc3QgcnVubmFibGUgPSB0aGlzLnJ1bm5hYmxlc1trZXldO1xuICAgICAgICBpZiAocnVubmFibGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBydW5uYWJsZSBhc3NvY2lhdGVkIHdpdGgga2V5IFwiJHtrZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bm5hYmxlLnN0cmVhbShhY3R1YWxJbnB1dCwgb3B0aW9ucyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlJ1bm5hYmxlIiwiZW5zdXJlQ29uZmlnIiwiUm91dGVyUnVubmFibGUiLCJsY19uYW1lIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwicnVubmFibGVzIiwiaW52b2tlIiwiaW5wdXQiLCJvcHRpb25zIiwia2V5IiwiYWN0dWFsSW5wdXQiLCJydW5uYWJsZSIsInVuZGVmaW5lZCIsIkVycm9yIiwiYmF0Y2giLCJpbnB1dHMiLCJiYXRjaE9wdGlvbnMiLCJrZXlzIiwibWFwIiwiYWN0dWFsSW5wdXRzIiwibWlzc2luZ0tleSIsImZpbmQiLCJvcHRpb25zTGlzdCIsIl9nZXRPcHRpb25zTGlzdCIsImxlbmd0aCIsIm1heENvbmN1cnJlbmN5IiwiYmF0Y2hTaXplIiwiYmF0Y2hSZXN1bHRzIiwiaSIsImJhdGNoUHJvbWlzZXMiLCJzbGljZSIsImJhdGNoUmVzdWx0IiwiUHJvbWlzZSIsImFsbCIsInB1c2giLCJmbGF0Iiwic3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/router.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _RootEventFilter: () => (/* binding */ _RootEventFilter),\n/* harmony export */   isRunnableInterface: () => (/* binding */ isRunnableInterface)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isRunnableInterface(thing) {\n    return thing ? thing.lc_runnable : false;\n}\n/**\n * Utility to filter the root event in the streamEvents implementation.\n * This is simply binding the arguments to the namespace to make save on\n * a bit of typing in the streamEvents implementation.\n *\n * TODO: Refactor and remove.\n */ class _RootEventFilter {\n    constructor(fields){\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.includeNames = fields.includeNames;\n        this.includeTypes = fields.includeTypes;\n        this.includeTags = fields.includeTags;\n        this.excludeNames = fields.excludeNames;\n        this.excludeTypes = fields.excludeTypes;\n        this.excludeTags = fields.excludeTags;\n    }\n    includeEvent(event, rootType) {\n        let include = this.includeNames === undefined && this.includeTypes === undefined && this.includeTags === undefined;\n        const eventTags = event.tags ?? [];\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(event.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(rootType);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || eventTags.some((tag)=>this.includeTags?.includes(tag));\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(event.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(rootType);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && eventTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOERBQThEO0FBQ3ZELFNBQVNBLG9CQUFvQkMsS0FBSztJQUNyQyxPQUFPQSxRQUFRQSxNQUFNQyxXQUFXLEdBQUc7QUFDdkM7QUFDQTs7Ozs7O0NBTUMsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFlBQVksR0FBR1AsT0FBT08sWUFBWTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBR1IsT0FBT1EsWUFBWTtRQUN2QyxJQUFJLENBQUNDLFdBQVcsR0FBR1QsT0FBT1MsV0FBVztRQUNyQyxJQUFJLENBQUNDLFlBQVksR0FBR1YsT0FBT1UsWUFBWTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBR1gsT0FBT1csWUFBWTtRQUN2QyxJQUFJLENBQUNDLFdBQVcsR0FBR1osT0FBT1ksV0FBVztJQUN6QztJQUNBQyxhQUFhQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUMxQixJQUFJQyxVQUFVLElBQUksQ0FBQ1QsWUFBWSxLQUFLVSxhQUNoQyxJQUFJLENBQUNULFlBQVksS0FBS1MsYUFDdEIsSUFBSSxDQUFDUixXQUFXLEtBQUtRO1FBQ3pCLE1BQU1DLFlBQVlKLE1BQU1LLElBQUksSUFBSSxFQUFFO1FBQ2xDLElBQUksSUFBSSxDQUFDWixZQUFZLEtBQUtVLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsSUFBSSxDQUFDVCxZQUFZLENBQUNhLFFBQVEsQ0FBQ04sTUFBTU8sSUFBSTtRQUM5RDtRQUNBLElBQUksSUFBSSxDQUFDYixZQUFZLEtBQUtTLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsSUFBSSxDQUFDUixZQUFZLENBQUNZLFFBQVEsQ0FBQ0w7UUFDcEQ7UUFDQSxJQUFJLElBQUksQ0FBQ04sV0FBVyxLQUFLUSxXQUFXO1lBQ2hDRCxVQUNJQSxXQUFXRSxVQUFVSSxJQUFJLENBQUMsQ0FBQ0MsTUFBUSxJQUFJLENBQUNkLFdBQVcsRUFBRVcsU0FBU0c7UUFDdEU7UUFDQSxJQUFJLElBQUksQ0FBQ2IsWUFBWSxLQUFLTyxXQUFXO1lBQ2pDRCxVQUFVQSxXQUFXLENBQUMsSUFBSSxDQUFDTixZQUFZLENBQUNVLFFBQVEsQ0FBQ04sTUFBTU8sSUFBSTtRQUMvRDtRQUNBLElBQUksSUFBSSxDQUFDVixZQUFZLEtBQUtNLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsQ0FBQyxJQUFJLENBQUNMLFlBQVksQ0FBQ1MsUUFBUSxDQUFDTDtRQUNyRDtRQUNBLElBQUksSUFBSSxDQUFDSCxXQUFXLEtBQUtLLFdBQVc7WUFDaENELFVBQ0lBLFdBQVdFLFVBQVVNLEtBQUssQ0FBQyxDQUFDRCxNQUFRLENBQUMsSUFBSSxDQUFDWCxXQUFXLEVBQUVRLFNBQVNHO1FBQ3hFO1FBQ0EsT0FBT1A7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy91dGlscy5qcz84MWZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gaXNSdW5uYWJsZUludGVyZmFjZSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyA/IHRoaW5nLmxjX3J1bm5hYmxlIDogZmFsc2U7XG59XG4vKipcbiAqIFV0aWxpdHkgdG8gZmlsdGVyIHRoZSByb290IGV2ZW50IGluIHRoZSBzdHJlYW1FdmVudHMgaW1wbGVtZW50YXRpb24uXG4gKiBUaGlzIGlzIHNpbXBseSBiaW5kaW5nIHRoZSBhcmd1bWVudHMgdG8gdGhlIG5hbWVzcGFjZSB0byBtYWtlIHNhdmUgb25cbiAqIGEgYml0IG9mIHR5cGluZyBpbiB0aGUgc3RyZWFtRXZlbnRzIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIFRPRE86IFJlZmFjdG9yIGFuZCByZW1vdmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBfUm9vdEV2ZW50RmlsdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5jbHVkZU5hbWVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluY2x1ZGVUeXBlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbmNsdWRlVGFnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGNsdWRlTmFtZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhjbHVkZVR5cGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4Y2x1ZGVUYWdzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5jbHVkZU5hbWVzID0gZmllbGRzLmluY2x1ZGVOYW1lcztcbiAgICAgICAgdGhpcy5pbmNsdWRlVHlwZXMgPSBmaWVsZHMuaW5jbHVkZVR5cGVzO1xuICAgICAgICB0aGlzLmluY2x1ZGVUYWdzID0gZmllbGRzLmluY2x1ZGVUYWdzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVOYW1lcyA9IGZpZWxkcy5leGNsdWRlTmFtZXM7XG4gICAgICAgIHRoaXMuZXhjbHVkZVR5cGVzID0gZmllbGRzLmV4Y2x1ZGVUeXBlcztcbiAgICAgICAgdGhpcy5leGNsdWRlVGFncyA9IGZpZWxkcy5leGNsdWRlVGFncztcbiAgICB9XG4gICAgaW5jbHVkZUV2ZW50KGV2ZW50LCByb290VHlwZSkge1xuICAgICAgICBsZXQgaW5jbHVkZSA9IHRoaXMuaW5jbHVkZU5hbWVzID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaW5jbHVkZVR5cGVzID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaW5jbHVkZVRhZ3MgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZXZlbnRUYWdzID0gZXZlbnQudGFncyA/PyBbXTtcbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZU5hbWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlIHx8IHRoaXMuaW5jbHVkZU5hbWVzLmluY2x1ZGVzKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluY2x1ZGVUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSB8fCB0aGlzLmluY2x1ZGVUeXBlcy5pbmNsdWRlcyhyb290VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZVRhZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9XG4gICAgICAgICAgICAgICAgaW5jbHVkZSB8fCBldmVudFRhZ3Muc29tZSgodGFnKSA9PiB0aGlzLmluY2x1ZGVUYWdzPy5pbmNsdWRlcyh0YWcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leGNsdWRlTmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgJiYgIXRoaXMuZXhjbHVkZU5hbWVzLmluY2x1ZGVzKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSAmJiAhdGhpcy5leGNsdWRlVHlwZXMuaW5jbHVkZXMocm9vdFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVUYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPVxuICAgICAgICAgICAgICAgIGluY2x1ZGUgJiYgZXZlbnRUYWdzLmV2ZXJ5KCh0YWcpID0+ICF0aGlzLmV4Y2x1ZGVUYWdzPy5pbmNsdWRlcyh0YWcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5jbHVkZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaXNSdW5uYWJsZUludGVyZmFjZSIsInRoaW5nIiwibGNfcnVubmFibGUiLCJfUm9vdEV2ZW50RmlsdGVyIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiaW5jbHVkZU5hbWVzIiwiaW5jbHVkZVR5cGVzIiwiaW5jbHVkZVRhZ3MiLCJleGNsdWRlTmFtZXMiLCJleGNsdWRlVHlwZXMiLCJleGNsdWRlVGFncyIsImluY2x1ZGVFdmVudCIsImV2ZW50Iiwicm9vdFR5cGUiLCJpbmNsdWRlIiwidW5kZWZpbmVkIiwiZXZlbnRUYWdzIiwidGFncyIsImluY2x1ZGVzIiwibmFtZSIsInNvbWUiLCJ0YWciLCJldmVyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorageProviderSingleton: () => (/* binding */ AsyncLocalStorageProviderSingleton),\n/* harmony export */   MockAsyncLocalStorage: () => (/* binding */ MockAsyncLocalStorage)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */ class MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_store, callback) {\n        callback();\n    }\n}\nclass AsyncLocalStorageProvider {\n    constructor(){\n        Object.defineProperty(this, \"asyncLocalStorage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new MockAsyncLocalStorage()\n        });\n        Object.defineProperty(this, \"hasBeenInitialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    getInstance() {\n        return this.asyncLocalStorage;\n    }\n    initializeGlobalInstance(instance) {\n        if (!this.hasBeenInitialized) {\n            this.hasBeenInitialized = true;\n            this.asyncLocalStorage = instance;\n        }\n    }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRCxHQUM5QyxNQUFNQTtJQUNUQyxXQUFXO1FBQ1AsT0FBT0M7SUFDWDtJQUNBQyxJQUFJQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtRQUNsQkE7SUFDSjtBQUNKO0FBQ0EsTUFBTUM7SUFDRkMsYUFBYztRQUNWQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLHFCQUFxQjtZQUM3Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxJQUFJYjtRQUNmO1FBQ0FRLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCO1lBQzlDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtJQUNBQyxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUNDLGlCQUFpQjtJQUNqQztJQUNBQyx5QkFBeUJDLFFBQVEsRUFBRTtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDQyxrQkFBa0IsRUFBRTtZQUMxQixJQUFJLENBQUNBLGtCQUFrQixHQUFHO1lBQzFCLElBQUksQ0FBQ0gsaUJBQWlCLEdBQUdFO1FBQzdCO0lBQ0o7QUFDSjtBQUNBLE1BQU1FLHFDQUFxQyxJQUFJYjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvaW5kZXguanM/NjRkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5leHBvcnQgY2xhc3MgTW9ja0FzeW5jTG9jYWxTdG9yYWdlIHtcbiAgICBnZXRTdG9yZSgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcnVuKF9zdG9yZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG5jbGFzcyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXN5bmNMb2NhbFN0b3JhZ2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBNb2NrQXN5bmNMb2NhbFN0b3JhZ2UoKVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaGFzQmVlbkluaXRpYWxpemVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzeW5jTG9jYWxTdG9yYWdlO1xuICAgIH1cbiAgICBpbml0aWFsaXplR2xvYmFsSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0JlZW5Jbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5oYXNCZWVuSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hc3luY0xvY2FsU3RvcmFnZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiA9IG5ldyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyKCk7XG5leHBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIH07XG4iXSwibmFtZXMiOlsiTW9ja0FzeW5jTG9jYWxTdG9yYWdlIiwiZ2V0U3RvcmUiLCJ1bmRlZmluZWQiLCJydW4iLCJfc3RvcmUiLCJjYWxsYmFjayIsIkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJnZXRJbnN0YW5jZSIsImFzeW5jTG9jYWxTdG9yYWdlIiwiaW5pdGlhbGl6ZUdsb2JhbEluc3RhbmNlIiwiaW5zdGFuY2UiLCJoYXNCZWVuSW5pdGlhbGl6ZWQiLCJBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/base.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTracer: () => (/* binding */ BaseTracer)\n/* harmony export */ });\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nfunction convertToDottedOrderFormat(epoch, runId) {\n    return stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}000Z`) + runId;\n}\nclass BaseTracer extends _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n    constructor(_fields){\n        super(...arguments);\n        Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    copy() {\n        return this;\n    }\n    stringifyError(error) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof Error) {\n            return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n        }\n        if (typeof error === \"string\") {\n            return error;\n        }\n        return `${error}`;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    async _startTrace(run) {\n        const currentDottedOrder = convertToDottedOrderFormat(run.start_time, run.id);\n        const storedRun = {\n            ...run\n        };\n        if (storedRun.parent_run_id !== undefined) {\n            const parentRun = this.runMap.get(storedRun.parent_run_id);\n            if (parentRun) {\n                this._addChildRun(parentRun, storedRun);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n                storedRun.trace_id = parentRun.trace_id;\n                if (parentRun.dotted_order !== undefined) {\n                    storedRun.dotted_order = [\n                        parentRun.dotted_order,\n                        currentDottedOrder\n                    ].join(\".\");\n                } else {\n                // This can happen naturally for callbacks added within a run\n                // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n                }\n            } else {\n            // This can happen naturally for callbacks added within a run\n            // console.debug(\n            //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n            // );\n            }\n        } else {\n            storedRun.trace_id = storedRun.id;\n            storedRun.dotted_order = currentDottedOrder;\n        }\n        this.runMap.set(storedRun.id, storedRun);\n        await this.onRunCreate?.(storedRun);\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.runMap.get(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        } else {\n            await this.persistRun(run);\n        }\n        this.runMap.delete(run.id);\n        await this.onRunUpdate?.(run);\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.runMap.get(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                prompts\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                messages\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleLLMEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleLLMError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onChainStart?.(run);\n        return run;\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                input\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onToolStart?.(run);\n        return run;\n    }\n    async handleToolEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            output\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentEnd?.(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                query\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onRetrieverStart?.(run);\n        return run;\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            documents\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleText(text, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: {\n                text\n            }\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: {\n                token,\n                idx,\n                chunk: fields?.chunk\n            }\n        });\n        await this.onLLMNewToken?.(run, token, {\n            chunk: fields?.chunk\n        });\n        return run;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/console.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/console.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleCallbackHandler: () => (/* binding */ ConsoleCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var ansi_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-styles */ \"(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\n\nfunction wrap(style, text) {\n    return `${style.open}${text}${style.close}`;\n}\nfunction tryJsonStringify(obj, fallback) {\n    try {\n        return JSON.stringify(obj, null, 2);\n    } catch (err) {\n        return fallback;\n    }\n}\nfunction elapsed(run) {\n    if (!run.end_time) return \"\";\n    const elapsed = run.end_time - run.start_time;\n    if (elapsed < 1000) {\n        return `${elapsed}ms`;\n    }\n    return `${(elapsed / 1000).toFixed(2)}s`;\n}\nconst { color } = ansi_styles__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * A tracer that logs all events to the console. It extends from the\n * `BaseTracer` class and overrides its methods to provide custom logging\n * functionality.\n * @example\n * ```typescript\n *\n * const llm = new ChatAnthropic({\n *   temperature: 0,\n *   tags: [\"example\", \"callbacks\", \"constructor\"],\n *   callbacks: [new ConsoleCallbackHandler()],\n * });\n *\n * ```\n */ class ConsoleCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"console_callback_handler\"\n        });\n    }\n    /**\n     * Method used to persist the run. In this case, it simply returns a\n     * resolved promise as there's no persistence logic.\n     * @param _run The run to persist.\n     * @returns A resolved promise.\n     */ persistRun(_run) {\n        return Promise.resolve();\n    }\n    // utility methods\n    /**\n     * Method used to get all the parent runs of a given run.\n     * @param run The run whose parents are to be retrieved.\n     * @returns An array of parent runs.\n     */ getParents(run) {\n        const parents = [];\n        let currentRun = run;\n        while(currentRun.parent_run_id){\n            const parent = this.runMap.get(currentRun.parent_run_id);\n            if (parent) {\n                parents.push(parent);\n                currentRun = parent;\n            } else {\n                break;\n            }\n        }\n        return parents;\n    }\n    /**\n     * Method used to get a string representation of the run's lineage, which\n     * is used in logging.\n     * @param run The run whose lineage is to be retrieved.\n     * @returns A string representation of the run's lineage.\n     */ getBreadcrumbs(run) {\n        const parents = this.getParents(run).reverse();\n        const string = [\n            ...parents,\n            run\n        ].map((parent, i, arr)=>{\n            const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;\n            return i === arr.length - 1 ? wrap(ansi_styles__WEBPACK_IMPORTED_MODULE_0__.bold, name) : name;\n        }).join(\" > \");\n        return wrap(color.grey, string);\n    }\n    // logging methods\n    /**\n     * Method used to log the start of a chain run.\n     * @param run The chain run that has started.\n     * @returns void\n     */ onChainStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[chain/start]\")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a chain run.\n     * @param run The chain run that has ended.\n     * @returns void\n     */ onChainEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[chain/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a chain run.\n     * @param run The chain run that has errored.\n     * @returns void\n     */ onChainError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[chain/error]\")} [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of an LLM run.\n     * @param run The LLM run that has started.\n     * @returns void\n     */ onLLMStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        const inputs = \"prompts\" in run.inputs ? {\n            prompts: run.inputs.prompts.map((p)=>p.trim())\n        } : run.inputs;\n        console.log(`${wrap(color.green, \"[llm/start]\")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of an LLM run.\n     * @param run The LLM run that has ended.\n     * @returns void\n     */ onLLMEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[llm/end]\")} [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, \"[response]\")}`);\n    }\n    /**\n     * Method used to log any errors of an LLM run.\n     * @param run The LLM run that has errored.\n     * @returns void\n     */ onLLMError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[llm/error]\")} [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a tool run.\n     * @param run The tool run that has started.\n     * @returns void\n     */ onToolStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[tool/start]\")} [${crumbs}] Entering Tool run with input: \"${run.inputs.input?.trim()}\"`);\n    }\n    /**\n     * Method used to log the end of a tool run.\n     * @param run The tool run that has ended.\n     * @returns void\n     */ onToolEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[tool/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${run.outputs?.output?.trim()}\"`);\n    }\n    /**\n     * Method used to log any errors of a tool run.\n     * @param run The tool run that has errored.\n     * @returns void\n     */ onToolError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[tool/error]\")} [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a retriever run.\n     * @param run The retriever run that has started.\n     * @returns void\n     */ onRetrieverStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[retriever/start]\")} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a retriever run.\n     * @param run The retriever run that has ended.\n     * @returns void\n     */ onRetrieverEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[retriever/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Retriever run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a retriever run.\n     * @param run The retriever run that has errored.\n     * @returns void\n     */ onRetrieverError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[retriever/error]\")} [${crumbs}] [${elapsed(run)}] Retriever run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the action selected by the agent.\n     * @param run The run in which the agent action occurred.\n     * @returns void\n     */ onAgentAction(run) {\n        const agentRun = run;\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.blue, \"[agent/action]\")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], \"[action]\")}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/initialize.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/initialize.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTracingCallbackHandler: () => (/* binding */ getTracingCallbackHandler),\n/* harmony export */   getTracingV2CallbackHandler: () => (/* binding */ getTracingV2CallbackHandler)\n/* harmony export */ });\n/* harmony import */ var _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracer_langchain.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracer_langchain_v1.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js\");\n\n\n/**\n * @deprecated Use the V2 handler instead.\n *\n * Function that returns an instance of `LangChainTracerV1`. If a session\n * is provided, it loads that session into the tracer; otherwise, it loads\n * a default session.\n * @param session Optional session to load into the tracer.\n * @returns An instance of `LangChainTracerV1`.\n */ async function getTracingCallbackHandler(session) {\n    const tracer = new _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__.LangChainTracerV1();\n    if (session) {\n        await tracer.loadSession(session);\n    } else {\n        await tracer.loadDefaultSession();\n    }\n    return tracer;\n}\n/**\n * Function that returns an instance of `LangChainTracer`. It does not\n * load any session data.\n * @returns An instance of `LangChainTracer`.\n */ async function getTracingV2CallbackHandler() {\n    return new _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__.LangChainTracer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9pbml0aWFsaXplLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDSztBQUM3RDs7Ozs7Ozs7Q0FRQyxHQUNNLGVBQWVFLDBCQUEwQkMsT0FBTztJQUNuRCxNQUFNQyxTQUFTLElBQUlILHNFQUFpQkE7SUFDcEMsSUFBSUUsU0FBUztRQUNULE1BQU1DLE9BQU9DLFdBQVcsQ0FBQ0Y7SUFDN0IsT0FDSztRQUNELE1BQU1DLE9BQU9FLGtCQUFrQjtJQUNuQztJQUNBLE9BQU9GO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ00sZUFBZUc7SUFDbEIsT0FBTyxJQUFJUCxpRUFBZUE7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9pbml0aWFsaXplLmpzPzc3NjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGFuZ0NoYWluVHJhY2VyIH0gZnJvbSBcIi4vdHJhY2VyX2xhbmdjaGFpbi5qc1wiO1xuaW1wb3J0IHsgTGFuZ0NoYWluVHJhY2VyVjEgfSBmcm9tIFwiLi90cmFjZXJfbGFuZ2NoYWluX3YxLmpzXCI7XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgVjIgaGFuZGxlciBpbnN0ZWFkLlxuICpcbiAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiBgTGFuZ0NoYWluVHJhY2VyVjFgLiBJZiBhIHNlc3Npb25cbiAqIGlzIHByb3ZpZGVkLCBpdCBsb2FkcyB0aGF0IHNlc3Npb24gaW50byB0aGUgdHJhY2VyOyBvdGhlcndpc2UsIGl0IGxvYWRzXG4gKiBhIGRlZmF1bHQgc2Vzc2lvbi5cbiAqIEBwYXJhbSBzZXNzaW9uIE9wdGlvbmFsIHNlc3Npb24gdG8gbG9hZCBpbnRvIHRoZSB0cmFjZXIuXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBgTGFuZ0NoYWluVHJhY2VyVjFgLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhY2luZ0NhbGxiYWNrSGFuZGxlcihzZXNzaW9uKSB7XG4gICAgY29uc3QgdHJhY2VyID0gbmV3IExhbmdDaGFpblRyYWNlclYxKCk7XG4gICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgYXdhaXQgdHJhY2VyLmxvYWRTZXNzaW9uKHNlc3Npb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXdhaXQgdHJhY2VyLmxvYWREZWZhdWx0U2Vzc2lvbigpO1xuICAgIH1cbiAgICByZXR1cm4gdHJhY2VyO1xufVxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYExhbmdDaGFpblRyYWNlcmAuIEl0IGRvZXMgbm90XG4gKiBsb2FkIGFueSBzZXNzaW9uIGRhdGEuXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBgTGFuZ0NoYWluVHJhY2VyYC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYWNpbmdWMkNhbGxiYWNrSGFuZGxlcigpIHtcbiAgICByZXR1cm4gbmV3IExhbmdDaGFpblRyYWNlcigpO1xufVxuIl0sIm5hbWVzIjpbIkxhbmdDaGFpblRyYWNlciIsIkxhbmdDaGFpblRyYWNlclYxIiwiZ2V0VHJhY2luZ0NhbGxiYWNrSGFuZGxlciIsInNlc3Npb24iLCJ0cmFjZXIiLCJsb2FkU2Vzc2lvbiIsImxvYWREZWZhdWx0U2Vzc2lvbiIsImdldFRyYWNpbmdWMkNhbGxiYWNrSGFuZGxlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/initialize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/log_stream.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogStreamCallbackHandler: () => (/* binding */ LogStreamCallbackHandler),\n/* harmony export */   RunLog: () => (/* binding */ RunLog),\n/* harmony export */   RunLogPatch: () => (/* binding */ RunLogPatch)\n/* harmony export */ });\n/* harmony import */ var _utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/fast-json-patch/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n\n\n\n/**\n * List of jsonpatch JSONPatchOperations, which describe how to create the run state\n * from an empty dict. This is the minimal representation of the log, designed to\n * be serialized as JSON and sent over the wire to reconstruct the log on the other\n * side. Reconstruction of the state can be done with any jsonpatch-compliant library,\n * see https://jsonpatch.com for more information.\n */ class RunLogPatch {\n    constructor(fields){\n        Object.defineProperty(this, \"ops\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ops = fields.ops ?? [];\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\nclass RunLog extends RunLogPatch {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.state = fields.state;\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)(this.state, other.ops);\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n    static fromRunLogPatch(patch) {\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, patch.ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops: patch.ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\n/**\n * Extract standardized inputs from a run.\n *\n * Standardizes the inputs based on the type of the runnable used.\n *\n * @param run - Run object\n * @param schemaFormat - The schema format to use.\n *\n * @returns Valid inputs are only dict. By conventions, inputs always represented\n * invocation using named arguments.\n * A null means that the input is not yet known!\n */ async function _getStandardizedInputs(run, schemaFormat) {\n    if (schemaFormat === \"original\") {\n        throw new Error(\"Do not assign inputs with original schema drop the key for now. \" + \"When inputs are added to streamLog they should be added with \" + \"standardized schema for streaming events.\");\n    }\n    const { inputs } = run;\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return inputs;\n    }\n    if (Object.keys(inputs).length === 1 && inputs?.input === \"\") {\n        return undefined;\n    }\n    // new style chains\n    // These nest an additional 'input' key inside the 'inputs' to make sure\n    // the input is always a dict. We need to unpack and user the inner value.\n    // We should try to fix this in Runnables and callbacks/tracers\n    // Runnables should be using a null type here not a placeholder\n    // dict.\n    return inputs.input;\n}\nasync function _getStandardizedOutputs(run, schemaFormat) {\n    const { outputs } = run;\n    if (schemaFormat === \"original\") {\n        // Return the old schema, without standardizing anything\n        return outputs;\n    }\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return outputs;\n    }\n    // TODO: Remove this hacky check\n    if (outputs !== undefined && Object.keys(outputs).length === 1 && outputs?.output !== undefined) {\n        return outputs.output;\n    }\n    return outputs;\n}\nfunction isChatGenerationChunk(x) {\n    return x !== undefined && x.message !== undefined;\n}\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */ class LogStreamCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(fields){\n        super({\n            _awaitHandler: true,\n            ...fields\n        });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_schemaFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"original\"\n        });\n        Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyMapByRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"counterMapByRunName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"log_stream_tracer\"\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this._schemaFormat = fields?._schemaFormat ?? this._schemaFormat;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n    // This is a legacy method only called once for an entire run tree\n    // and is therefore not useful here\n    }\n    _includeRun(run) {\n        if (run.id === this.rootId) {\n            return false;\n        }\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined && this.includeTags === undefined && this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.run_type);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || runTags.find((tag)=>this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.run_type);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && runTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, output) {\n        // Tap an output async iterator to stream its values to the log.\n        for await (const chunk of output){\n            // root run is handled in .streamLog()\n            if (runId !== this.rootId) {\n                // if we can't find the run silently ignore\n                // eg. because this run wasn't included in the log\n                const key = this.keyMapByRunId[runId];\n                if (key) {\n                    await this.writer.write(new RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: `/logs/${key}/streamed_output/-`,\n                                value: chunk\n                            }\n                        ]\n                    }));\n                }\n            }\n            yield chunk;\n        }\n    }\n    async onRunCreate(run) {\n        if (this.rootId === undefined) {\n            this.rootId = run.id;\n            await this.writer.write(new RunLogPatch({\n                ops: [\n                    {\n                        op: \"replace\",\n                        path: \"\",\n                        value: {\n                            id: run.id,\n                            name: run.name,\n                            type: run.run_type,\n                            streamed_output: [],\n                            final_output: undefined,\n                            logs: {}\n                        }\n                    }\n                ]\n            }));\n        }\n        if (!this._includeRun(run)) {\n            return;\n        }\n        if (this.counterMapByRunName[run.name] === undefined) {\n            this.counterMapByRunName[run.name] = 0;\n        }\n        this.counterMapByRunName[run.name] += 1;\n        const count = this.counterMapByRunName[run.name];\n        this.keyMapByRunId[run.id] = count === 1 ? run.name : `${run.name}:${count}`;\n        const logEntry = {\n            id: run.id,\n            name: run.name,\n            type: run.run_type,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            start_time: new Date(run.start_time).toISOString(),\n            streamed_output: [],\n            streamed_output_str: [],\n            final_output: undefined,\n            end_time: undefined\n        };\n        if (this._schemaFormat === \"streaming_events\") {\n            logEntry.inputs = await _getStandardizedInputs(run, this._schemaFormat);\n        }\n        await this.writer.write(new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${this.keyMapByRunId[run.id]}`,\n                    value: logEntry\n                }\n            ]\n        }));\n    }\n    async onRunUpdate(run) {\n        try {\n            const runName = this.keyMapByRunId[run.id];\n            if (runName === undefined) {\n                return;\n            }\n            const ops = [];\n            if (this._schemaFormat === \"streaming_events\") {\n                ops.push({\n                    op: \"replace\",\n                    path: `/logs/${runName}/inputs`,\n                    value: await _getStandardizedInputs(run, this._schemaFormat)\n                });\n            }\n            ops.push({\n                op: \"add\",\n                path: `/logs/${runName}/final_output`,\n                value: await _getStandardizedOutputs(run, this._schemaFormat)\n            });\n            if (run.end_time !== undefined) {\n                ops.push({\n                    op: \"add\",\n                    path: `/logs/${runName}/end_time`,\n                    value: new Date(run.end_time).toISOString()\n                });\n            }\n            const patch = new RunLogPatch({\n                ops\n            });\n            await this.writer.write(patch);\n        } finally{\n            if (run.id === this.rootId) {\n                const patch = new RunLogPatch({\n                    ops: [\n                        {\n                            op: \"replace\",\n                            path: \"/final_output\",\n                            value: await _getStandardizedOutputs(run, this._schemaFormat)\n                        }\n                    ]\n                });\n                await this.writer.write(patch);\n                if (this.autoClose) {\n                    await this.writer.close();\n                }\n            }\n        }\n    }\n    async onLLMNewToken(run, token, kwargs) {\n        const runName = this.keyMapByRunId[run.id];\n        if (runName === undefined) {\n            return;\n        }\n        // TODO: Remove hack\n        const isChatModel = run.inputs.messages !== undefined;\n        let streamedOutputValue;\n        if (isChatModel) {\n            if (isChatGenerationChunk(kwargs?.chunk)) {\n                streamedOutputValue = kwargs?.chunk;\n            } else {\n                streamedOutputValue = new _messages_index_js__WEBPACK_IMPORTED_MODULE_3__.AIMessageChunk(token);\n            }\n        } else {\n            streamedOutputValue = token;\n        }\n        const patch = new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output_str/-`,\n                    value: token\n                },\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output/-`,\n                    value: streamedOutputValue\n                }\n            ]\n        });\n        await this.writer.write(patch);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/root_listener.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RootListenersTracer: () => (/* binding */ RootListenersTracer)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\nclass RootListenersTracer extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseTracer {\n    constructor({ config, onStart, onEnd, onError }){\n        super({\n            _awaitHandler: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"RootListenersTracer\"\n        });\n        /** The Run's ID. Type UUID */ Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnStart\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnEnd\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.config = config;\n        this.argOnStart = onStart;\n        this.argOnEnd = onEnd;\n        this.argOnError = onError;\n    }\n    /**\n     * This is a legacy method only called once for an entire run tree\n     * therefore not useful here\n     * @param {Run} _ Not used\n     */ persistRun(_) {\n        return Promise.resolve();\n    }\n    async onRunCreate(run) {\n        if (this.rootId) {\n            return;\n        }\n        this.rootId = run.id;\n        if (this.argOnStart) {\n            if (this.argOnStart.length === 1) {\n                await this.argOnStart(run);\n            } else if (this.argOnStart.length === 2) {\n                await this.argOnStart(run, this.config);\n            }\n        }\n    }\n    async onRunUpdate(run) {\n        if (run.id !== this.rootId) {\n            return;\n        }\n        if (!run.error) {\n            if (this.argOnEnd) {\n                if (this.argOnEnd.length === 1) {\n                    await this.argOnEnd(run);\n                } else if (this.argOnEnd.length === 2) {\n                    await this.argOnEnd(run, this.config);\n                }\n            }\n        } else if (this.argOnError) {\n            if (this.argOnError.length === 1) {\n                await this.argOnError(run);\n            } else if (this.argOnError.length === 2) {\n                await this.argOnError(run, this.config);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDO0FBQ2hDLE1BQU1DLDRCQUE0QkQsZ0RBQVVBO0lBQy9DRSxZQUFZLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRyxDQUFFO1FBQzlDLEtBQUssQ0FBQztZQUFFQyxlQUFlO1FBQUs7UUFDNUJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsNEJBQTRCLEdBQzVCTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWM7WUFDdENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWM7WUFDdENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1YsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ1csVUFBVSxHQUFHVjtRQUNsQixJQUFJLENBQUNXLFFBQVEsR0FBR1Y7UUFDaEIsSUFBSSxDQUFDVyxVQUFVLEdBQUdWO0lBQ3RCO0lBQ0E7Ozs7S0FJQyxHQUNEVyxXQUFXQyxDQUFDLEVBQUU7UUFDVixPQUFPQyxRQUFRQyxPQUFPO0lBQzFCO0lBQ0EsTUFBTUMsWUFBWUMsR0FBRyxFQUFFO1FBQ25CLElBQUksSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFDYjtRQUNKO1FBQ0EsSUFBSSxDQUFDQSxNQUFNLEdBQUdELElBQUlFLEVBQUU7UUFDcEIsSUFBSSxJQUFJLENBQUNWLFVBQVUsRUFBRTtZQUNqQixJQUFJLElBQUksQ0FBQ0EsVUFBVSxDQUFDVyxNQUFNLEtBQUssR0FBRztnQkFDOUIsTUFBTSxJQUFJLENBQUNYLFVBQVUsQ0FBQ1E7WUFDMUIsT0FDSyxJQUFJLElBQUksQ0FBQ1IsVUFBVSxDQUFDVyxNQUFNLEtBQUssR0FBRztnQkFDbkMsTUFBTSxJQUFJLENBQUNYLFVBQVUsQ0FBQ1EsS0FBSyxJQUFJLENBQUNuQixNQUFNO1lBQzFDO1FBQ0o7SUFDSjtJQUNBLE1BQU11QixZQUFZSixHQUFHLEVBQUU7UUFDbkIsSUFBSUEsSUFBSUUsRUFBRSxLQUFLLElBQUksQ0FBQ0QsTUFBTSxFQUFFO1lBQ3hCO1FBQ0o7UUFDQSxJQUFJLENBQUNELElBQUlLLEtBQUssRUFBRTtZQUNaLElBQUksSUFBSSxDQUFDWixRQUFRLEVBQUU7Z0JBQ2YsSUFBSSxJQUFJLENBQUNBLFFBQVEsQ0FBQ1UsTUFBTSxLQUFLLEdBQUc7b0JBQzVCLE1BQU0sSUFBSSxDQUFDVixRQUFRLENBQUNPO2dCQUN4QixPQUNLLElBQUksSUFBSSxDQUFDUCxRQUFRLENBQUNVLE1BQU0sS0FBSyxHQUFHO29CQUNqQyxNQUFNLElBQUksQ0FBQ1YsUUFBUSxDQUFDTyxLQUFLLElBQUksQ0FBQ25CLE1BQU07Z0JBQ3hDO1lBQ0o7UUFDSixPQUNLLElBQUksSUFBSSxDQUFDYSxVQUFVLEVBQUU7WUFDdEIsSUFBSSxJQUFJLENBQUNBLFVBQVUsQ0FBQ1MsTUFBTSxLQUFLLEdBQUc7Z0JBQzlCLE1BQU0sSUFBSSxDQUFDVCxVQUFVLENBQUNNO1lBQzFCLE9BQ0ssSUFBSSxJQUFJLENBQUNOLFVBQVUsQ0FBQ1MsTUFBTSxLQUFLLEdBQUc7Z0JBQ25DLE1BQU0sSUFBSSxDQUFDVCxVQUFVLENBQUNNLEtBQUssSUFBSSxDQUFDbkIsTUFBTTtZQUMxQztRQUNKO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL3Jvb3RfbGlzdGVuZXIuanM/MGQ0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlVHJhY2VyIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0IGNsYXNzIFJvb3RMaXN0ZW5lcnNUcmFjZXIgZXh0ZW5kcyBCYXNlVHJhY2VyIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNvbmZpZywgb25TdGFydCwgb25FbmQsIG9uRXJyb3IsIH0pIHtcbiAgICAgICAgc3VwZXIoeyBfYXdhaXRIYW5kbGVyOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIlJvb3RMaXN0ZW5lcnNUcmFjZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgLyoqIFRoZSBSdW4ncyBJRC4gVHlwZSBVVUlEICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvb3RJZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25maWdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnT25TdGFydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPbkVuZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPbkVycm9yXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmFyZ09uU3RhcnQgPSBvblN0YXJ0O1xuICAgICAgICB0aGlzLmFyZ09uRW5kID0gb25FbmQ7XG4gICAgICAgIHRoaXMuYXJnT25FcnJvciA9IG9uRXJyb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBsZWdhY3kgbWV0aG9kIG9ubHkgY2FsbGVkIG9uY2UgZm9yIGFuIGVudGlyZSBydW4gdHJlZVxuICAgICAqIHRoZXJlZm9yZSBub3QgdXNlZnVsIGhlcmVcbiAgICAgKiBAcGFyYW0ge1J1bn0gXyBOb3QgdXNlZFxuICAgICAqL1xuICAgIHBlcnNpc3RSdW4oXykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuQ3JlYXRlKHJ1bikge1xuICAgICAgICBpZiAodGhpcy5yb290SWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3RJZCA9IHJ1bi5pZDtcbiAgICAgICAgaWYgKHRoaXMuYXJnT25TdGFydCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJnT25TdGFydC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uU3RhcnQocnVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYXJnT25TdGFydC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uU3RhcnQocnVuLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25SdW5VcGRhdGUocnVuKSB7XG4gICAgICAgIGlmIChydW4uaWQgIT09IHRoaXMucm9vdElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydW4uZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFyZ09uRW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXJnT25FbmQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FbmQocnVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPbkVuZC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPbkVuZChydW4sIHRoaXMuY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPbkVycm9yKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcmdPbkVycm9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FcnJvcihydW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPbkVycm9yLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FcnJvcihydW4sIHRoaXMuY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlVHJhY2VyIiwiUm9vdExpc3RlbmVyc1RyYWNlciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwib25TdGFydCIsIm9uRW5kIiwib25FcnJvciIsIl9hd2FpdEhhbmRsZXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiYXJnT25TdGFydCIsImFyZ09uRW5kIiwiYXJnT25FcnJvciIsInBlcnNpc3RSdW4iLCJfIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvblJ1bkNyZWF0ZSIsInJ1biIsInJvb3RJZCIsImlkIiwibGVuZ3RoIiwib25SdW5VcGRhdGUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/tracer_langchain.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracer: () => (/* binding */ LangChainTracer)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\n\n\nclass LangChainTracer extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(fields = {}){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { exampleId, projectName, client } = fields;\n        this.projectName = projectName ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_PROJECT\") ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_SESSION\");\n        this.exampleId = exampleId;\n        this.client = client ?? new langsmith__WEBPACK_IMPORTED_MODULE_0__.Client({});\n    }\n    async _convertToCreate(run, example_id = undefined) {\n        return {\n            ...run,\n            extra: {\n                ...run.extra,\n                runtime: await (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getRuntimeEnvironment)()\n            },\n            child_runs: undefined,\n            session_name: this.projectName,\n            reference_example_id: run.parent_run_id ? undefined : example_id\n        };\n    }\n    async persistRun(_run) {}\n    async onRunCreate(run) {\n        const persistedRun = await this._convertToCreate(run, this.exampleId);\n        await this.client.createRun(persistedRun);\n    }\n    async onRunUpdate(run) {\n        const runUpdate = {\n            end_time: run.end_time,\n            error: run.error,\n            outputs: run.outputs,\n            events: run.events,\n            inputs: run.inputs,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            parent_run_id: run.parent_run_id\n        };\n        await this.client.updateRun(run.id, runUpdate);\n    }\n    getRun(id) {\n        return this.runMap.get(id);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy90cmFjZXJfbGFuZ2NoYWluLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUM7QUFDNkM7QUFDekM7QUFDaEMsTUFBTUksd0JBQXdCRCxnREFBVUE7SUFDM0NFLFlBQVlDLFNBQVMsQ0FBQyxDQUFDLENBQUU7UUFDckIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRSxHQUFHVDtRQUMzQyxJQUFJLENBQUNRLFdBQVcsR0FDWkEsZUFDSWIscUVBQXNCQSxDQUFDLHdCQUN2QkEscUVBQXNCQSxDQUFDO1FBQy9CLElBQUksQ0FBQ1ksU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNFLE1BQU0sR0FBR0EsVUFBVSxJQUFJZiw2Q0FBTUEsQ0FBQyxDQUFDO0lBQ3hDO0lBQ0EsTUFBTWdCLGlCQUFpQkMsR0FBRyxFQUFFQyxhQUFhQyxTQUFTLEVBQUU7UUFDaEQsT0FBTztZQUNILEdBQUdGLEdBQUc7WUFDTkcsT0FBTztnQkFDSCxHQUFHSCxJQUFJRyxLQUFLO2dCQUNaQyxTQUFTLE1BQU1uQixvRUFBcUJBO1lBQ3hDO1lBQ0FvQixZQUFZSDtZQUNaSSxjQUFjLElBQUksQ0FBQ1QsV0FBVztZQUM5QlUsc0JBQXNCUCxJQUFJUSxhQUFhLEdBQUdOLFlBQVlEO1FBQzFEO0lBQ0o7SUFDQSxNQUFNUSxXQUFXQyxJQUFJLEVBQUUsQ0FBRTtJQUN6QixNQUFNQyxZQUFZWCxHQUFHLEVBQUU7UUFDbkIsTUFBTVksZUFBZSxNQUFNLElBQUksQ0FBQ2IsZ0JBQWdCLENBQUNDLEtBQUssSUFBSSxDQUFDSixTQUFTO1FBQ3BFLE1BQU0sSUFBSSxDQUFDRSxNQUFNLENBQUNlLFNBQVMsQ0FBQ0Q7SUFDaEM7SUFDQSxNQUFNRSxZQUFZZCxHQUFHLEVBQUU7UUFDbkIsTUFBTWUsWUFBWTtZQUNkQyxVQUFVaEIsSUFBSWdCLFFBQVE7WUFDdEJDLE9BQU9qQixJQUFJaUIsS0FBSztZQUNoQkMsU0FBU2xCLElBQUlrQixPQUFPO1lBQ3BCQyxRQUFRbkIsSUFBSW1CLE1BQU07WUFDbEJDLFFBQVFwQixJQUFJb0IsTUFBTTtZQUNsQkMsVUFBVXJCLElBQUlxQixRQUFRO1lBQ3RCQyxjQUFjdEIsSUFBSXNCLFlBQVk7WUFDOUJkLGVBQWVSLElBQUlRLGFBQWE7UUFDcEM7UUFDQSxNQUFNLElBQUksQ0FBQ1YsTUFBTSxDQUFDeUIsU0FBUyxDQUFDdkIsSUFBSXdCLEVBQUUsRUFBRVQ7SUFDeEM7SUFDQVUsT0FBT0QsRUFBRSxFQUFFO1FBQ1AsT0FBTyxJQUFJLENBQUNFLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDSDtJQUMzQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3RyYWNlcnMvdHJhY2VyX2xhbmdjaGFpbi5qcz80ZDg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudCB9IGZyb20gXCJsYW5nc21pdGhcIjtcbmltcG9ydCB7IGdldEVudmlyb25tZW50VmFyaWFibGUsIGdldFJ1bnRpbWVFbnZpcm9ubWVudCB9IGZyb20gXCIuLi91dGlscy9lbnYuanNcIjtcbmltcG9ydCB7IEJhc2VUcmFjZXIgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5leHBvcnQgY2xhc3MgTGFuZ0NoYWluVHJhY2VyIGV4dGVuZHMgQmFzZVRyYWNlciB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzID0ge30pIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJsYW5nY2hhaW5fdHJhY2VyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInByb2plY3ROYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4YW1wbGVJZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjbGllbnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyBleGFtcGxlSWQsIHByb2plY3ROYW1lLCBjbGllbnQgfSA9IGZpZWxkcztcbiAgICAgICAgdGhpcy5wcm9qZWN0TmFtZSA9XG4gICAgICAgICAgICBwcm9qZWN0TmFtZSA/P1xuICAgICAgICAgICAgICAgIGdldEVudmlyb25tZW50VmFyaWFibGUoXCJMQU5HQ0hBSU5fUFJPSkVDVFwiKSA/P1xuICAgICAgICAgICAgICAgIGdldEVudmlyb25tZW50VmFyaWFibGUoXCJMQU5HQ0hBSU5fU0VTU0lPTlwiKTtcbiAgICAgICAgdGhpcy5leGFtcGxlSWQgPSBleGFtcGxlSWQ7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50ID8/IG5ldyBDbGllbnQoe30pO1xuICAgIH1cbiAgICBhc3luYyBfY29udmVydFRvQ3JlYXRlKHJ1biwgZXhhbXBsZV9pZCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucnVuLFxuICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAuLi5ydW4uZXh0cmEsXG4gICAgICAgICAgICAgICAgcnVudGltZTogYXdhaXQgZ2V0UnVudGltZUVudmlyb25tZW50KCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRfcnVuczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2Vzc2lvbl9uYW1lOiB0aGlzLnByb2plY3ROYW1lLFxuICAgICAgICAgICAgcmVmZXJlbmNlX2V4YW1wbGVfaWQ6IHJ1bi5wYXJlbnRfcnVuX2lkID8gdW5kZWZpbmVkIDogZXhhbXBsZV9pZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgcGVyc2lzdFJ1bihfcnVuKSB7IH1cbiAgICBhc3luYyBvblJ1bkNyZWF0ZShydW4pIHtcbiAgICAgICAgY29uc3QgcGVyc2lzdGVkUnVuID0gYXdhaXQgdGhpcy5fY29udmVydFRvQ3JlYXRlKHJ1biwgdGhpcy5leGFtcGxlSWQpO1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5jcmVhdGVSdW4ocGVyc2lzdGVkUnVuKTtcbiAgICB9XG4gICAgYXN5bmMgb25SdW5VcGRhdGUocnVuKSB7XG4gICAgICAgIGNvbnN0IHJ1blVwZGF0ZSA9IHtcbiAgICAgICAgICAgIGVuZF90aW1lOiBydW4uZW5kX3RpbWUsXG4gICAgICAgICAgICBlcnJvcjogcnVuLmVycm9yLFxuICAgICAgICAgICAgb3V0cHV0czogcnVuLm91dHB1dHMsXG4gICAgICAgICAgICBldmVudHM6IHJ1bi5ldmVudHMsXG4gICAgICAgICAgICBpbnB1dHM6IHJ1bi5pbnB1dHMsXG4gICAgICAgICAgICB0cmFjZV9pZDogcnVuLnRyYWNlX2lkLFxuICAgICAgICAgICAgZG90dGVkX29yZGVyOiBydW4uZG90dGVkX29yZGVyLFxuICAgICAgICAgICAgcGFyZW50X3J1bl9pZDogcnVuLnBhcmVudF9ydW5faWQsXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnVwZGF0ZVJ1bihydW4uaWQsIHJ1blVwZGF0ZSk7XG4gICAgfVxuICAgIGdldFJ1bihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ydW5NYXAuZ2V0KGlkKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQ2xpZW50IiwiZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSIsImdldFJ1bnRpbWVFbnZpcm9ubWVudCIsIkJhc2VUcmFjZXIiLCJMYW5nQ2hhaW5UcmFjZXIiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJleGFtcGxlSWQiLCJwcm9qZWN0TmFtZSIsImNsaWVudCIsIl9jb252ZXJ0VG9DcmVhdGUiLCJydW4iLCJleGFtcGxlX2lkIiwidW5kZWZpbmVkIiwiZXh0cmEiLCJydW50aW1lIiwiY2hpbGRfcnVucyIsInNlc3Npb25fbmFtZSIsInJlZmVyZW5jZV9leGFtcGxlX2lkIiwicGFyZW50X3J1bl9pZCIsInBlcnNpc3RSdW4iLCJfcnVuIiwib25SdW5DcmVhdGUiLCJwZXJzaXN0ZWRSdW4iLCJjcmVhdGVSdW4iLCJvblJ1blVwZGF0ZSIsInJ1blVwZGF0ZSIsImVuZF90aW1lIiwiZXJyb3IiLCJvdXRwdXRzIiwiZXZlbnRzIiwiaW5wdXRzIiwidHJhY2VfaWQiLCJkb3R0ZWRfb3JkZXIiLCJ1cGRhdGVSdW4iLCJpZCIsImdldFJ1biIsInJ1bk1hcCIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracerV1: () => (/* binding */ LangChainTracerV1)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\n\n\n/** @deprecated Use LangChainTracer instead. */ class LangChainTracerV1 extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(){\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_ENDPOINT\") || \"http://localhost:1984\"\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        Object.defineProperty(this, \"session\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_API_KEY\");\n        if (apiKey) {\n            this.headers[\"x-api-key\"] = apiKey;\n        }\n    }\n    async newSession(sessionName) {\n        const sessionCreate = {\n            start_time: Date.now(),\n            name: sessionName\n        };\n        const session = await this.persistSession(sessionCreate);\n        this.session = session;\n        return session;\n    }\n    async loadSession(sessionName) {\n        const endpoint = `${this.endpoint}/sessions?name=${sessionName}`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async loadDefaultSession() {\n        const endpoint = `${this.endpoint}/sessions?name=default`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async convertV2RunToRun(run) {\n        const session = this.session ?? await this.loadDefaultSession();\n        const serialized = run.serialized;\n        let runResult;\n        if (run.run_type === \"llm\") {\n            const prompts = run.inputs.prompts ? run.inputs.prompts : run.inputs.messages.map((x)=>(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(x));\n            const llmRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                prompts,\n                response: run.outputs\n            };\n            runResult = llmRun;\n        } else if (run.run_type === \"chain\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const chainRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                inputs: run.inputs,\n                outputs: run.outputs,\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = chainRun;\n        } else if (run.run_type === \"tool\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const toolRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                tool_input: run.inputs.input,\n                output: run.outputs?.output,\n                action: JSON.stringify(serialized),\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = toolRun;\n        } else {\n            throw new Error(`Unknown run type: ${run.run_type}`);\n        }\n        return runResult;\n    }\n    async persistRun(run) {\n        let endpoint;\n        let v1Run;\n        if (run.run_type !== undefined) {\n            v1Run = await this.convertV2RunToRun(run);\n        } else {\n            v1Run = run;\n        }\n        if (v1Run.type === \"llm\") {\n            endpoint = `${this.endpoint}/llm-runs`;\n        } else if (v1Run.type === \"chain\") {\n            endpoint = `${this.endpoint}/chain-runs`;\n        } else {\n            endpoint = `${this.endpoint}/tool-runs`;\n        }\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(v1Run)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist run: ${response.status} ${response.statusText}`);\n        }\n    }\n    async persistSession(sessionCreate) {\n        const endpoint = `${this.endpoint}/sessions`;\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(sessionCreate)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist session: ${response.status} ${response.statusText}, using default session.`);\n            return {\n                id: 1,\n                ...sessionCreate\n            };\n        }\n        return {\n            id: (await response.json()).id,\n            ...sessionCreate\n        };\n    }\n    async _handleSessionResponse(endpoint) {\n        const response = await fetch(endpoint, {\n            method: \"GET\",\n            headers: this.headers\n        });\n        let tracerSession;\n        if (!response.ok) {\n            console.error(`Failed to load session: ${response.status} ${response.statusText}`);\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        const resp = await response.json();\n        if (resp.length === 0) {\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        [tracerSession] = resp;\n        this.session = tracerSession;\n        return tracerSession;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Validator: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.Validator),\n/* harmony export */   deepCompareStrict: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict),\n/* harmony export */   dereference: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.dereference),\n/* harmony export */   encodePointer: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.encodePointer),\n/* harmony export */   escapePointer: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.escapePointer),\n/* harmony export */   fastFormat: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.fastFormat),\n/* harmony export */   fullFormat: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.fullFormat),\n/* harmony export */   ignoredKeyword: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ignoredKeyword),\n/* harmony export */   initialBaseURI: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.initialBaseURI),\n/* harmony export */   schemaArrayKeyword: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.schemaArrayKeyword),\n/* harmony export */   schemaKeyword: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.schemaKeyword),\n/* harmony export */   schemaMapKeyword: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.schemaMapKeyword),\n/* harmony export */   ucs2length: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ucs2length),\n/* harmony export */   validate: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.validate)\n/* harmony export */ });\n/* harmony import */ var _src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9AY2Z3b3JrZXIvanNvbi1zY2hlbWEvaW5kZXguanM/Y2QwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9zcmMvaW5kZXguanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deepCompareStrict: () => (/* binding */ deepCompareStrict)\n/* harmony export */ });\nfunction deepCompareStrict(a, b) {\n    const typeofa = typeof a;\n    if (typeofa !== typeof b) {\n        return false;\n    }\n    if (Array.isArray(a)) {\n        if (!Array.isArray(b)) {\n            return false;\n        }\n        const length = a.length;\n        if (length !== b.length) {\n            return false;\n        }\n        for(let i = 0; i < length; i++){\n            if (!deepCompareStrict(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (typeofa === \"object\") {\n        if (!a || !b) {\n            return a === b;\n        }\n        const aKeys = Object.keys(a);\n        const bKeys = Object.keys(b);\n        const length = aKeys.length;\n        if (length !== bKeys.length) {\n            return false;\n        }\n        for (const k of aKeys){\n            if (!deepCompareStrict(a[k], b[k])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return a === b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy9kZWVwLWNvbXBhcmUtc3RyaWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxrQkFBa0JDLENBQUMsRUFBRUMsQ0FBQztJQUNsQyxNQUFNQyxVQUFVLE9BQU9GO0lBQ3ZCLElBQUlFLFlBQVksT0FBT0QsR0FBRztRQUN0QixPQUFPO0lBQ1g7SUFDQSxJQUFJRSxNQUFNQyxPQUFPLENBQUNKLElBQUk7UUFDbEIsSUFBSSxDQUFDRyxNQUFNQyxPQUFPLENBQUNILElBQUk7WUFDbkIsT0FBTztRQUNYO1FBQ0EsTUFBTUksU0FBU0wsRUFBRUssTUFBTTtRQUN2QixJQUFJQSxXQUFXSixFQUFFSSxNQUFNLEVBQUU7WUFDckIsT0FBTztRQUNYO1FBQ0EsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlELFFBQVFDLElBQUs7WUFDN0IsSUFBSSxDQUFDUCxrQkFBa0JDLENBQUMsQ0FBQ00sRUFBRSxFQUFFTCxDQUFDLENBQUNLLEVBQUUsR0FBRztnQkFDaEMsT0FBTztZQUNYO1FBQ0o7UUFDQSxPQUFPO0lBQ1g7SUFDQSxJQUFJSixZQUFZLFVBQVU7UUFDdEIsSUFBSSxDQUFDRixLQUFLLENBQUNDLEdBQUc7WUFDVixPQUFPRCxNQUFNQztRQUNqQjtRQUNBLE1BQU1NLFFBQVFDLE9BQU9DLElBQUksQ0FBQ1Q7UUFDMUIsTUFBTVUsUUFBUUYsT0FBT0MsSUFBSSxDQUFDUjtRQUMxQixNQUFNSSxTQUFTRSxNQUFNRixNQUFNO1FBQzNCLElBQUlBLFdBQVdLLE1BQU1MLE1BQU0sRUFBRTtZQUN6QixPQUFPO1FBQ1g7UUFDQSxLQUFLLE1BQU1NLEtBQUtKLE1BQU87WUFDbkIsSUFBSSxDQUFDUixrQkFBa0JDLENBQUMsQ0FBQ1csRUFBRSxFQUFFVixDQUFDLENBQUNVLEVBQUUsR0FBRztnQkFDaEMsT0FBTztZQUNYO1FBQ0o7UUFDQSxPQUFPO0lBQ1g7SUFDQSxPQUFPWCxNQUFNQztBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9AY2Z3b3JrZXIvanNvbi1zY2hlbWEvc3JjL2RlZXAtY29tcGFyZS1zdHJpY3QuanM/Mjg0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZGVlcENvbXBhcmVTdHJpY3QoYSwgYikge1xuICAgIGNvbnN0IHR5cGVvZmEgPSB0eXBlb2YgYTtcbiAgICBpZiAodHlwZW9mYSAhPT0gdHlwZW9mIGIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWRlZXBDb21wYXJlU3RyaWN0KGFbaV0sIGJbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mYSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoIWEgfHwgIWIpIHtcbiAgICAgICAgICAgIHJldHVybiBhID09PSBiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIGNvbnN0IGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGFLZXlzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrIG9mIGFLZXlzKSB7XG4gICAgICAgICAgICBpZiAoIWRlZXBDb21wYXJlU3RyaWN0KGFba10sIGJba10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gYSA9PT0gYjtcbn1cbiJdLCJuYW1lcyI6WyJkZWVwQ29tcGFyZVN0cmljdCIsImEiLCJiIiwidHlwZW9mYSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImkiLCJhS2V5cyIsIk9iamVjdCIsImtleXMiLCJiS2V5cyIsImsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dereference: () => (/* binding */ dereference),\n/* harmony export */   ignoredKeyword: () => (/* binding */ ignoredKeyword),\n/* harmony export */   initialBaseURI: () => (/* binding */ initialBaseURI),\n/* harmony export */   schemaArrayKeyword: () => (/* binding */ schemaArrayKeyword),\n/* harmony export */   schemaKeyword: () => (/* binding */ schemaKeyword),\n/* harmony export */   schemaMapKeyword: () => (/* binding */ schemaMapKeyword)\n/* harmony export */ });\n/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointer.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js\");\n\nconst schemaKeyword = {\n    additionalItems: true,\n    unevaluatedItems: true,\n    items: true,\n    contains: true,\n    additionalProperties: true,\n    unevaluatedProperties: true,\n    propertyNames: true,\n    not: true,\n    if: true,\n    then: true,\n    else: true\n};\nconst schemaArrayKeyword = {\n    prefixItems: true,\n    items: true,\n    allOf: true,\n    anyOf: true,\n    oneOf: true\n};\nconst schemaMapKeyword = {\n    $defs: true,\n    definitions: true,\n    properties: true,\n    patternProperties: true,\n    dependentSchemas: true\n};\nconst ignoredKeyword = {\n    id: true,\n    $id: true,\n    $ref: true,\n    $schema: true,\n    $anchor: true,\n    $vocabulary: true,\n    $comment: true,\n    default: true,\n    enum: true,\n    const: true,\n    required: true,\n    type: true,\n    maximum: true,\n    minimum: true,\n    exclusiveMaximum: true,\n    exclusiveMinimum: true,\n    multipleOf: true,\n    maxLength: true,\n    minLength: true,\n    pattern: true,\n    format: true,\n    maxItems: true,\n    minItems: true,\n    uniqueItems: true,\n    maxProperties: true,\n    minProperties: true\n};\n/**\n * Default base URI for schemas without an $id.\n * https://json-schema.org/draft/2019-09/json-schema-core.html#initial-base\n * https://tools.ietf.org/html/rfc3986#section-5.1\n */ let initialBaseURI = // @ts-ignore\ntypeof self !== \"undefined\" && self.location && self.location.origin !== \"null\" ? /* #__PURE__ */ new URL(self.location.origin + self.location.pathname + location.search) : /* #__PURE__ */ new URL(\"https://github.com/cfworker\");\nfunction dereference(schema, lookup = Object.create(null), baseURI = initialBaseURI, basePointer = \"\") {\n    if (schema && typeof schema === \"object\" && !Array.isArray(schema)) {\n        const id = schema.$id || schema.id;\n        if (id) {\n            const url = new URL(id, baseURI.href);\n            if (url.hash.length > 1) {\n                lookup[url.href] = schema;\n            } else {\n                url.hash = \"\"; // normalize hash https://url.spec.whatwg.org/#dom-url-hash\n                if (basePointer === \"\") {\n                    baseURI = url;\n                } else {\n                    dereference(schema, lookup, baseURI);\n                }\n            }\n        }\n    } else if (schema !== true && schema !== false) {\n        return lookup;\n    }\n    // compute the schema's URI and add it to the mapping.\n    const schemaURI = baseURI.href + (basePointer ? \"#\" + basePointer : \"\");\n    if (lookup[schemaURI] !== undefined) {\n        throw new Error(`Duplicate schema URI \"${schemaURI}\".`);\n    }\n    lookup[schemaURI] = schema;\n    // exit early if this is a boolean schema.\n    if (schema === true || schema === false) {\n        return lookup;\n    }\n    // set the schema's absolute URI.\n    if (schema.__absolute_uri__ === undefined) {\n        Object.defineProperty(schema, \"__absolute_uri__\", {\n            enumerable: false,\n            value: schemaURI\n        });\n    }\n    // if a $ref is found, resolve it's absolute URI.\n    if (schema.$ref && schema.__absolute_ref__ === undefined) {\n        const url = new URL(schema.$ref, baseURI.href);\n        url.hash = url.hash; // normalize hash https://url.spec.whatwg.org/#dom-url-hash\n        Object.defineProperty(schema, \"__absolute_ref__\", {\n            enumerable: false,\n            value: url.href\n        });\n    }\n    // if a $recursiveRef is found, resolve it's absolute URI.\n    if (schema.$recursiveRef && schema.__absolute_recursive_ref__ === undefined) {\n        const url = new URL(schema.$recursiveRef, baseURI.href);\n        url.hash = url.hash; // normalize hash https://url.spec.whatwg.org/#dom-url-hash\n        Object.defineProperty(schema, \"__absolute_recursive_ref__\", {\n            enumerable: false,\n            value: url.href\n        });\n    }\n    // if an $anchor is found, compute it's URI and add it to the mapping.\n    if (schema.$anchor) {\n        const url = new URL(\"#\" + schema.$anchor, baseURI.href);\n        lookup[url.href] = schema;\n    }\n    // process subschemas.\n    for(let key in schema){\n        if (ignoredKeyword[key]) {\n            continue;\n        }\n        const keyBase = `${basePointer}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_0__.encodePointer)(key)}`;\n        const subSchema = schema[key];\n        if (Array.isArray(subSchema)) {\n            if (schemaArrayKeyword[key]) {\n                const length = subSchema.length;\n                for(let i = 0; i < length; i++){\n                    dereference(subSchema[i], lookup, baseURI, `${keyBase}/${i}`);\n                }\n            }\n        } else if (schemaMapKeyword[key]) {\n            for(let subKey in subSchema){\n                dereference(subSchema[subKey], lookup, baseURI, `${keyBase}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_0__.encodePointer)(subKey)}`);\n            }\n        } else {\n            dereference(subSchema, lookup, baseURI, keyBase);\n        }\n    }\n    return lookup;\n} // schema identification examples\n // https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.A\n // $ref delegation\n // https://github.com/json-schema-org/json-schema-spec/issues/514\n // output format\n // https://json-schema.org/draft/2019-09/json-schema-core.html#output\n // JSON pointer\n // https://tools.ietf.org/html/rfc6901\n // JSON relative pointer\n // https://tools.ietf.org/html/draft-handrews-relative-json-pointer-01\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fastFormat: () => (/* binding */ fastFormat),\n/* harmony export */   fullFormat: () => (/* binding */ fullFormat)\n/* harmony export */ });\n// based on https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js\nconst DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\nconst DAYS = [\n    0,\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\nconst TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d(?::?\\d\\d)?)?$/i;\nconst HOSTNAME = /^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i;\n// const URI = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\nconst URIREF = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\n// uri-template: https://tools.ietf.org/html/rfc6570\nconst URITEMPLATE = /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i;\n// For the source: https://gist.github.com/dperini/729294\n// For test cases: https://mathiasbynens.be/demo/url-regex\nconst URL_ = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu;\nconst UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;\nconst JSON_POINTER = /^(?:\\/(?:[^~/]|~0|~1)*)*$/;\nconst JSON_POINTER_URI_FRAGMENT = /^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;\nconst RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\n// date: http://tools.ietf.org/html/rfc3339#section-5.6\nconst FASTDATE = /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/;\n// date-time: http://tools.ietf.org/html/rfc3339#section-5.6\nconst FASTTIME = /^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)?$/i;\nconst FASTDATETIME = /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s](?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)$/i;\n// uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js\n// const FASTURI = /^(?:[a-z][a-z0-9+-.]*:)(?:\\/?\\/)?[^\\s]*$/i;\nconst FASTURIREFERENCE = /^(?:(?:[a-z][a-z0-9+-.]*:)?\\/?\\/)?(?:[^\\\\\\s#][^\\s#]*)?(?:#[^\\\\\\s]*)?$/i;\n// https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js\nconst EMAIL = (input)=>{\n    if (input[0] === '\"') return false;\n    const [name, host, ...rest] = input.split(\"@\");\n    if (!name || !host || rest.length !== 0 || name.length > 64 || host.length > 253) return false;\n    if (name[0] === \".\" || name.endsWith(\".\") || name.includes(\"..\")) return false;\n    if (!/^[a-z0-9.-]+$/i.test(host) || !/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+$/i.test(name)) return false;\n    return host.split(\".\").every((part)=>/^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$/i.test(part));\n};\n// optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\nconst IPV4 = /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/;\n// optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\nconst IPV6 = /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))$/i;\n// https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js\nconst DURATION = (input)=>input.length > 1 && input.length < 80 && (/^P\\d+([.,]\\d+)?W$/.test(input) || /^P[\\dYMDTHS]*(\\d[.,]\\d+)?[YMDHS]$/.test(input) && /^P([.,\\d]+Y)?([.,\\d]+M)?([.,\\d]+D)?(T([.,\\d]+H)?([.,\\d]+M)?([.,\\d]+S)?)?$/.test(input));\nfunction bind(r) {\n    return r.test.bind(r);\n}\nconst fullFormat = {\n    date,\n    time: /* #__PURE__ */ time.bind(undefined, false),\n    \"date-time\": date_time,\n    duration: DURATION,\n    uri,\n    \"uri-reference\": /* #__PURE__ */ bind(URIREF),\n    \"uri-template\": /* #__PURE__ */ bind(URITEMPLATE),\n    url: /* #__PURE__ */ bind(URL_),\n    email: EMAIL,\n    hostname: /* #__PURE__ */ bind(HOSTNAME),\n    ipv4: /* #__PURE__ */ bind(IPV4),\n    ipv6: /* #__PURE__ */ bind(IPV6),\n    regex: regex,\n    uuid: /* #__PURE__ */ bind(UUID),\n    \"json-pointer\": /* #__PURE__ */ bind(JSON_POINTER),\n    \"json-pointer-uri-fragment\": /* #__PURE__ */ bind(JSON_POINTER_URI_FRAGMENT),\n    \"relative-json-pointer\": /* #__PURE__ */ bind(RELATIVE_JSON_POINTER)\n};\nconst fastFormat = {\n    ...fullFormat,\n    date: /* #__PURE__ */ bind(FASTDATE),\n    time: /* #__PURE__ */ bind(FASTTIME),\n    \"date-time\": /* #__PURE__ */ bind(FASTDATETIME),\n    \"uri-reference\": /* #__PURE__ */ bind(FASTURIREFERENCE)\n};\nfunction isLeapYear(year) {\n    // https://tools.ietf.org/html/rfc3339#appendix-C\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction date(str) {\n    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n    const matches = str.match(DATE);\n    if (!matches) return false;\n    const year = +matches[1];\n    const month = +matches[2];\n    const day = +matches[3];\n    return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);\n}\nfunction time(full, str) {\n    const matches = str.match(TIME);\n    if (!matches) return false;\n    const hour = +matches[1];\n    const minute = +matches[2];\n    const second = +matches[3];\n    const timeZone = !!matches[5];\n    return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);\n}\nconst DATE_TIME_SEPARATOR = /t|\\s/i;\nfunction date_time(str) {\n    // http://tools.ietf.org/html/rfc3339#section-5.6\n    const dateTime = str.split(DATE_TIME_SEPARATOR);\n    return dateTime.length == 2 && date(dateTime[0]) && time(true, dateTime[1]);\n}\nconst NOT_URI_FRAGMENT = /\\/|:/;\nconst URI_PATTERN = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\nfunction uri(str) {\n    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \".\"\n    return NOT_URI_FRAGMENT.test(str) && URI_PATTERN.test(str);\n}\nconst Z_ANCHOR = /[^\\\\]\\\\Z/;\nfunction regex(str) {\n    if (Z_ANCHOR.test(str)) return false;\n    try {\n        new RegExp(str);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Validator: () => (/* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_7__.Validator),\n/* harmony export */   deepCompareStrict: () => (/* reexport safe */ _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict),\n/* harmony export */   dereference: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.dereference),\n/* harmony export */   encodePointer: () => (/* reexport safe */ _pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer),\n/* harmony export */   escapePointer: () => (/* reexport safe */ _pointer_js__WEBPACK_IMPORTED_MODULE_3__.escapePointer),\n/* harmony export */   fastFormat: () => (/* reexport safe */ _format_js__WEBPACK_IMPORTED_MODULE_2__.fastFormat),\n/* harmony export */   fullFormat: () => (/* reexport safe */ _format_js__WEBPACK_IMPORTED_MODULE_2__.fullFormat),\n/* harmony export */   ignoredKeyword: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.ignoredKeyword),\n/* harmony export */   initialBaseURI: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.initialBaseURI),\n/* harmony export */   schemaArrayKeyword: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaArrayKeyword),\n/* harmony export */   schemaKeyword: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaKeyword),\n/* harmony export */   schemaMapKeyword: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaMapKeyword),\n/* harmony export */   ucs2length: () => (/* reexport safe */ _ucs2_length_js__WEBPACK_IMPORTED_MODULE_5__.ucs2length),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__.validate)\n/* harmony export */ });\n/* harmony import */ var _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deep-compare-strict.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js\");\n/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dereference.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js\");\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js\");\n/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pointer.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/types.js\");\n/* harmony import */ var _ucs2_length_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ucs2-length.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js\");\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validator.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validator.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQ1I7QUFDTDtBQUNDO0FBQ0Y7QUFDTTtBQUNIO0FBQ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy9pbmRleC5qcz9iNGUzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2RlZXAtY29tcGFyZS1zdHJpY3QuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2RlcmVmZXJlbmNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mb3JtYXQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BvaW50ZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91Y3MyLWxlbmd0aC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdmFsaWRhdGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3ZhbGlkYXRvci5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodePointer: () => (/* binding */ encodePointer),\n/* harmony export */   escapePointer: () => (/* binding */ escapePointer)\n/* harmony export */ });\nfunction encodePointer(p) {\n    return encodeURI(escapePointer(p));\n}\nfunction escapePointer(p) {\n    return p.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy9wb2ludGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0EsY0FBY0MsQ0FBQztJQUMzQixPQUFPQyxVQUFVQyxjQUFjRjtBQUNuQztBQUNPLFNBQVNFLGNBQWNGLENBQUM7SUFDM0IsT0FBT0EsRUFBRUcsT0FBTyxDQUFDLE1BQU0sTUFBTUEsT0FBTyxDQUFDLE9BQU87QUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy9wb2ludGVyLmpzPzNmOWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVBvaW50ZXIocCkge1xuICAgIHJldHVybiBlbmNvZGVVUkkoZXNjYXBlUG9pbnRlcihwKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlUG9pbnRlcihwKSB7XG4gICAgcmV0dXJuIHAucmVwbGFjZSgvfi9nLCBcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLCBcIn4xXCIpO1xufVxuIl0sIm5hbWVzIjpbImVuY29kZVBvaW50ZXIiLCJwIiwiZW5jb2RlVVJJIiwiZXNjYXBlUG9pbnRlciIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/types.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/types.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy90eXBlcy5qcz84NGNkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ucs2length: () => (/* binding */ ucs2length)\n/* harmony export */ });\n/**\n * Get UCS-2 length of a string\n * https://mathiasbynens.be/notes/javascript-encoding\n * https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\n */ function ucs2length(s) {\n    let result = 0;\n    let length = s.length;\n    let index = 0;\n    let charCode;\n    while(index < length){\n        result++;\n        charCode = s.charCodeAt(index++);\n        if (charCode >= 0xd800 && charCode <= 0xdbff && index < length) {\n            // high surrogate, and there is a next character\n            charCode = s.charCodeAt(index);\n            if ((charCode & 0xfc00) == 0xdc00) {\n                // low surrogate\n                index++;\n            }\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy91Y3MyLWxlbmd0aC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNNLFNBQVNBLFdBQVdDLENBQUM7SUFDeEIsSUFBSUMsU0FBUztJQUNiLElBQUlDLFNBQVNGLEVBQUVFLE1BQU07SUFDckIsSUFBSUMsUUFBUTtJQUNaLElBQUlDO0lBQ0osTUFBT0QsUUFBUUQsT0FBUTtRQUNuQkQ7UUFDQUcsV0FBV0osRUFBRUssVUFBVSxDQUFDRjtRQUN4QixJQUFJQyxZQUFZLFVBQVVBLFlBQVksVUFBVUQsUUFBUUQsUUFBUTtZQUM1RCxnREFBZ0Q7WUFDaERFLFdBQVdKLEVBQUVLLFVBQVUsQ0FBQ0Y7WUFDeEIsSUFBSSxDQUFDQyxXQUFXLE1BQUssS0FBTSxRQUFRO2dCQUMvQixnQkFBZ0I7Z0JBQ2hCRDtZQUNKO1FBQ0o7SUFDSjtJQUNBLE9BQU9GO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy91Y3MyLWxlbmd0aC5qcz8xMGJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2V0IFVDUy0yIGxlbmd0aCBvZiBhIHN0cmluZ1xuICogaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2RpbmdcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9wdW55Y29kZS5qcyAtIHB1bnljb2RlLnVjczIuZGVjb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1Y3MybGVuZ3RoKHMpIHtcbiAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICBsZXQgbGVuZ3RoID0gcy5sZW5ndGg7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgY2hhckNvZGU7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCsrO1xuICAgICAgICBjaGFyQ29kZSA9IHMuY2hhckNvZGVBdChpbmRleCsrKTtcbiAgICAgICAgaWYgKGNoYXJDb2RlID49IDB4ZDgwMCAmJiBjaGFyQ29kZSA8PSAweGRiZmYgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuICAgICAgICAgICAgY2hhckNvZGUgPSBzLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKChjaGFyQ29kZSAmIDB4ZmMwMCkgPT0gMHhkYzAwKSB7XG4gICAgICAgICAgICAgICAgLy8gbG93IHN1cnJvZ2F0ZVxuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6WyJ1Y3MybGVuZ3RoIiwicyIsInJlc3VsdCIsImxlbmd0aCIsImluZGV4IiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deep-compare-strict.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js\");\n/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dereference.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js\");\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js\");\n/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pointer.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js\");\n/* harmony import */ var _ucs2_length_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ucs2-length.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js\");\n\n\n\n\n\nfunction validate(instance, schema, draft = \"2019-09\", lookup = (0,_dereference_js__WEBPACK_IMPORTED_MODULE_1__.dereference)(schema), shortCircuit = true, recursiveAnchor = null, instanceLocation = \"#\", schemaLocation = \"#\", evaluated = Object.create(null)) {\n    if (schema === true) {\n        return {\n            valid: true,\n            errors: []\n        };\n    }\n    if (schema === false) {\n        return {\n            valid: false,\n            errors: [\n                {\n                    instanceLocation,\n                    keyword: \"false\",\n                    keywordLocation: instanceLocation,\n                    error: \"False boolean schema.\"\n                }\n            ]\n        };\n    }\n    const rawInstanceType = typeof instance;\n    let instanceType;\n    switch(rawInstanceType){\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            instanceType = rawInstanceType;\n            break;\n        case \"object\":\n            if (instance === null) {\n                instanceType = \"null\";\n            } else if (Array.isArray(instance)) {\n                instanceType = \"array\";\n            } else {\n                instanceType = \"object\";\n            }\n            break;\n        default:\n            // undefined, bigint, function, symbol\n            throw new Error(`Instances of \"${rawInstanceType}\" type are not supported.`);\n    }\n    const { $ref, $recursiveRef, $recursiveAnchor, type: $type, const: $const, enum: $enum, required: $required, not: $not, anyOf: $anyOf, allOf: $allOf, oneOf: $oneOf, if: $if, then: $then, else: $else, format: $format, properties: $properties, patternProperties: $patternProperties, additionalProperties: $additionalProperties, unevaluatedProperties: $unevaluatedProperties, minProperties: $minProperties, maxProperties: $maxProperties, propertyNames: $propertyNames, dependentRequired: $dependentRequired, dependentSchemas: $dependentSchemas, dependencies: $dependencies, prefixItems: $prefixItems, items: $items, additionalItems: $additionalItems, unevaluatedItems: $unevaluatedItems, contains: $contains, minContains: $minContains, maxContains: $maxContains, minItems: $minItems, maxItems: $maxItems, uniqueItems: $uniqueItems, minimum: $minimum, maximum: $maximum, exclusiveMinimum: $exclusiveMinimum, exclusiveMaximum: $exclusiveMaximum, multipleOf: $multipleOf, minLength: $minLength, maxLength: $maxLength, pattern: $pattern, __absolute_ref__, __absolute_recursive_ref__ } = schema;\n    const errors = [];\n    if ($recursiveAnchor === true && recursiveAnchor === null) {\n        recursiveAnchor = schema;\n    }\n    if ($recursiveRef === \"#\") {\n        const refSchema = recursiveAnchor === null ? lookup[__absolute_recursive_ref__] : recursiveAnchor;\n        const keywordLocation = `${schemaLocation}/$recursiveRef`;\n        const result = validate(instance, recursiveAnchor === null ? schema : recursiveAnchor, draft, lookup, shortCircuit, refSchema, instanceLocation, keywordLocation, evaluated);\n        if (!result.valid) {\n            errors.push({\n                instanceLocation,\n                keyword: \"$recursiveRef\",\n                keywordLocation,\n                error: \"A subschema had errors.\"\n            }, ...result.errors);\n        }\n    }\n    if ($ref !== undefined) {\n        const uri = __absolute_ref__ || $ref;\n        const refSchema = lookup[uri];\n        if (refSchema === undefined) {\n            let message = `Unresolved $ref \"${$ref}\".`;\n            if (__absolute_ref__ && __absolute_ref__ !== $ref) {\n                message += `  Absolute URI \"${__absolute_ref__}\".`;\n            }\n            message += `\\nKnown schemas:\\n- ${Object.keys(lookup).join(\"\\n- \")}`;\n            throw new Error(message);\n        }\n        const keywordLocation = `${schemaLocation}/$ref`;\n        const result = validate(instance, refSchema, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation, evaluated);\n        if (!result.valid) {\n            errors.push({\n                instanceLocation,\n                keyword: \"$ref\",\n                keywordLocation,\n                error: \"A subschema had errors.\"\n            }, ...result.errors);\n        }\n        if (draft === \"4\" || draft === \"7\") {\n            return {\n                valid: errors.length === 0,\n                errors\n            };\n        }\n    }\n    if (Array.isArray($type)) {\n        let length = $type.length;\n        let valid = false;\n        for(let i = 0; i < length; i++){\n            if (instanceType === $type[i] || $type[i] === \"integer\" && instanceType === \"number\" && instance % 1 === 0 && instance === instance) {\n                valid = true;\n                break;\n            }\n        }\n        if (!valid) {\n            errors.push({\n                instanceLocation,\n                keyword: \"type\",\n                keywordLocation: `${schemaLocation}/type`,\n                error: `Instance type \"${instanceType}\" is invalid. Expected \"${$type.join('\", \"')}\".`\n            });\n        }\n    } else if ($type === \"integer\") {\n        if (instanceType !== \"number\" || instance % 1 || instance !== instance) {\n            errors.push({\n                instanceLocation,\n                keyword: \"type\",\n                keywordLocation: `${schemaLocation}/type`,\n                error: `Instance type \"${instanceType}\" is invalid. Expected \"${$type}\".`\n            });\n        }\n    } else if ($type !== undefined && instanceType !== $type) {\n        errors.push({\n            instanceLocation,\n            keyword: \"type\",\n            keywordLocation: `${schemaLocation}/type`,\n            error: `Instance type \"${instanceType}\" is invalid. Expected \"${$type}\".`\n        });\n    }\n    if ($const !== undefined) {\n        if (instanceType === \"object\" || instanceType === \"array\") {\n            if (!(0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(instance, $const)) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"const\",\n                    keywordLocation: `${schemaLocation}/const`,\n                    error: `Instance does not match ${JSON.stringify($const)}.`\n                });\n            }\n        } else if (instance !== $const) {\n            errors.push({\n                instanceLocation,\n                keyword: \"const\",\n                keywordLocation: `${schemaLocation}/const`,\n                error: `Instance does not match ${JSON.stringify($const)}.`\n            });\n        }\n    }\n    if ($enum !== undefined) {\n        if (instanceType === \"object\" || instanceType === \"array\") {\n            if (!$enum.some((value)=>(0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(instance, value))) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"enum\",\n                    keywordLocation: `${schemaLocation}/enum`,\n                    error: `Instance does not match any of ${JSON.stringify($enum)}.`\n                });\n            }\n        } else if (!$enum.some((value)=>instance === value)) {\n            errors.push({\n                instanceLocation,\n                keyword: \"enum\",\n                keywordLocation: `${schemaLocation}/enum`,\n                error: `Instance does not match any of ${JSON.stringify($enum)}.`\n            });\n        }\n    }\n    if ($not !== undefined) {\n        const keywordLocation = `${schemaLocation}/not`;\n        const result = validate(instance, $not, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation /*,\n        evaluated*/ );\n        if (result.valid) {\n            errors.push({\n                instanceLocation,\n                keyword: \"not\",\n                keywordLocation,\n                error: 'Instance matched \"not\" schema.'\n            });\n        }\n    }\n    let subEvaluateds = [];\n    if ($anyOf !== undefined) {\n        const keywordLocation = `${schemaLocation}/anyOf`;\n        const errorsLength = errors.length;\n        let anyValid = false;\n        for(let i = 0; i < $anyOf.length; i++){\n            const subSchema = $anyOf[i];\n            const subEvaluated = Object.create(evaluated);\n            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);\n            errors.push(...result.errors);\n            anyValid = anyValid || result.valid;\n            if (result.valid) {\n                subEvaluateds.push(subEvaluated);\n            }\n        }\n        if (anyValid) {\n            errors.length = errorsLength;\n        } else {\n            errors.splice(errorsLength, 0, {\n                instanceLocation,\n                keyword: \"anyOf\",\n                keywordLocation,\n                error: \"Instance does not match any subschemas.\"\n            });\n        }\n    }\n    if ($allOf !== undefined) {\n        const keywordLocation = `${schemaLocation}/allOf`;\n        const errorsLength = errors.length;\n        let allValid = true;\n        for(let i = 0; i < $allOf.length; i++){\n            const subSchema = $allOf[i];\n            const subEvaluated = Object.create(evaluated);\n            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);\n            errors.push(...result.errors);\n            allValid = allValid && result.valid;\n            if (result.valid) {\n                subEvaluateds.push(subEvaluated);\n            }\n        }\n        if (allValid) {\n            errors.length = errorsLength;\n        } else {\n            errors.splice(errorsLength, 0, {\n                instanceLocation,\n                keyword: \"allOf\",\n                keywordLocation,\n                error: `Instance does not match every subschema.`\n            });\n        }\n    }\n    if ($oneOf !== undefined) {\n        const keywordLocation = `${schemaLocation}/oneOf`;\n        const errorsLength = errors.length;\n        const matches = $oneOf.filter((subSchema, i)=>{\n            const subEvaluated = Object.create(evaluated);\n            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);\n            errors.push(...result.errors);\n            if (result.valid) {\n                subEvaluateds.push(subEvaluated);\n            }\n            return result.valid;\n        }).length;\n        if (matches === 1) {\n            errors.length = errorsLength;\n        } else {\n            errors.splice(errorsLength, 0, {\n                instanceLocation,\n                keyword: \"oneOf\",\n                keywordLocation,\n                error: `Instance does not match exactly one subschema (${matches} matches).`\n            });\n        }\n    }\n    if (instanceType === \"object\" || instanceType === \"array\") {\n        Object.assign(evaluated, ...subEvaluateds);\n    }\n    if ($if !== undefined) {\n        const keywordLocation = `${schemaLocation}/if`;\n        const conditionResult = validate(instance, $if, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation, evaluated).valid;\n        if (conditionResult) {\n            if ($then !== undefined) {\n                const thenResult = validate(instance, $then, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${schemaLocation}/then`, evaluated);\n                if (!thenResult.valid) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"if\",\n                        keywordLocation,\n                        error: `Instance does not match \"then\" schema.`\n                    }, ...thenResult.errors);\n                }\n            }\n        } else if ($else !== undefined) {\n            const elseResult = validate(instance, $else, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${schemaLocation}/else`, evaluated);\n            if (!elseResult.valid) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"if\",\n                    keywordLocation,\n                    error: `Instance does not match \"else\" schema.`\n                }, ...elseResult.errors);\n            }\n        }\n    }\n    if (instanceType === \"object\") {\n        if ($required !== undefined) {\n            for (const key of $required){\n                if (!(key in instance)) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"required\",\n                        keywordLocation: `${schemaLocation}/required`,\n                        error: `Instance does not have required property \"${key}\".`\n                    });\n                }\n            }\n        }\n        const keys = Object.keys(instance);\n        if ($minProperties !== undefined && keys.length < $minProperties) {\n            errors.push({\n                instanceLocation,\n                keyword: \"minProperties\",\n                keywordLocation: `${schemaLocation}/minProperties`,\n                error: `Instance does not have at least ${$minProperties} properties.`\n            });\n        }\n        if ($maxProperties !== undefined && keys.length > $maxProperties) {\n            errors.push({\n                instanceLocation,\n                keyword: \"maxProperties\",\n                keywordLocation: `${schemaLocation}/maxProperties`,\n                error: `Instance does not have at least ${$maxProperties} properties.`\n            });\n        }\n        if ($propertyNames !== undefined) {\n            const keywordLocation = `${schemaLocation}/propertyNames`;\n            for(const key in instance){\n                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                const result = validate(key, $propertyNames, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);\n                if (!result.valid) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"propertyNames\",\n                        keywordLocation,\n                        error: `Property name \"${key}\" does not match schema.`\n                    }, ...result.errors);\n                }\n            }\n        }\n        if ($dependentRequired !== undefined) {\n            const keywordLocation = `${schemaLocation}/dependantRequired`;\n            for(const key in $dependentRequired){\n                if (key in instance) {\n                    const required = $dependentRequired[key];\n                    for (const dependantKey of required){\n                        if (!(dependantKey in instance)) {\n                            errors.push({\n                                instanceLocation,\n                                keyword: \"dependentRequired\",\n                                keywordLocation,\n                                error: `Instance has \"${key}\" but does not have \"${dependantKey}\".`\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if ($dependentSchemas !== undefined) {\n            for(const key in $dependentSchemas){\n                const keywordLocation = `${schemaLocation}/dependentSchemas`;\n                if (key in instance) {\n                    const result = validate(instance, $dependentSchemas[key], draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`, evaluated);\n                    if (!result.valid) {\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"dependentSchemas\",\n                            keywordLocation,\n                            error: `Instance has \"${key}\" but does not match dependant schema.`\n                        }, ...result.errors);\n                    }\n                }\n            }\n        }\n        if ($dependencies !== undefined) {\n            const keywordLocation = `${schemaLocation}/dependencies`;\n            for(const key in $dependencies){\n                if (key in instance) {\n                    const propsOrSchema = $dependencies[key];\n                    if (Array.isArray(propsOrSchema)) {\n                        for (const dependantKey of propsOrSchema){\n                            if (!(dependantKey in instance)) {\n                                errors.push({\n                                    instanceLocation,\n                                    keyword: \"dependencies\",\n                                    keywordLocation,\n                                    error: `Instance has \"${key}\" but does not have \"${dependantKey}\".`\n                                });\n                            }\n                        }\n                    } else {\n                        const result = validate(instance, propsOrSchema, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`);\n                        if (!result.valid) {\n                            errors.push({\n                                instanceLocation,\n                                keyword: \"dependencies\",\n                                keywordLocation,\n                                error: `Instance has \"${key}\" but does not match dependant schema.`\n                            }, ...result.errors);\n                        }\n                    }\n                }\n            }\n        }\n        const thisEvaluated = Object.create(null);\n        let stop = false;\n        if ($properties !== undefined) {\n            const keywordLocation = `${schemaLocation}/properties`;\n            for(const key in $properties){\n                if (!(key in instance)) {\n                    continue;\n                }\n                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                const result = validate(instance[key], $properties[key], draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`);\n                if (result.valid) {\n                    evaluated[key] = thisEvaluated[key] = true;\n                } else {\n                    stop = shortCircuit;\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"properties\",\n                        keywordLocation,\n                        error: `Property \"${key}\" does not match schema.`\n                    }, ...result.errors);\n                    if (stop) break;\n                }\n            }\n        }\n        if (!stop && $patternProperties !== undefined) {\n            const keywordLocation = `${schemaLocation}/patternProperties`;\n            for(const pattern in $patternProperties){\n                const regex = new RegExp(pattern);\n                const subSchema = $patternProperties[pattern];\n                for(const key in instance){\n                    if (!regex.test(key)) {\n                        continue;\n                    }\n                    const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                    const result = validate(instance[key], subSchema, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(pattern)}`);\n                    if (result.valid) {\n                        evaluated[key] = thisEvaluated[key] = true;\n                    } else {\n                        stop = shortCircuit;\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"patternProperties\",\n                            keywordLocation,\n                            error: `Property \"${key}\" matches pattern \"${pattern}\" but does not match associated schema.`\n                        }, ...result.errors);\n                    }\n                }\n            }\n        }\n        if (!stop && $additionalProperties !== undefined) {\n            const keywordLocation = `${schemaLocation}/additionalProperties`;\n            for(const key in instance){\n                if (thisEvaluated[key]) {\n                    continue;\n                }\n                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                const result = validate(instance[key], $additionalProperties, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);\n                if (result.valid) {\n                    evaluated[key] = true;\n                } else {\n                    stop = shortCircuit;\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"additionalProperties\",\n                        keywordLocation,\n                        error: `Property \"${key}\" does not match additional properties schema.`\n                    }, ...result.errors);\n                }\n            }\n        } else if (!stop && $unevaluatedProperties !== undefined) {\n            const keywordLocation = `${schemaLocation}/unevaluatedProperties`;\n            for(const key in instance){\n                if (!evaluated[key]) {\n                    const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                    const result = validate(instance[key], $unevaluatedProperties, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);\n                    if (result.valid) {\n                        evaluated[key] = true;\n                    } else {\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"unevaluatedProperties\",\n                            keywordLocation,\n                            error: `Property \"${key}\" does not match unevaluated properties schema.`\n                        }, ...result.errors);\n                    }\n                }\n            }\n        }\n    } else if (instanceType === \"array\") {\n        if ($maxItems !== undefined && instance.length > $maxItems) {\n            errors.push({\n                instanceLocation,\n                keyword: \"maxItems\",\n                keywordLocation: `${schemaLocation}/maxItems`,\n                error: `Array has too many items (${instance.length} > ${$maxItems}).`\n            });\n        }\n        if ($minItems !== undefined && instance.length < $minItems) {\n            errors.push({\n                instanceLocation,\n                keyword: \"minItems\",\n                keywordLocation: `${schemaLocation}/minItems`,\n                error: `Array has too few items (${instance.length} < ${$minItems}).`\n            });\n        }\n        const length = instance.length;\n        let i = 0;\n        let stop = false;\n        if ($prefixItems !== undefined) {\n            const keywordLocation = `${schemaLocation}/prefixItems`;\n            const length2 = Math.min($prefixItems.length, length);\n            for(; i < length2; i++){\n                const result = validate(instance[i], $prefixItems[i], draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, `${keywordLocation}/${i}`);\n                evaluated[i] = true;\n                if (!result.valid) {\n                    stop = shortCircuit;\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"prefixItems\",\n                        keywordLocation,\n                        error: `Items did not match schema.`\n                    }, ...result.errors);\n                    if (stop) break;\n                }\n            }\n        }\n        if ($items !== undefined) {\n            const keywordLocation = `${schemaLocation}/items`;\n            if (Array.isArray($items)) {\n                const length2 = Math.min($items.length, length);\n                for(; i < length2; i++){\n                    const result = validate(instance[i], $items[i], draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, `${keywordLocation}/${i}`);\n                    evaluated[i] = true;\n                    if (!result.valid) {\n                        stop = shortCircuit;\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"items\",\n                            keywordLocation,\n                            error: `Items did not match schema.`\n                        }, ...result.errors);\n                        if (stop) break;\n                    }\n                }\n            } else {\n                for(; i < length; i++){\n                    const result = validate(instance[i], $items, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);\n                    evaluated[i] = true;\n                    if (!result.valid) {\n                        stop = shortCircuit;\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"items\",\n                            keywordLocation,\n                            error: `Items did not match schema.`\n                        }, ...result.errors);\n                        if (stop) break;\n                    }\n                }\n            }\n            if (!stop && $additionalItems !== undefined) {\n                const keywordLocation = `${schemaLocation}/additionalItems`;\n                for(; i < length; i++){\n                    const result = validate(instance[i], $additionalItems, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);\n                    evaluated[i] = true;\n                    if (!result.valid) {\n                        stop = shortCircuit;\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"additionalItems\",\n                            keywordLocation,\n                            error: `Items did not match additional items schema.`\n                        }, ...result.errors);\n                    }\n                }\n            }\n        }\n        if ($contains !== undefined) {\n            if (length === 0 && $minContains === undefined) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"contains\",\n                    keywordLocation: `${schemaLocation}/contains`,\n                    error: `Array is empty. It must contain at least one item matching the schema.`\n                });\n            } else if ($minContains !== undefined && length < $minContains) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"minContains\",\n                    keywordLocation: `${schemaLocation}/minContains`,\n                    error: `Array has less items (${length}) than minContains (${$minContains}).`\n                });\n            } else {\n                const keywordLocation = `${schemaLocation}/contains`;\n                const errorsLength = errors.length;\n                let contained = 0;\n                for(let j = 0; j < length; j++){\n                    const result = validate(instance[j], $contains, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${j}`, keywordLocation);\n                    if (result.valid) {\n                        evaluated[j] = true;\n                        contained++;\n                    } else {\n                        errors.push(...result.errors);\n                    }\n                }\n                if (contained >= ($minContains || 0)) {\n                    errors.length = errorsLength;\n                }\n                if ($minContains === undefined && $maxContains === undefined && contained === 0) {\n                    errors.splice(errorsLength, 0, {\n                        instanceLocation,\n                        keyword: \"contains\",\n                        keywordLocation,\n                        error: `Array does not contain item matching schema.`\n                    });\n                } else if ($minContains !== undefined && contained < $minContains) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"minContains\",\n                        keywordLocation: `${schemaLocation}/minContains`,\n                        error: `Array must contain at least ${$minContains} items matching schema. Only ${contained} items were found.`\n                    });\n                } else if ($maxContains !== undefined && contained > $maxContains) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"maxContains\",\n                        keywordLocation: `${schemaLocation}/maxContains`,\n                        error: `Array may contain at most ${$maxContains} items matching schema. ${contained} items were found.`\n                    });\n                }\n            }\n        }\n        if (!stop && $unevaluatedItems !== undefined) {\n            const keywordLocation = `${schemaLocation}/unevaluatedItems`;\n            for(i; i < length; i++){\n                if (evaluated[i]) {\n                    continue;\n                }\n                const result = validate(instance[i], $unevaluatedItems, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);\n                evaluated[i] = true;\n                if (!result.valid) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"unevaluatedItems\",\n                        keywordLocation,\n                        error: `Items did not match unevaluated items schema.`\n                    }, ...result.errors);\n                }\n            }\n        }\n        if ($uniqueItems) {\n            for(let j = 0; j < length; j++){\n                const a = instance[j];\n                const ao = typeof a === \"object\" && a !== null;\n                for(let k = 0; k < length; k++){\n                    if (j === k) {\n                        continue;\n                    }\n                    const b = instance[k];\n                    const bo = typeof b === \"object\" && b !== null;\n                    if (a === b || ao && bo && (0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(a, b)) {\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"uniqueItems\",\n                            keywordLocation: `${schemaLocation}/uniqueItems`,\n                            error: `Duplicate items at indexes ${j} and ${k}.`\n                        });\n                        j = Number.MAX_SAFE_INTEGER;\n                        k = Number.MAX_SAFE_INTEGER;\n                    }\n                }\n            }\n        }\n    } else if (instanceType === \"number\") {\n        if (draft === \"4\") {\n            if ($minimum !== undefined && ($exclusiveMinimum === true && instance <= $minimum || instance < $minimum)) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"minimum\",\n                    keywordLocation: `${schemaLocation}/minimum`,\n                    error: `${instance} is less than ${$exclusiveMinimum ? \"or equal to \" : \"\"} ${$minimum}.`\n                });\n            }\n            if ($maximum !== undefined && ($exclusiveMaximum === true && instance >= $maximum || instance > $maximum)) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"maximum\",\n                    keywordLocation: `${schemaLocation}/maximum`,\n                    error: `${instance} is greater than ${$exclusiveMaximum ? \"or equal to \" : \"\"} ${$maximum}.`\n                });\n            }\n        } else {\n            if ($minimum !== undefined && instance < $minimum) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"minimum\",\n                    keywordLocation: `${schemaLocation}/minimum`,\n                    error: `${instance} is less than ${$minimum}.`\n                });\n            }\n            if ($maximum !== undefined && instance > $maximum) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"maximum\",\n                    keywordLocation: `${schemaLocation}/maximum`,\n                    error: `${instance} is greater than ${$maximum}.`\n                });\n            }\n            if ($exclusiveMinimum !== undefined && instance <= $exclusiveMinimum) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"exclusiveMinimum\",\n                    keywordLocation: `${schemaLocation}/exclusiveMinimum`,\n                    error: `${instance} is less than ${$exclusiveMinimum}.`\n                });\n            }\n            if ($exclusiveMaximum !== undefined && instance >= $exclusiveMaximum) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"exclusiveMaximum\",\n                    keywordLocation: `${schemaLocation}/exclusiveMaximum`,\n                    error: `${instance} is greater than or equal to ${$exclusiveMaximum}.`\n                });\n            }\n        }\n        if ($multipleOf !== undefined) {\n            const remainder = instance % $multipleOf;\n            if (Math.abs(0 - remainder) >= 1.1920929e-7 && Math.abs($multipleOf - remainder) >= 1.1920929e-7) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"multipleOf\",\n                    keywordLocation: `${schemaLocation}/multipleOf`,\n                    error: `${instance} is not a multiple of ${$multipleOf}.`\n                });\n            }\n        }\n    } else if (instanceType === \"string\") {\n        const length = $minLength === undefined && $maxLength === undefined ? 0 : (0,_ucs2_length_js__WEBPACK_IMPORTED_MODULE_4__.ucs2length)(instance);\n        if ($minLength !== undefined && length < $minLength) {\n            errors.push({\n                instanceLocation,\n                keyword: \"minLength\",\n                keywordLocation: `${schemaLocation}/minLength`,\n                error: `String is too short (${length} < ${$minLength}).`\n            });\n        }\n        if ($maxLength !== undefined && length > $maxLength) {\n            errors.push({\n                instanceLocation,\n                keyword: \"maxLength\",\n                keywordLocation: `${schemaLocation}/maxLength`,\n                error: `String is too long (${length} > ${$maxLength}).`\n            });\n        }\n        if ($pattern !== undefined && !new RegExp($pattern).test(instance)) {\n            errors.push({\n                instanceLocation,\n                keyword: \"pattern\",\n                keywordLocation: `${schemaLocation}/pattern`,\n                error: `String does not match pattern.`\n            });\n        }\n        if ($format !== undefined && _format_js__WEBPACK_IMPORTED_MODULE_2__.fastFormat[$format] && !_format_js__WEBPACK_IMPORTED_MODULE_2__.fastFormat[$format](instance)) {\n            errors.push({\n                instanceLocation,\n                keyword: \"format\",\n                keywordLocation: `${schemaLocation}/format`,\n                error: `String does not match format \"${$format}\".`\n            });\n        }\n    }\n    return {\n        valid: errors.length === 0,\n        errors\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Validator: () => (/* binding */ Validator)\n/* harmony export */ });\n/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dereference.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js\");\n\n\nclass Validator {\n    constructor(schema, draft = \"2019-09\", shortCircuit = true){\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: schema\n        });\n        Object.defineProperty(this, \"draft\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: draft\n        });\n        Object.defineProperty(this, \"shortCircuit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: shortCircuit\n        });\n        Object.defineProperty(this, \"lookup\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lookup = (0,_dereference_js__WEBPACK_IMPORTED_MODULE_0__.dereference)(schema);\n    }\n    validate(instance) {\n        return (0,_validate_js__WEBPACK_IMPORTED_MODULE_1__.validate)(instance, this.schema, this.draft, this.lookup, this.shortCircuit);\n    }\n    addSchema(schema, id) {\n        if (id) {\n            schema = {\n                ...schema,\n                $id: id\n            };\n        }\n        (0,_dereference_js__WEBPACK_IMPORTED_MODULE_0__.dereference)(schema, this.lookup);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy92YWxpZGF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ047QUFDbEMsTUFBTUU7SUFDVEMsWUFBWUMsTUFBTSxFQUFFQyxRQUFRLFNBQVMsRUFBRUMsZUFBZSxJQUFJLENBQUU7UUFDeERDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBT1I7UUFDWDtRQUNBRyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVM7WUFDakNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU9QO1FBQ1g7UUFDQUUsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU9OO1FBQ1g7UUFDQUMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLE1BQU0sR0FBR2IsNERBQVdBLENBQUNJO0lBQzlCO0lBQ0FILFNBQVNhLFFBQVEsRUFBRTtRQUNmLE9BQU9iLHNEQUFRQSxDQUFDYSxVQUFVLElBQUksQ0FBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ1EsTUFBTSxFQUFFLElBQUksQ0FBQ1AsWUFBWTtJQUNyRjtJQUNBUyxVQUFVWCxNQUFNLEVBQUVZLEVBQUUsRUFBRTtRQUNsQixJQUFJQSxJQUFJO1lBQ0paLFNBQVM7Z0JBQUUsR0FBR0EsTUFBTTtnQkFBRWEsS0FBS0Q7WUFBRztRQUNsQztRQUNBaEIsNERBQVdBLENBQUNJLFFBQVEsSUFBSSxDQUFDUyxNQUFNO0lBQ25DO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvQGNmd29ya2VyL2pzb24tc2NoZW1hL3NyYy92YWxpZGF0b3IuanM/MzRlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXJlZmVyZW5jZSB9IGZyb20gXCIuL2RlcmVmZXJlbmNlLmpzXCI7XG5pbXBvcnQgeyB2YWxpZGF0ZSB9IGZyb20gXCIuL3ZhbGlkYXRlLmpzXCI7XG5leHBvcnQgY2xhc3MgVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEsIGRyYWZ0ID0gXCIyMDE5LTA5XCIsIHNob3J0Q2lyY3VpdCA9IHRydWUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2NoZW1hXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBzY2hlbWFcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRyYWZ0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBkcmFmdFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2hvcnRDaXJjdWl0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBzaG9ydENpcmN1aXRcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxvb2t1cFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxvb2t1cCA9IGRlcmVmZXJlbmNlKHNjaGVtYSk7XG4gICAgfVxuICAgIHZhbGlkYXRlKGluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZShpbnN0YW5jZSwgdGhpcy5zY2hlbWEsIHRoaXMuZHJhZnQsIHRoaXMubG9va3VwLCB0aGlzLnNob3J0Q2lyY3VpdCk7XG4gICAgfVxuICAgIGFkZFNjaGVtYShzY2hlbWEsIGlkKSB7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgc2NoZW1hID0geyAuLi5zY2hlbWEsICRpZDogaWQgfTtcbiAgICAgICAgfVxuICAgICAgICBkZXJlZmVyZW5jZShzY2hlbWEsIHRoaXMubG9va3VwKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiZGVyZWZlcmVuY2UiLCJ2YWxpZGF0ZSIsIlZhbGlkYXRvciIsImNvbnN0cnVjdG9yIiwic2NoZW1hIiwiZHJhZnQiLCJzaG9ydENpcmN1aXQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwibG9va3VwIiwiaW5zdGFuY2UiLCJhZGRTY2hlbWEiLCJpZCIsIiRpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/async_caller.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* binding */ AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\n\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    409\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error)=>{\n    if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */ class AsyncCaller {\n    constructor(params){\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt = params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_1__;\n        this.queue = new PQueue({\n            concurrency: this.maxConcurrency\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(()=>p_retry__WEBPACK_IMPORTED_MODULE_0__(()=>callable(...args).catch((error)=>{\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (error instanceof Error) {\n                        throw error;\n                    } else {\n                        throw new Error(error);\n                    }\n                }), {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: this.maxRetries,\n                randomize: true\n            }), {\n            throwOnTimeout: true\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject)=>{\n                    options.signal?.addEventListener(\"abort\", ()=>{\n                        reject(new Error(\"AbortError\"));\n                    });\n                })\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(()=>fetch(...args).then((res)=>res.ok ? res : Promise.reject(res)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/chunk_array.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* binding */ chunkArray)\n/* harmony export */ });\nconst chunkArray = (arr, chunkSize)=>arr.reduce((chunks, elem, index)=>{\n        const chunkIndex = Math.floor(index / chunkSize);\n        const chunk = chunks[chunkIndex] || [];\n        // eslint-disable-next-line no-param-reassign\n        chunks[chunkIndex] = chunk.concat([\n            elem\n        ]);\n        return chunks;\n    }, []);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvY2h1bmtfYXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGFBQWEsQ0FBQ0MsS0FBS0MsWUFBY0QsSUFBSUUsTUFBTSxDQUFDLENBQUNDLFFBQVFDLE1BQU1DO1FBQ3BFLE1BQU1DLGFBQWFDLEtBQUtDLEtBQUssQ0FBQ0gsUUFBUUo7UUFDdEMsTUFBTVEsUUFBUU4sTUFBTSxDQUFDRyxXQUFXLElBQUksRUFBRTtRQUN0Qyw2Q0FBNkM7UUFDN0NILE1BQU0sQ0FBQ0csV0FBVyxHQUFHRyxNQUFNQyxNQUFNLENBQUM7WUFBQ047U0FBSztRQUN4QyxPQUFPRDtJQUNYLEdBQUcsRUFBRSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2NodW5rX2FycmF5LmpzP2MwOGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNodW5rQXJyYXkgPSAoYXJyLCBjaHVua1NpemUpID0+IGFyci5yZWR1Y2UoKGNodW5rcywgZWxlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBjaHVua0luZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIGNodW5rU2l6ZSk7XG4gICAgY29uc3QgY2h1bmsgPSBjaHVua3NbY2h1bmtJbmRleF0gfHwgW107XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgY2h1bmtzW2NodW5rSW5kZXhdID0gY2h1bmsuY29uY2F0KFtlbGVtXSk7XG4gICAgcmV0dXJuIGNodW5rcztcbn0sIFtdKTtcbiJdLCJuYW1lcyI6WyJjaHVua0FycmF5IiwiYXJyIiwiY2h1bmtTaXplIiwicmVkdWNlIiwiY2h1bmtzIiwiZWxlbSIsImluZGV4IiwiY2h1bmtJbmRleCIsIk1hdGgiLCJmbG9vciIsImNodW5rIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/env.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/env.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* binding */ getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* binding */ getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isJsDom: () => (/* binding */ isJsDom),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\nconst isBrowser = ()=> false && 0;\nconst isWebWorker = ()=>typeof globalThis === \"object\" && globalThis.constructor && globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nconst isJsDom = ()=> false || typeof navigator !== \"undefined\" && (navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nconst isDeno = ()=>typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nconst isNode = ()=>typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\" && !isDeno();\nconst getEnv = ()=>{\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    } else if (isNode()) {\n        env = \"node\";\n    } else if (isWebWorker()) {\n        env = \"webworker\";\n    } else if (isJsDom()) {\n        env = \"jsdom\";\n    } else if (isDeno()) {\n        env = \"deno\";\n    } else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\nasync function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env\n        };\n    }\n    return runtimeEnvironment;\n}\nfunction getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\" ? process.env?.[name] : undefined;\n    } catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZW52LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQU8sTUFBTUEsWUFBWSxJQUFNLE1BQTZCLElBQUksQ0FBc0MsQ0FBQztBQUNoRyxNQUFNRyxjQUFjLElBQU0sT0FBT0MsZUFBZSxZQUNuREEsV0FBV0MsV0FBVyxJQUN0QkQsV0FBV0MsV0FBVyxDQUFDQyxJQUFJLEtBQUssNkJBQTZCO0FBQzFELE1BQU1DLFVBQVUsSUFBTSxNQUEwRCxJQUNsRixPQUFPQyxjQUFjLGVBQ2pCQSxDQUFBQSxVQUFVQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxjQUMxQkYsVUFBVUMsU0FBUyxDQUFDQyxRQUFRLENBQUMsUUFBTyxFQUFJO0FBQ3BELHlEQUF5RDtBQUN6RCw2QkFBNkI7QUFDdEIsTUFBTUMsU0FBUyxJQUFNLE9BQU9DLFNBQVMsWUFBWTtBQUN4RCxnREFBZ0Q7QUFDekMsTUFBTUMsU0FBUyxJQUFNLE9BQU9DLFlBQVksZUFDM0MsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLLGVBQ2pDLENBQUNMLFNBQVM7QUFDUCxNQUFNTSxTQUFTO0lBQ2xCLElBQUlDO0lBQ0osSUFBSWxCLGFBQWE7UUFDYmtCLE1BQU07SUFDVixPQUNLLElBQUlMLFVBQVU7UUFDZkssTUFBTTtJQUNWLE9BQ0ssSUFBSWYsZUFBZTtRQUNwQmUsTUFBTTtJQUNWLE9BQ0ssSUFBSVgsV0FBVztRQUNoQlcsTUFBTTtJQUNWLE9BQ0ssSUFBSVAsVUFBVTtRQUNmTyxNQUFNO0lBQ1YsT0FDSztRQUNEQSxNQUFNO0lBQ1Y7SUFDQSxPQUFPQTtBQUNYLEVBQUU7QUFDRixJQUFJQztBQUNHLGVBQWVDO0lBQ2xCLElBQUlELHVCQUF1QkUsV0FBVztRQUNsQyxNQUFNSCxNQUFNRDtRQUNaRSxxQkFBcUI7WUFDakJHLFNBQVM7WUFDVEMsU0FBU0w7UUFDYjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNPLFNBQVNLLHVCQUF1QmxCLElBQUk7SUFDdkMscUZBQXFGO0lBQ3JGLDBEQUEwRDtJQUMxRCxJQUFJO1FBQ0EsT0FBTyxPQUFPUSxZQUFZLGNBRWxCQSxRQUFRSSxHQUFHLEVBQUUsQ0FBQ1osS0FBSyxHQUNyQmU7SUFDVixFQUNBLE9BQU9JLEdBQUc7UUFDTixPQUFPSjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZW52LmpzPzQyZmQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmV4cG9ydCBjb25zdCBpc1dlYldvcmtlciA9ICgpID0+IHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiICYmXG4gICAgZ2xvYmFsVGhpcy5jb25zdHJ1Y3RvciAmJlxuICAgIGdsb2JhbFRoaXMuY29uc3RydWN0b3IubmFtZSA9PT0gXCJEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZVwiO1xuZXhwb3J0IGNvbnN0IGlzSnNEb20gPSAoKSA9PiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubmFtZSA9PT0gXCJub2RlanNcIikgfHxcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcIk5vZGUuanNcIikgfHxcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJqc2RvbVwiKSkpO1xuLy8gU3VwYWJhc2UgRWRnZSBGdW5jdGlvbiBwcm92aWRlcyBhIGBEZW5vYCBnbG9iYWwgb2JqZWN0XG4vLyB3aXRob3V0IGB2ZXJzaW9uYCBwcm9wZXJ0eVxuZXhwb3J0IGNvbnN0IGlzRGVubyA9ICgpID0+IHR5cGVvZiBEZW5vICE9PSBcInVuZGVmaW5lZFwiO1xuLy8gTWFyayBub3QtYXMtbm9kZSBpZiBpbiBTdXBhYmFzZSBFZGdlIEZ1bmN0aW9uXG5leHBvcnQgY29uc3QgaXNOb2RlID0gKCkgPT4gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAhaXNEZW5vKCk7XG5leHBvcnQgY29uc3QgZ2V0RW52ID0gKCkgPT4ge1xuICAgIGxldCBlbnY7XG4gICAgaWYgKGlzQnJvd3NlcigpKSB7XG4gICAgICAgIGVudiA9IFwiYnJvd3NlclwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05vZGUoKSkge1xuICAgICAgICBlbnYgPSBcIm5vZGVcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNXZWJXb3JrZXIoKSkge1xuICAgICAgICBlbnYgPSBcIndlYndvcmtlclwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0pzRG9tKCkpIHtcbiAgICAgICAgZW52ID0gXCJqc2RvbVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Rlbm8oKSkge1xuICAgICAgICBlbnYgPSBcImRlbm9cIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVudiA9IFwib3RoZXJcIjtcbiAgICB9XG4gICAgcmV0dXJuIGVudjtcbn07XG5sZXQgcnVudGltZUVudmlyb25tZW50O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJ1bnRpbWVFbnZpcm9ubWVudCgpIHtcbiAgICBpZiAocnVudGltZUVudmlyb25tZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZW52ID0gZ2V0RW52KCk7XG4gICAgICAgIHJ1bnRpbWVFbnZpcm9ubWVudCA9IHtcbiAgICAgICAgICAgIGxpYnJhcnk6IFwibGFuZ2NoYWluLWpzXCIsXG4gICAgICAgICAgICBydW50aW1lOiBlbnYsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBydW50aW1lRW52aXJvbm1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShuYW1lKSB7XG4gICAgLy8gQ2VydGFpbiBEZW5vIHNldHVwcyB3aWxsIHRocm93IGFuIGVycm9yIGlmIHlvdSB0cnkgdG8gYWNjZXNzIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluanMvaXNzdWVzLzE0MTJcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZW52XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnY/LltuYW1lXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImlzQnJvd3NlciIsIndpbmRvdyIsImRvY3VtZW50IiwiaXNXZWJXb3JrZXIiLCJnbG9iYWxUaGlzIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaXNKc0RvbSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluY2x1ZGVzIiwiaXNEZW5vIiwiRGVubyIsImlzTm9kZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJnZXRFbnYiLCJlbnYiLCJydW50aW1lRW52aXJvbm1lbnQiLCJnZXRSdW50aW1lRW52aXJvbm1lbnQiLCJ1bmRlZmluZWQiLCJsaWJyYXJ5IiwicnVudGltZSIsImdldEVudmlyb25tZW50VmFyaWFibGUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError),\n/* harmony export */   _areEquals: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__._areEquals),\n/* harmony export */   applyOperation: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyOperation),\n/* harmony export */   applyPatch: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   applyReducer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyReducer),\n/* harmony export */   compare: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.compare),\n/* harmony export */   deepClone: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   escapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent),\n/* harmony export */   generate: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.generate),\n/* harmony export */   getValueByPointer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.getValueByPointer),\n/* harmony export */   observe: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.observe),\n/* harmony export */   unescapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent),\n/* harmony export */   unobserve: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.unobserve),\n/* harmony export */   validate: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validate),\n/* harmony export */   validator: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validator)\n/* harmony export */ });\n/* harmony import */ var _src_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/core.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n/* harmony import */ var _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/duplex.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\");\n/* harmony import */ var _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n\n\n\n/**\n * Default export for backwards compat\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    ..._src_core_js__WEBPACK_IMPORTED_MODULE_0__,\n    // ...duplex,\n    JsonPatchError: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError,\n    deepClone: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone,\n    escapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent,\n    unescapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFDRTtBQUNzRztBQUN0STs7Q0FFQyxHQUNxQztBQUNnRztBQUN0SSxpRUFBZTtJQUNYLEdBQUdNLHlDQUFJO0lBQ1AsYUFBYTtJQUNiTCxjQUFjQSx5REFBQUE7SUFDZEUsU0FBU0EseURBQUFBO0lBQ1RDLG1CQUFtQkEsa0VBQUFBO0lBQ25CQyxxQkFBcUJBLG9FQUFBQTtBQUN6QixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzPzRjOTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vc3JjL2NvcmUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NyYy9kdXBsZXguanNcIjtcbmV4cG9ydCB7IFBhdGNoRXJyb3IgYXMgSnNvblBhdGNoRXJyb3IsIF9kZWVwQ2xvbmUgYXMgZGVlcENsb25lLCBlc2NhcGVQYXRoQ29tcG9uZW50LCB1bmVzY2FwZVBhdGhDb21wb25lbnQsIH0gZnJvbSBcIi4vc3JjL2hlbHBlcnMuanNcIjtcbi8qKlxuICogRGVmYXVsdCBleHBvcnQgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuaW1wb3J0ICogYXMgY29yZSBmcm9tIFwiLi9zcmMvY29yZS5qc1wiO1xuaW1wb3J0IHsgUGF0Y2hFcnJvciBhcyBKc29uUGF0Y2hFcnJvciwgX2RlZXBDbG9uZSBhcyBkZWVwQ2xvbmUsIGVzY2FwZVBhdGhDb21wb25lbnQsIHVuZXNjYXBlUGF0aENvbXBvbmVudCwgfSBmcm9tIFwiLi9zcmMvaGVscGVycy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQge1xuICAgIC4uLmNvcmUsXG4gICAgLy8gLi4uZHVwbGV4LFxuICAgIEpzb25QYXRjaEVycm9yLFxuICAgIGRlZXBDbG9uZSxcbiAgICBlc2NhcGVQYXRoQ29tcG9uZW50LFxuICAgIHVuZXNjYXBlUGF0aENvbXBvbmVudCxcbn07XG4iXSwibmFtZXMiOlsiUGF0Y2hFcnJvciIsIkpzb25QYXRjaEVycm9yIiwiX2RlZXBDbG9uZSIsImRlZXBDbG9uZSIsImVzY2FwZVBhdGhDb21wb25lbnQiLCJ1bmVzY2FwZVBhdGhDb21wb25lbnQiLCJjb3JlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* binding */ JsonPatchError),\n/* harmony export */   _areEquals: () => (/* binding */ _areEquals),\n/* harmony export */   applyOperation: () => (/* binding */ applyOperation),\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   applyReducer: () => (/* binding */ applyReducer),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   getValueByPointer: () => (/* binding */ getValueByPointer),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validator: () => (/* binding */ validator)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n// @ts-nocheck\n\nconst JsonPatchError = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.PatchError;\nconst deepClone = _helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */ /* The operations applicable to an object */ const objOps = {\n    add: function(obj, key, document) {\n        obj[key] = this.value;\n        return {\n            newDocument: document\n        };\n    },\n    remove: function(obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    replace: function(obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: function(obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */ let removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(removed);\n        }\n        const originalValue = applyOperation(document, {\n            op: \"remove\",\n            path: this.from\n        }).removed;\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: originalValue\n        });\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    copy: function(obj, key, document) {\n        const valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(valueToCopy)\n        });\n        return {\n            newDocument: document\n        };\n    },\n    test: function(obj, key, document) {\n        return {\n            newDocument: document,\n            test: _areEquals(obj[key], this.value)\n        };\n    },\n    _get: function(obj, key, document) {\n        this.value = obj[key];\n        return {\n            newDocument: document\n        };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */ var arrOps = {\n    add: function(arr, i, document) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(i)) {\n            arr.splice(i, 0, this.value);\n        } else {\n            // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return {\n            newDocument: document,\n            index: i\n        };\n    },\n    remove: function(arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return {\n            newDocument: document,\n            removed: removedList[0]\n        };\n    },\n    replace: function(arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */ function getValueByPointer(document, pointer) {\n    if (pointer == \"\") {\n        return document;\n    }\n    var getOriginalDestination = {\n        op: \"_get\",\n        path: pointer\n    };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */ function applyOperation(document, operation, validateOperation = false, mutateDocument = true, banPrototypeModifications = true, index = 0) {\n    if (validateOperation) {\n        if (typeof validateOperation == \"function\") {\n            validateOperation(operation, 0, document, operation.path);\n        } else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */ if (operation.path === \"\") {\n        let returnValue = {\n            newDocument: document\n        };\n        if (operation.op === \"add\") {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        } else if (operation.op === \"replace\") {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === \"move\") {\n                // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        } else if (operation.op === \"test\") {\n            returnValue.test = _areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        } else if (operation.op === \"remove\") {\n            // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        } else if (operation.op === \"_get\") {\n            operation.value = document;\n            return returnValue;\n        } else {\n            /* bad operation */ if (validateOperation) {\n                throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n            } else {\n                return returnValue;\n            }\n        }\n    } else {\n        if (!mutateDocument) {\n            document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n        }\n        const path = operation.path || \"\";\n        const keys = path.split(\"/\");\n        let obj = document;\n        let t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        let len = keys.length;\n        let existingPathFragment = undefined;\n        let key;\n        let validateFunction;\n        if (typeof validateOperation == \"function\") {\n            validateFunction = validateOperation;\n        } else {\n            validateFunction = validator;\n        }\n        while(true){\n            key = keys[t];\n            if (key && key.indexOf(\"~\") != -1) {\n                key = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.unescapePathComponent)(key);\n            }\n            if (banPrototypeModifications && (key == \"__proto__\" || key == \"prototype\" && t > 0 && keys[t - 1] == \"constructor\")) {\n                throw new TypeError(\"JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README\");\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join(\"/\");\n                    } else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === \"-\") {\n                    key = obj.length;\n                } else {\n                    if (validateOperation && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        throw new JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    const returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            } else {\n                if (t >= len) {\n                    const returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n            // If we have more keys in the path, but the next value isn't a non-null object,\n            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.\n            if (validateOperation && t < len && (!obj || typeof obj !== \"object\")) {\n                throw new JsonPatchError(\"Cannot perform operation at the desired path\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */ function applyPatch(document, patch, validateOperation, mutateDocument = true, banPrototypeModifications = true) {\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n    }\n    if (!mutateDocument) {\n        document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n    }\n    const results = new Array(patch.length);\n    for(let i = 0, length = patch.length; i < length; i++){\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */ function applyReducer(document, operation, index) {\n    const operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) {\n        // failed test\n        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n    }\n    return operationResult.newDocument;\n}\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */ function validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== \"object\" || operation === null || Array.isArray(operation)) {\n        throw new JsonPatchError(\"Operation is not an object\", \"OPERATION_NOT_AN_OBJECT\", index, operation, document);\n    } else if (!objOps[operation.op]) {\n        throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n    } else if (typeof operation.path !== \"string\") {\n        throw new JsonPatchError(\"Operation `path` property is not a string\", \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if (operation.path.indexOf(\"/\") !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new JsonPatchError('Operation `path` property must start with \"/\"', \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if ((operation.op === \"move\" || operation.op === \"copy\") && typeof operation.from !== \"string\") {\n        throw new JsonPatchError(\"Operation `from` property is not present (applicable in `move` and `copy` operations)\", \"OPERATION_FROM_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && operation.value === undefined) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasUndefined)(operation.value)) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED\", index, operation, document);\n    } else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new JsonPatchError(\"Cannot perform an `add` operation at the desired path\", \"OPERATION_PATH_CANNOT_ADD\", index, operation, document);\n            }\n        } else if (operation.op === \"replace\" || operation.op === \"remove\" || operation.op === \"_get\") {\n            if (operation.path !== existingPathFragment) {\n                throw new JsonPatchError(\"Cannot perform the operation at a path that does not exist\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            var existingValue = {\n                op: \"_get\",\n                path: operation.from,\n                value: undefined\n            };\n            var error = validate([\n                existingValue\n            ], document);\n            if (error && error.name === \"OPERATION_PATH_UNRESOLVABLE\") {\n                throw new JsonPatchError(\"Cannot perform the operation from a path that does not exist\", \"OPERATION_FROM_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */ function validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document), (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(sequence), externalValidator || true);\n        } else {\n            externalValidator = externalValidator || validator;\n            for(var i = 0; i < sequence.length; i++){\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    } catch (e) {\n        if (e instanceof JsonPatchError) {\n            return e;\n        } else {\n            throw e;\n        }\n    }\n}\n// based on https://github.com/epoberezkin/fast-deep-equal\n// MIT License\n// Copyright (c) 2017 Evgeny Poberezkin\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nfunction _areEquals(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;\n        if (arrA && arrB) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!_areEquals(a[i], b[i])) return false;\n            return true;\n        }\n        if (arrA != arrB) return false;\n        var keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!b.hasOwnProperty(keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            key = keys[i];\n            if (!_areEquals(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   generate: () => (/* binding */ generate),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   unobserve: () => (/* binding */ unobserve)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2013-2021 Joachim Wester\n * MIT license\n */ \n\nvar beforeDict = new WeakMap();\nclass Mirror {\n    constructor(obj){\n        Object.defineProperty(this, \"obj\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.obj = obj;\n    }\n}\nclass ObserverInfo {\n    constructor(callback, observer){\n        Object.defineProperty(this, \"callback\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callback = callback;\n        this.observer = observer;\n    }\n}\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */ function unobserve(root, observer) {\n    observer.unobserve();\n}\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */ function observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    } else {\n        const observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = ()=>{\n            generate(observer);\n        };\n        var fastCheck = ()=>{\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (false) {}\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = ()=>{\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (false) {}\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\n/**\n * Generate an array of patches from an observer\n */ function generate(observer, invertible = false) {\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.applyPatch)(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(obj);\n    var oldKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for(var t = oldKeys.length - 1; t >= 0; t--){\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {\n                _generate(oldVal, newVal, patches, path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key), invertible);\n            } else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({\n                            op: \"test\",\n                            path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                        });\n                    }\n                    patches.push({\n                        op: \"replace\",\n                        path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                        value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(newVal)\n                    });\n                }\n            }\n        } else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                    value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                });\n            }\n            patches.push({\n                op: \"remove\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key)\n            });\n            deleted = true; // property has been deleted\n        } else {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path,\n                    value: mirror\n                });\n            }\n            patches.push({\n                op: \"replace\",\n                path,\n                value: obj\n            });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for(var t = 0; t < newKeys.length; t++){\n        var key = newKeys[t];\n        if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(mirror, key) && obj[key] !== undefined) {\n            patches.push({\n                op: \"add\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj[key])\n            });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */ function compare(tree1, tree2, invertible = false) {\n    var patches = [];\n    _generate(tree1, tree2, patches, \"\", invertible);\n    return patches;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PatchError: () => (/* binding */ PatchError),\n/* harmony export */   _deepClone: () => (/* binding */ _deepClone),\n/* harmony export */   _getPathRecursive: () => (/* binding */ _getPathRecursive),\n/* harmony export */   _objectKeys: () => (/* binding */ _objectKeys),\n/* harmony export */   escapePathComponent: () => (/* binding */ escapePathComponent),\n/* harmony export */   getPath: () => (/* binding */ getPath),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   hasUndefined: () => (/* binding */ hasUndefined),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   unescapePathComponent: () => (/* binding */ unescapePathComponent)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2022 Joachim Wester\n * MIT licensed\n */ const _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        const keys = new Array(obj.length);\n        for(let k = 0; k < keys.length; k++){\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    let keys = [];\n    for(let i in obj){\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n/**\n * Deeply clone the object.\n * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n * @param  {any} obj value to clone\n * @return {any} cloned obj\n */ function _deepClone(obj) {\n    switch(typeof obj){\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    let i = 0;\n    const len = str.length;\n    let charCode;\n    while(i < len){\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\n/**\n * Escapes a json pointer path\n * @param path The raw pointer\n * @return the Escaped path\n */ function escapePathComponent(path) {\n    if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1) return path;\n    return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */ function unescapePathComponent(path) {\n    return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nfunction _getPathRecursive(root, obj) {\n    let found;\n    for(let key in root){\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + \"/\";\n            } else if (typeof root[key] === \"object\") {\n                found = _getPathRecursive(root[key], obj);\n                if (found != \"\") {\n                    return escapePathComponent(key) + \"/\" + found;\n                }\n            }\n        }\n    }\n    return \"\";\n}\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return \"/\";\n    }\n    const path = _getPathRecursive(root, obj);\n    if (path === \"\") {\n        throw new Error(\"Object not found in root\");\n    }\n    return `/${path}`;\n}\n/**\n * Recursively checks whether an object has any undefined values inside.\n */ function hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for(let i = 0, len = obj.length; i < len; i++){\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        } else if (typeof obj === \"object\") {\n            const objKeys = _objectKeys(obj);\n            const objKeysLength = objKeys.length;\n            for(var i = 0; i < objKeysLength; i++){\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction patchErrorMessageFormatter(message, args) {\n    const messageParts = [\n        message\n    ];\n    for(const key in args){\n        const value = typeof args[key] === \"object\" ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== \"undefined\") {\n            messageParts.push(`${key}: ${value}`);\n        }\n    }\n    return messageParts.join(\"\\n\");\n}\nclass PatchError extends Error {\n    constructor(message, name, index, operation, tree){\n        super(patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        }));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: name\n        });\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: index\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: operation\n        });\n        Object.defineProperty(this, \"tree\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tree\n        });\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        this.message = patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/function_calling.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToOpenAIFunction: () => (/* binding */ convertToOpenAIFunction),\n/* harmony export */   convertToOpenAITool: () => (/* binding */ convertToOpenAITool)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n\n/**\n * Formats a `StructuredTool` instance into a format that is compatible\n * with OpenAI function calling. It uses the `zodToJsonSchema`\n * function to convert the schema of the `StructuredTool` into a JSON\n * schema, which is then used as the parameters for the OpenAI function.\n */ function convertToOpenAIFunction(tool) {\n    return {\n        name: tool.name,\n        description: tool.description,\n        parameters: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(tool.schema)\n    };\n}\n/**\n * Formats a `StructuredTool` instance into a format that is compatible\n * with OpenAI tool calling. It uses the `zodToJsonSchema`\n * function to convert the schema of the `StructuredTool` into a JSON\n * schema, which is then used as the parameters for the OpenAI tool.\n */ function convertToOpenAITool(tool) {\n    return {\n        type: \"function\",\n        function: convertToOpenAIFunction(tool)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZnVuY3Rpb25fY2FsbGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFDckQ7Ozs7O0NBS0MsR0FDTSxTQUFTQyx3QkFBd0JDLElBQUk7SUFDeEMsT0FBTztRQUNIQyxNQUFNRCxLQUFLQyxJQUFJO1FBQ2ZDLGFBQWFGLEtBQUtFLFdBQVc7UUFDN0JDLFlBQVlMLG1FQUFlQSxDQUFDRSxLQUFLSSxNQUFNO0lBQzNDO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLG9CQUFvQkwsSUFBSTtJQUNwQyxPQUFPO1FBQ0hNLE1BQU07UUFDTkMsVUFBVVIsd0JBQXdCQztJQUN0QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmcuanM/OTQ0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6b2RUb0pzb25TY2hlbWEgfSBmcm9tIFwiem9kLXRvLWpzb24tc2NoZW1hXCI7XG4vKipcbiAqIEZvcm1hdHMgYSBgU3RydWN0dXJlZFRvb2xgIGluc3RhbmNlIGludG8gYSBmb3JtYXQgdGhhdCBpcyBjb21wYXRpYmxlXG4gKiB3aXRoIE9wZW5BSSBmdW5jdGlvbiBjYWxsaW5nLiBJdCB1c2VzIHRoZSBgem9kVG9Kc29uU2NoZW1hYFxuICogZnVuY3Rpb24gdG8gY29udmVydCB0aGUgc2NoZW1hIG9mIHRoZSBgU3RydWN0dXJlZFRvb2xgIGludG8gYSBKU09OXG4gKiBzY2hlbWEsIHdoaWNoIGlzIHRoZW4gdXNlZCBhcyB0aGUgcGFyYW1ldGVycyBmb3IgdGhlIE9wZW5BSSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uKHRvb2wpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0b29sLmRlc2NyaXB0aW9uLFxuICAgICAgICBwYXJhbWV0ZXJzOiB6b2RUb0pzb25TY2hlbWEodG9vbC5zY2hlbWEpLFxuICAgIH07XG59XG4vKipcbiAqIEZvcm1hdHMgYSBgU3RydWN0dXJlZFRvb2xgIGluc3RhbmNlIGludG8gYSBmb3JtYXQgdGhhdCBpcyBjb21wYXRpYmxlXG4gKiB3aXRoIE9wZW5BSSB0b29sIGNhbGxpbmcuIEl0IHVzZXMgdGhlIGB6b2RUb0pzb25TY2hlbWFgXG4gKiBmdW5jdGlvbiB0byBjb252ZXJ0IHRoZSBzY2hlbWEgb2YgdGhlIGBTdHJ1Y3R1cmVkVG9vbGAgaW50byBhIEpTT05cbiAqIHNjaGVtYSwgd2hpY2ggaXMgdGhlbiB1c2VkIGFzIHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgT3BlbkFJIHRvb2wuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9PcGVuQUlUb29sKHRvb2wpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgIGZ1bmN0aW9uOiBjb252ZXJ0VG9PcGVuQUlGdW5jdGlvbih0b29sKSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbInpvZFRvSnNvblNjaGVtYSIsImNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uIiwidG9vbCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInBhcmFtZXRlcnMiLCJzY2hlbWEiLCJjb252ZXJ0VG9PcGVuQUlUb29sIiwidHlwZSIsImZ1bmN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/hash.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/hash.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* reexport safe */ _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)\n/* harmony export */ });\n/* harmony import */ var _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-sha1/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvaGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9oYXNoLmpzPzRiNGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgaW5zZWN1cmVIYXNoIH0gZnJvbSBcIi4vanMtc2hhMS9oYXNoLmpzXCI7XG4iXSwibmFtZXMiOlsiaW5zZWN1cmVIYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/js-sha1/hash.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* binding */ insecureHash)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */ /*jslint bitwise: true */ \nvar root =  false ? 0 : {};\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [\n    -2147483648,\n    8388608,\n    32768,\n    128\n];\nvar SHIFT = [\n    24,\n    16,\n    8,\n    0\n];\nvar OUTPUT_TYPES = [\n    \"hex\",\n    \"array\",\n    \"digest\",\n    \"arrayBuffer\"\n];\nvar blocks = [];\nfunction Sha1(sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        this.blocks = blocks;\n    } else {\n        this.blocks = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    this.h0 = 0x67452301;\n    this.h1 = 0xefcdab89;\n    this.h2 = 0x98badcfe;\n    this.h3 = 0x10325476;\n    this.h4 = 0xc3d2e1f0;\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n}\nSha1.prototype.update = function(message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString = typeof message !== \"string\";\n    if (notString && message.constructor === root.ArrayBuffer) {\n        message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n    while(index < length){\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        if (notString) {\n            for(i = this.start; index < length && i < 64; ++index){\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for(i = this.start; index < length && i < 64; ++index){\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        } else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += this.bytes / 4294967296 << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha1.prototype.finalize = function() {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha1.prototype.hash = function() {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n    for(j = 16; j < 80; ++j){\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n        blocks[j] = t << 1 | t >>> 31;\n    }\n    for(j = 0; j < 20; j += 5){\n        f = b & c | ~b & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1518500249 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | ~a & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1518500249 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | ~e & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1518500249 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | ~d & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1518500249 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | ~c & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1518500249 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 40; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1859775393 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1859775393 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1859775393 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1859775393 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1859775393 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 60; j += 5){\n        f = b & c | b & d | c & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 1894007588 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | a & c | b & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 1894007588 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | e & b | a & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 1894007588 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | d & a | e & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 1894007588 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | c & e | d & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 1894007588 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 80; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 899497514 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 899497514 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 899497514 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 899497514 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 899497514 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n};\nSha1.prototype.hex = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return HEX_CHARS[h0 >> 28 & 0x0f] + HEX_CHARS[h0 >> 24 & 0x0f] + HEX_CHARS[h0 >> 20 & 0x0f] + HEX_CHARS[h0 >> 16 & 0x0f] + HEX_CHARS[h0 >> 12 & 0x0f] + HEX_CHARS[h0 >> 8 & 0x0f] + HEX_CHARS[h0 >> 4 & 0x0f] + HEX_CHARS[h0 & 0x0f] + HEX_CHARS[h1 >> 28 & 0x0f] + HEX_CHARS[h1 >> 24 & 0x0f] + HEX_CHARS[h1 >> 20 & 0x0f] + HEX_CHARS[h1 >> 16 & 0x0f] + HEX_CHARS[h1 >> 12 & 0x0f] + HEX_CHARS[h1 >> 8 & 0x0f] + HEX_CHARS[h1 >> 4 & 0x0f] + HEX_CHARS[h1 & 0x0f] + HEX_CHARS[h2 >> 28 & 0x0f] + HEX_CHARS[h2 >> 24 & 0x0f] + HEX_CHARS[h2 >> 20 & 0x0f] + HEX_CHARS[h2 >> 16 & 0x0f] + HEX_CHARS[h2 >> 12 & 0x0f] + HEX_CHARS[h2 >> 8 & 0x0f] + HEX_CHARS[h2 >> 4 & 0x0f] + HEX_CHARS[h2 & 0x0f] + HEX_CHARS[h3 >> 28 & 0x0f] + HEX_CHARS[h3 >> 24 & 0x0f] + HEX_CHARS[h3 >> 20 & 0x0f] + HEX_CHARS[h3 >> 16 & 0x0f] + HEX_CHARS[h3 >> 12 & 0x0f] + HEX_CHARS[h3 >> 8 & 0x0f] + HEX_CHARS[h3 >> 4 & 0x0f] + HEX_CHARS[h3 & 0x0f] + HEX_CHARS[h4 >> 28 & 0x0f] + HEX_CHARS[h4 >> 24 & 0x0f] + HEX_CHARS[h4 >> 20 & 0x0f] + HEX_CHARS[h4 >> 16 & 0x0f] + HEX_CHARS[h4 >> 12 & 0x0f] + HEX_CHARS[h4 >> 8 & 0x0f] + HEX_CHARS[h4 >> 4 & 0x0f] + HEX_CHARS[h4 & 0x0f];\n};\nSha1.prototype.toString = Sha1.prototype.hex;\nSha1.prototype.digest = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return [\n        h0 >> 24 & 0xff,\n        h0 >> 16 & 0xff,\n        h0 >> 8 & 0xff,\n        h0 & 0xff,\n        h1 >> 24 & 0xff,\n        h1 >> 16 & 0xff,\n        h1 >> 8 & 0xff,\n        h1 & 0xff,\n        h2 >> 24 & 0xff,\n        h2 >> 16 & 0xff,\n        h2 >> 8 & 0xff,\n        h2 & 0xff,\n        h3 >> 24 & 0xff,\n        h3 >> 16 & 0xff,\n        h3 >> 8 & 0xff,\n        h3 & 0xff,\n        h4 >> 24 & 0xff,\n        h4 >> 16 & 0xff,\n        h4 >> 8 & 0xff,\n        h4 & 0xff\n    ];\n};\nSha1.prototype.array = Sha1.prototype.digest;\nSha1.prototype.arrayBuffer = function() {\n    this.finalize();\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n};\nconst insecureHash = (message)=>{\n    return new Sha1(true).update(message)[\"hex\"]();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json_patch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyPatch: () => (/* reexport safe */ _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   compare: () => (/* reexport safe */ _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.compare)\n/* harmony export */ });\n/* harmony import */ var _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fast-json-patch/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9wYXRjaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9wYXRjaC5qcz9jNGE1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGNvbXBhcmUsIGFwcGx5UGF0Y2gsIH0gZnJvbSBcIi4vZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzXCI7XG4iXSwibmFtZXMiOlsiY29tcGFyZSIsImFwcGx5UGF0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/sax-js/sax.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sax: () => (/* binding */ sax)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues\n// Originally from: https://github.com/isaacs/sax-js\nconst initializeSax = function() {\n    const sax = {};\n    sax.parser = function(strict, opt) {\n        return new SAXParser(strict, opt);\n    };\n    sax.SAXParser = SAXParser;\n    sax.SAXStream = SAXStream;\n    sax.createStream = createStream;\n    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n    // since that's the earliest that a buffer overrun could occur.  This way, checks are\n    // as rare as required, but as often as necessary to ensure never crossing this bound.\n    // Furthermore, buffers are only tested at most once per write(), so passing a very\n    // large string into write() might have undesirable effects, but this is manageable by\n    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n    // edge case, result in creating at most one complete copy of the string passed in.\n    // Set to Infinity to have unlimited buffers.\n    sax.MAX_BUFFER_LENGTH = 64 * 1024;\n    const buffers = [\n        \"comment\",\n        \"sgmlDecl\",\n        \"textNode\",\n        \"tagName\",\n        \"doctype\",\n        \"procInstName\",\n        \"procInstBody\",\n        \"entity\",\n        \"attribName\",\n        \"attribValue\",\n        \"cdata\",\n        \"script\"\n    ];\n    sax.EVENTS = [\n        \"text\",\n        \"processinginstruction\",\n        \"sgmldeclaration\",\n        \"doctype\",\n        \"comment\",\n        \"opentagstart\",\n        \"attribute\",\n        \"opentag\",\n        \"closetag\",\n        \"opencdata\",\n        \"cdata\",\n        \"closecdata\",\n        \"error\",\n        \"end\",\n        \"ready\",\n        \"script\",\n        \"opennamespace\",\n        \"closenamespace\"\n    ];\n    function SAXParser(strict, opt) {\n        if (!(this instanceof SAXParser)) {\n            return new SAXParser(strict, opt);\n        }\n        var parser = this;\n        clearBuffers(parser);\n        parser.q = parser.c = \"\";\n        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n        parser.opt = opt || {};\n        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n        parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n        parser.tags = [];\n        parser.closed = parser.closedRoot = parser.sawRoot = false;\n        parser.tag = parser.error = null;\n        parser.strict = !!strict;\n        parser.noscript = !!(strict || parser.opt.noscript);\n        parser.state = S.BEGIN;\n        parser.strictEntities = parser.opt.strictEntities;\n        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n        parser.attribList = [];\n        // namespaces form a prototype chain.\n        // it always points at the current tag,\n        // which protos to its parent tag.\n        if (parser.opt.xmlns) {\n            parser.ns = Object.create(rootNS);\n        }\n        // mostly just for error reporting\n        parser.trackPosition = parser.opt.position !== false;\n        if (parser.trackPosition) {\n            parser.position = parser.line = parser.column = 0;\n        }\n        emit(parser, \"onready\");\n    }\n    if (!Object.create) {\n        Object.create = function(o) {\n            function F() {}\n            F.prototype = o;\n            var newf = new F();\n            return newf;\n        };\n    }\n    if (!Object.keys) {\n        Object.keys = function(o) {\n            var a = [];\n            for(var i in o)if (o.hasOwnProperty(i)) a.push(i);\n            return a;\n        };\n    }\n    function checkBufferLength(parser) {\n        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n        var maxActual = 0;\n        for(var i = 0, l = buffers.length; i < l; i++){\n            var len = parser[buffers[i]].length;\n            if (len > maxAllowed) {\n                // Text/cdata nodes can get big, and since they're buffered,\n                // we can get here under normal conditions.\n                // Avoid issues by emitting the text node now,\n                // so at least it won't get any bigger.\n                switch(buffers[i]){\n                    case \"textNode\":\n                        closeText(parser);\n                        break;\n                    case \"cdata\":\n                        emitNode(parser, \"oncdata\", parser.cdata);\n                        parser.cdata = \"\";\n                        break;\n                    case \"script\":\n                        emitNode(parser, \"onscript\", parser.script);\n                        parser.script = \"\";\n                        break;\n                    default:\n                        error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n                }\n            }\n            maxActual = Math.max(maxActual, len);\n        }\n        // schedule the next check for the earliest possible buffer overrun.\n        var m = sax.MAX_BUFFER_LENGTH - maxActual;\n        parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n        for(var i = 0, l = buffers.length; i < l; i++){\n            parser[buffers[i]] = \"\";\n        }\n    }\n    function flushBuffers(parser) {\n        closeText(parser);\n        if (parser.cdata !== \"\") {\n            emitNode(parser, \"oncdata\", parser.cdata);\n            parser.cdata = \"\";\n        }\n        if (parser.script !== \"\") {\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n    }\n    SAXParser.prototype = {\n        end: function() {\n            end(this);\n        },\n        write: write,\n        resume: function() {\n            this.error = null;\n            return this;\n        },\n        close: function() {\n            return this.write(null);\n        },\n        flush: function() {\n            flushBuffers(this);\n        }\n    };\n    var Stream = ReadableStream;\n    if (!Stream) Stream = function() {};\n    var streamWraps = sax.EVENTS.filter(function(ev) {\n        return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n        return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n        if (!(this instanceof SAXStream)) {\n            return new SAXStream(strict, opt);\n        }\n        Stream.apply(this);\n        this._parser = new SAXParser(strict, opt);\n        this.writable = true;\n        this.readable = true;\n        var me = this;\n        this._parser.onend = function() {\n            me.emit(\"end\");\n        };\n        this._parser.onerror = function(er) {\n            me.emit(\"error\", er);\n            // if didn't throw, then means error was handled.\n            // go ahead and clear error, so we can write again.\n            me._parser.error = null;\n        };\n        this._decoder = null;\n        streamWraps.forEach(function(ev) {\n            Object.defineProperty(me, \"on\" + ev, {\n                get: function() {\n                    return me._parser[\"on\" + ev];\n                },\n                set: function(h) {\n                    if (!h) {\n                        me.removeAllListeners(ev);\n                        me._parser[\"on\" + ev] = h;\n                        return h;\n                    }\n                    me.on(ev, h);\n                },\n                enumerable: true,\n                configurable: false\n            });\n        });\n    }\n    SAXStream.prototype = Object.create(Stream.prototype, {\n        constructor: {\n            value: SAXStream\n        }\n    });\n    SAXStream.prototype.write = function(data) {\n        this._parser.write(data.toString());\n        this.emit(\"data\", data);\n        return true;\n    };\n    SAXStream.prototype.end = function(chunk) {\n        if (chunk && chunk.length) {\n            this.write(chunk);\n        }\n        this._parser.end();\n        return true;\n    };\n    SAXStream.prototype.on = function(ev, handler) {\n        var me = this;\n        if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n            me._parser[\"on\" + ev] = function() {\n                var args = arguments.length === 1 ? [\n                    arguments[0]\n                ] : Array.apply(null, arguments);\n                args.splice(0, 0, ev);\n                me.emit.apply(me, args);\n            };\n        }\n        return Stream.prototype.on.call(me, ev, handler);\n    };\n    // this really needs to be replaced with character classes.\n    // XML allows all manner of ridiculous numbers and digits.\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = {\n        xml: XML_NAMESPACE,\n        xmlns: XMLNS_NAMESPACE\n    };\n    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n    // This implementation works on strings, a single character at a time\n    // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n    // without a significant breaking change to either this  parser, or the\n    // JavaScript language.  Implementation of an emoji-capable xml parser\n    // is left as an exercise for the reader.\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n        return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\t\";\n    }\n    function isQuote(c) {\n        return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n        return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n        return regex.test(c);\n    }\n    function notMatch(regex, c) {\n        return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax.STATE = {\n        BEGIN: S++,\n        BEGIN_WHITESPACE: S++,\n        TEXT: S++,\n        TEXT_ENTITY: S++,\n        OPEN_WAKA: S++,\n        SGML_DECL: S++,\n        SGML_DECL_QUOTED: S++,\n        DOCTYPE: S++,\n        DOCTYPE_QUOTED: S++,\n        DOCTYPE_DTD: S++,\n        DOCTYPE_DTD_QUOTED: S++,\n        COMMENT_STARTING: S++,\n        COMMENT: S++,\n        COMMENT_ENDING: S++,\n        COMMENT_ENDED: S++,\n        CDATA: S++,\n        CDATA_ENDING: S++,\n        CDATA_ENDING_2: S++,\n        PROC_INST: S++,\n        PROC_INST_BODY: S++,\n        PROC_INST_ENDING: S++,\n        OPEN_TAG: S++,\n        OPEN_TAG_SLASH: S++,\n        ATTRIB: S++,\n        ATTRIB_NAME: S++,\n        ATTRIB_NAME_SAW_WHITE: S++,\n        ATTRIB_VALUE: S++,\n        ATTRIB_VALUE_QUOTED: S++,\n        ATTRIB_VALUE_CLOSED: S++,\n        ATTRIB_VALUE_UNQUOTED: S++,\n        ATTRIB_VALUE_ENTITY_Q: S++,\n        ATTRIB_VALUE_ENTITY_U: S++,\n        CLOSE_TAG: S++,\n        CLOSE_TAG_SAW_WHITE: S++,\n        SCRIPT: S++,\n        SCRIPT_ENDING: S++\n    };\n    sax.XML_ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\"\n    };\n    sax.ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\",\n        AElig: 198,\n        Aacute: 193,\n        Acirc: 194,\n        Agrave: 192,\n        Aring: 197,\n        Atilde: 195,\n        Auml: 196,\n        Ccedil: 199,\n        ETH: 208,\n        Eacute: 201,\n        Ecirc: 202,\n        Egrave: 200,\n        Euml: 203,\n        Iacute: 205,\n        Icirc: 206,\n        Igrave: 204,\n        Iuml: 207,\n        Ntilde: 209,\n        Oacute: 211,\n        Ocirc: 212,\n        Ograve: 210,\n        Oslash: 216,\n        Otilde: 213,\n        Ouml: 214,\n        THORN: 222,\n        Uacute: 218,\n        Ucirc: 219,\n        Ugrave: 217,\n        Uuml: 220,\n        Yacute: 221,\n        aacute: 225,\n        acirc: 226,\n        aelig: 230,\n        agrave: 224,\n        aring: 229,\n        atilde: 227,\n        auml: 228,\n        ccedil: 231,\n        eacute: 233,\n        ecirc: 234,\n        egrave: 232,\n        eth: 240,\n        euml: 235,\n        iacute: 237,\n        icirc: 238,\n        igrave: 236,\n        iuml: 239,\n        ntilde: 241,\n        oacute: 243,\n        ocirc: 244,\n        ograve: 242,\n        oslash: 248,\n        otilde: 245,\n        ouml: 246,\n        szlig: 223,\n        thorn: 254,\n        uacute: 250,\n        ucirc: 251,\n        ugrave: 249,\n        uuml: 252,\n        yacute: 253,\n        yuml: 255,\n        copy: 169,\n        reg: 174,\n        nbsp: 160,\n        iexcl: 161,\n        cent: 162,\n        pound: 163,\n        curren: 164,\n        yen: 165,\n        brvbar: 166,\n        sect: 167,\n        uml: 168,\n        ordf: 170,\n        laquo: 171,\n        not: 172,\n        shy: 173,\n        macr: 175,\n        deg: 176,\n        plusmn: 177,\n        sup1: 185,\n        sup2: 178,\n        sup3: 179,\n        acute: 180,\n        micro: 181,\n        para: 182,\n        middot: 183,\n        cedil: 184,\n        ordm: 186,\n        raquo: 187,\n        frac14: 188,\n        frac12: 189,\n        frac34: 190,\n        iquest: 191,\n        times: 215,\n        divide: 247,\n        OElig: 338,\n        oelig: 339,\n        Scaron: 352,\n        scaron: 353,\n        Yuml: 376,\n        fnof: 402,\n        circ: 710,\n        tilde: 732,\n        Alpha: 913,\n        Beta: 914,\n        Gamma: 915,\n        Delta: 916,\n        Epsilon: 917,\n        Zeta: 918,\n        Eta: 919,\n        Theta: 920,\n        Iota: 921,\n        Kappa: 922,\n        Lambda: 923,\n        Mu: 924,\n        Nu: 925,\n        Xi: 926,\n        Omicron: 927,\n        Pi: 928,\n        Rho: 929,\n        Sigma: 931,\n        Tau: 932,\n        Upsilon: 933,\n        Phi: 934,\n        Chi: 935,\n        Psi: 936,\n        Omega: 937,\n        alpha: 945,\n        beta: 946,\n        gamma: 947,\n        delta: 948,\n        epsilon: 949,\n        zeta: 950,\n        eta: 951,\n        theta: 952,\n        iota: 953,\n        kappa: 954,\n        lambda: 955,\n        mu: 956,\n        nu: 957,\n        xi: 958,\n        omicron: 959,\n        pi: 960,\n        rho: 961,\n        sigmaf: 962,\n        sigma: 963,\n        tau: 964,\n        upsilon: 965,\n        phi: 966,\n        chi: 967,\n        psi: 968,\n        omega: 969,\n        thetasym: 977,\n        upsih: 978,\n        piv: 982,\n        ensp: 8194,\n        emsp: 8195,\n        thinsp: 8201,\n        zwnj: 8204,\n        zwj: 8205,\n        lrm: 8206,\n        rlm: 8207,\n        ndash: 8211,\n        mdash: 8212,\n        lsquo: 8216,\n        rsquo: 8217,\n        sbquo: 8218,\n        ldquo: 8220,\n        rdquo: 8221,\n        bdquo: 8222,\n        dagger: 8224,\n        Dagger: 8225,\n        bull: 8226,\n        hellip: 8230,\n        permil: 8240,\n        prime: 8242,\n        Prime: 8243,\n        lsaquo: 8249,\n        rsaquo: 8250,\n        oline: 8254,\n        frasl: 8260,\n        euro: 8364,\n        image: 8465,\n        weierp: 8472,\n        real: 8476,\n        trade: 8482,\n        alefsym: 8501,\n        larr: 8592,\n        uarr: 8593,\n        rarr: 8594,\n        darr: 8595,\n        harr: 8596,\n        crarr: 8629,\n        lArr: 8656,\n        uArr: 8657,\n        rArr: 8658,\n        dArr: 8659,\n        hArr: 8660,\n        forall: 8704,\n        part: 8706,\n        exist: 8707,\n        empty: 8709,\n        nabla: 8711,\n        isin: 8712,\n        notin: 8713,\n        ni: 8715,\n        prod: 8719,\n        sum: 8721,\n        minus: 8722,\n        lowast: 8727,\n        radic: 8730,\n        prop: 8733,\n        infin: 8734,\n        ang: 8736,\n        and: 8743,\n        or: 8744,\n        cap: 8745,\n        cup: 8746,\n        int: 8747,\n        there4: 8756,\n        sim: 8764,\n        cong: 8773,\n        asymp: 8776,\n        ne: 8800,\n        equiv: 8801,\n        le: 8804,\n        ge: 8805,\n        sub: 8834,\n        sup: 8835,\n        nsub: 8836,\n        sube: 8838,\n        supe: 8839,\n        oplus: 8853,\n        otimes: 8855,\n        perp: 8869,\n        sdot: 8901,\n        lceil: 8968,\n        rceil: 8969,\n        lfloor: 8970,\n        rfloor: 8971,\n        lang: 9001,\n        rang: 9002,\n        loz: 9674,\n        spades: 9824,\n        clubs: 9827,\n        hearts: 9829,\n        diams: 9830\n    };\n    Object.keys(sax.ENTITIES).forEach(function(key) {\n        var e = sax.ENTITIES[key];\n        var s = typeof e === \"number\" ? String.fromCharCode(e) : e;\n        sax.ENTITIES[key] = s;\n    });\n    for(var s in sax.STATE){\n        sax.STATE[sax.STATE[s]] = s;\n    }\n    // shorthand\n    S = sax.STATE;\n    function emit(parser, event, data) {\n        parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n        if (parser.textNode) closeText(parser);\n        emit(parser, nodeType, data);\n    }\n    function closeText(parser) {\n        parser.textNode = textopts(parser.opt, parser.textNode);\n        if (parser.textNode) emit(parser, \"ontext\", parser.textNode);\n        parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n        if (opt.trim) text = text.trim();\n        if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n        return text;\n    }\n    function error(parser, er) {\n        closeText(parser);\n        if (parser.trackPosition) {\n            er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n        }\n        er = new Error(er);\n        parser.error = er;\n        emit(parser, \"onerror\", er);\n        return parser;\n    }\n    function end(parser) {\n        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n            error(parser, \"Unexpected end\");\n        }\n        closeText(parser);\n        parser.c = \"\";\n        parser.closed = true;\n        emit(parser, \"onend\");\n        SAXParser.call(parser, parser.strict, parser.opt);\n        return parser;\n    }\n    function strictFail(parser, message) {\n        if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n            throw new Error(\"bad call to strictFail\");\n        }\n        if (parser.strict) {\n            error(parser, message);\n        }\n    }\n    function newTag(parser) {\n        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        var tag = parser.tag = {\n            name: parser.tagName,\n            attributes: {}\n        };\n        // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n        if (parser.opt.xmlns) {\n            tag.ns = parent.ns;\n        }\n        parser.attribList.length = 0;\n        emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute) {\n        var i = name.indexOf(\":\");\n        var qualName = i < 0 ? [\n            \"\",\n            name\n        ] : name.split(\":\");\n        var prefix = qualName[0];\n        var local = qualName[1];\n        // <x \"xmlns\"=\"http://foo\">\n        if (attribute && name === \"xmlns\") {\n            prefix = \"xmlns\";\n            local = \"\";\n        }\n        return {\n            prefix: prefix,\n            local: local\n        };\n    }\n    function attrib(parser) {\n        if (!parser.strict) {\n            parser.attribName = parser.attribName[parser.looseCase]();\n        }\n        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n            parser.attribName = parser.attribValue = \"\";\n            return;\n        }\n        if (parser.opt.xmlns) {\n            var qn = qname(parser.attribName, true);\n            var prefix = qn.prefix;\n            var local = qn.local;\n            if (prefix === \"xmlns\") {\n                // namespace binding attribute. push the binding into scope\n                if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n                    strictFail(parser, \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n                    strictFail(parser, \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else {\n                    var tag = parser.tag;\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (tag.ns === parent.ns) {\n                        tag.ns = Object.create(parent.ns);\n                    }\n                    tag.ns[local] = parser.attribValue;\n                }\n            }\n            // defer onattribute events until all attributes have been seen\n            // so any new bindings can take effect. preserve attribute order\n            // so deferred events can be emitted in document order\n            parser.attribList.push([\n                parser.attribName,\n                parser.attribValue\n            ]);\n        } else {\n            // in non-xmlns mode, we can emit the event right away\n            parser.tag.attributes[parser.attribName] = parser.attribValue;\n            emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: parser.attribValue\n            });\n        }\n        parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n        if (parser.opt.xmlns) {\n            // emit namespace binding events\n            var tag = parser.tag;\n            // add namespace info to tag\n            var qn = qname(parser.tagName);\n            tag.prefix = qn.prefix;\n            tag.local = qn.local;\n            tag.uri = tag.ns[qn.prefix] || \"\";\n            if (tag.prefix && !tag.uri) {\n                strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n                tag.uri = qn.prefix;\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns && parent.ns !== tag.ns) {\n                Object.keys(tag.ns).forEach(function(p) {\n                    emitNode(parser, \"onopennamespace\", {\n                        prefix: p,\n                        uri: tag.ns[p]\n                    });\n                });\n            }\n            // handle deferred onattribute events\n            // Note: do not apply default ns to attributes:\n            //   http://www.w3.org/TR/REC-xml-names/#defaulting\n            for(var i = 0, l = parser.attribList.length; i < l; i++){\n                var nv = parser.attribList[i];\n                var name = nv[0];\n                var value = nv[1];\n                var qualName = qname(name, true);\n                var prefix = qualName.prefix;\n                var local = qualName.local;\n                var uri = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n                var a = {\n                    name: name,\n                    value: value,\n                    prefix: prefix,\n                    local: local,\n                    uri: uri\n                };\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (prefix && prefix !== \"xmlns\" && !uri) {\n                    strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n                    a.uri = prefix;\n                }\n                parser.tag.attributes[name] = a;\n                emitNode(parser, \"onattribute\", a);\n            }\n            parser.attribList.length = 0;\n        }\n        parser.tag.isSelfClosing = !!selfClosing;\n        // process the tag\n        parser.sawRoot = true;\n        parser.tags.push(parser.tag);\n        emitNode(parser, \"onopentag\", parser.tag);\n        if (!selfClosing) {\n            // special case for <script> in non-strict mode.\n            if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n                parser.state = S.SCRIPT;\n            } else {\n                parser.state = S.TEXT;\n            }\n            parser.tag = null;\n            parser.tagName = \"\";\n        }\n        parser.attribName = parser.attribValue = \"\";\n        parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n        if (!parser.tagName) {\n            strictFail(parser, \"Weird empty close tag.\");\n            parser.textNode += \"</>\";\n            parser.state = S.TEXT;\n            return;\n        }\n        if (parser.script) {\n            if (parser.tagName !== \"script\") {\n                parser.script += \"</\" + parser.tagName + \">\";\n                parser.tagName = \"\";\n                parser.state = S.SCRIPT;\n                return;\n            }\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n        // first make sure that the closing tag actually exists.\n        // <a><b></c></b></a> will close everything, otherwise.\n        var t = parser.tags.length;\n        var tagName = parser.tagName;\n        if (!parser.strict) {\n            tagName = tagName[parser.looseCase]();\n        }\n        var closeTo = tagName;\n        while(t--){\n            var close = parser.tags[t];\n            if (close.name !== closeTo) {\n                // fail the first time in strict mode\n                strictFail(parser, \"Unexpected close tag\");\n            } else {\n                break;\n            }\n        }\n        // didn't find it.  we already failed for strict, so just abort.\n        if (t < 0) {\n            strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n            parser.textNode += \"</\" + parser.tagName + \">\";\n            parser.state = S.TEXT;\n            return;\n        }\n        parser.tagName = tagName;\n        var s = parser.tags.length;\n        while(s-- > t){\n            var tag = parser.tag = parser.tags.pop();\n            parser.tagName = parser.tag.name;\n            emitNode(parser, \"onclosetag\", parser.tagName);\n            var x = {};\n            for(var i in tag.ns){\n                x[i] = tag.ns[i];\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (parser.opt.xmlns && tag.ns !== parent.ns) {\n                // remove namespace bindings introduced by tag\n                Object.keys(tag.ns).forEach(function(p) {\n                    var n = tag.ns[p];\n                    emitNode(parser, \"onclosenamespace\", {\n                        prefix: p,\n                        uri: n\n                    });\n                });\n            }\n        }\n        if (t === 0) parser.closedRoot = true;\n        parser.tagName = parser.attribValue = parser.attribName = \"\";\n        parser.attribList.length = 0;\n        parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n        var entity = parser.entity;\n        var entityLC = entity.toLowerCase();\n        var num;\n        var numStr = \"\";\n        if (parser.ENTITIES[entity]) {\n            return parser.ENTITIES[entity];\n        }\n        if (parser.ENTITIES[entityLC]) {\n            return parser.ENTITIES[entityLC];\n        }\n        entity = entityLC;\n        if (entity.charAt(0) === \"#\") {\n            if (entity.charAt(1) === \"x\") {\n                entity = entity.slice(2);\n                num = parseInt(entity, 16);\n                numStr = num.toString(16);\n            } else {\n                entity = entity.slice(1);\n                num = parseInt(entity, 10);\n                numStr = num.toString(10);\n            }\n        }\n        entity = entity.replace(/^0+/, \"\");\n        if (isNaN(num) || numStr.toLowerCase() !== entity) {\n            strictFail(parser, \"Invalid character entity\");\n            return \"&\" + parser.entity + \";\";\n        }\n        return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n        if (c === \"<\") {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n        } else if (!isWhitespace(c)) {\n            // have to process this as a text node.\n            // weird, but happens.\n            strictFail(parser, \"Non-whitespace before first tag.\");\n            parser.textNode = c;\n            parser.state = S.TEXT;\n        }\n    }\n    function charAt(chunk, i) {\n        var result = \"\";\n        if (i < chunk.length) {\n            result = chunk.charAt(i);\n        }\n        return result;\n    }\n    function write(chunk) {\n        var parser = this;\n        if (this.error) {\n            throw this.error;\n        }\n        if (parser.closed) {\n            return error(parser, \"Cannot write after close. Assign an onready handler.\");\n        }\n        if (chunk === null) {\n            return end(parser);\n        }\n        if (typeof chunk === \"object\") {\n            chunk = chunk.toString();\n        }\n        var i = 0;\n        var c = \"\";\n        while(true){\n            c = charAt(chunk, i++);\n            parser.c = c;\n            if (!c) {\n                break;\n            }\n            if (parser.trackPosition) {\n                parser.position++;\n                if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                } else {\n                    parser.column++;\n                }\n            }\n            switch(parser.state){\n                case S.BEGIN:\n                    parser.state = S.BEGIN_WHITESPACE;\n                    if (c === \"\\uFEFF\") {\n                        continue;\n                    }\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.BEGIN_WHITESPACE:\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.TEXT:\n                    if (parser.sawRoot && !parser.closedRoot) {\n                        var starti = i - 1;\n                        while(c && c !== \"<\" && c !== \"&\"){\n                            c = charAt(chunk, i++);\n                            if (c && parser.trackPosition) {\n                                parser.position++;\n                                if (c === \"\\n\") {\n                                    parser.line++;\n                                    parser.column = 0;\n                                } else {\n                                    parser.column++;\n                                }\n                            }\n                        }\n                        parser.textNode += chunk.substring(starti, i - 1);\n                    }\n                    if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n                        parser.state = S.OPEN_WAKA;\n                        parser.startTagPosition = parser.position;\n                    } else {\n                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                            strictFail(parser, \"Text data outside of root node.\");\n                        }\n                        if (c === \"&\") {\n                            parser.state = S.TEXT_ENTITY;\n                        } else {\n                            parser.textNode += c;\n                        }\n                    }\n                    continue;\n                case S.SCRIPT:\n                    // only non-strict\n                    if (c === \"<\") {\n                        parser.state = S.SCRIPT_ENDING;\n                    } else {\n                        parser.script += c;\n                    }\n                    continue;\n                case S.SCRIPT_ENDING:\n                    if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                    } else {\n                        parser.script += \"<\" + c;\n                        parser.state = S.SCRIPT;\n                    }\n                    continue;\n                case S.OPEN_WAKA:\n                    // either a /, ?, !, or text is coming next.\n                    if (c === \"!\") {\n                        parser.state = S.SGML_DECL;\n                        parser.sgmlDecl = \"\";\n                    } else if (isWhitespace(c)) {\n                    // wait for it...\n                    } else if (isMatch(nameStart, c)) {\n                        parser.state = S.OPEN_TAG;\n                        parser.tagName = c;\n                    } else if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                        parser.tagName = \"\";\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST;\n                        parser.procInstName = parser.procInstBody = \"\";\n                    } else {\n                        strictFail(parser, \"Unencoded <\");\n                        // if there was some whitespace, then add that in.\n                        if (parser.startTagPosition + 1 < parser.position) {\n                            var pad = parser.position - parser.startTagPosition;\n                            c = new Array(pad).join(\" \") + c;\n                        }\n                        parser.textNode += \"<\" + c;\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.SGML_DECL:\n                    if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n                        emitNode(parser, \"onopencdata\");\n                        parser.state = S.CDATA;\n                        parser.sgmlDecl = \"\";\n                        parser.cdata = \"\";\n                    } else if (parser.sgmlDecl + c === \"--\") {\n                        parser.state = S.COMMENT;\n                        parser.comment = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n                        parser.state = S.DOCTYPE;\n                        if (parser.doctype || parser.sawRoot) {\n                            strictFail(parser, \"Inappropriately located doctype declaration\");\n                        }\n                        parser.doctype = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if (c === \">\") {\n                        emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n                        parser.sgmlDecl = \"\";\n                        parser.state = S.TEXT;\n                    } else if (isQuote(c)) {\n                        parser.state = S.SGML_DECL_QUOTED;\n                        parser.sgmlDecl += c;\n                    } else {\n                        parser.sgmlDecl += c;\n                    }\n                    continue;\n                case S.SGML_DECL_QUOTED:\n                    if (c === parser.q) {\n                        parser.state = S.SGML_DECL;\n                        parser.q = \"\";\n                    }\n                    parser.sgmlDecl += c;\n                    continue;\n                case S.DOCTYPE:\n                    if (c === \">\") {\n                        parser.state = S.TEXT;\n                        emitNode(parser, \"ondoctype\", parser.doctype);\n                        parser.doctype = true; // just remember that we saw it.\n                    } else {\n                        parser.doctype += c;\n                        if (c === \"[\") {\n                            parser.state = S.DOCTYPE_DTD;\n                        } else if (isQuote(c)) {\n                            parser.state = S.DOCTYPE_QUOTED;\n                            parser.q = c;\n                        }\n                    }\n                    continue;\n                case S.DOCTYPE_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.q = \"\";\n                        parser.state = S.DOCTYPE;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD:\n                    parser.doctype += c;\n                    if (c === \"]\") {\n                        parser.state = S.DOCTYPE;\n                    } else if (isQuote(c)) {\n                        parser.state = S.DOCTYPE_DTD_QUOTED;\n                        parser.q = c;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.state = S.DOCTYPE_DTD;\n                        parser.q = \"\";\n                    }\n                    continue;\n                case S.COMMENT:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDING;\n                    } else {\n                        parser.comment += c;\n                    }\n                    continue;\n                case S.COMMENT_ENDING:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDED;\n                        parser.comment = textopts(parser.opt, parser.comment);\n                        if (parser.comment) {\n                            emitNode(parser, \"oncomment\", parser.comment);\n                        }\n                        parser.comment = \"\";\n                    } else {\n                        parser.comment += \"-\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    continue;\n                case S.COMMENT_ENDED:\n                    if (c !== \">\") {\n                        strictFail(parser, \"Malformed comment\");\n                        // allow <!-- blah -- bloo --> in non-strict mode,\n                        // which is a comment of \" blah -- bloo \"\n                        parser.comment += \"--\" + c;\n                        parser.state = S.COMMENT;\n                    } else {\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.CDATA:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING;\n                    } else {\n                        parser.cdata += c;\n                    }\n                    continue;\n                case S.CDATA_ENDING:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING_2;\n                    } else {\n                        parser.cdata += \"]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.CDATA_ENDING_2:\n                    if (c === \">\") {\n                        if (parser.cdata) {\n                            emitNode(parser, \"oncdata\", parser.cdata);\n                        }\n                        emitNode(parser, \"onclosecdata\");\n                        parser.cdata = \"\";\n                        parser.state = S.TEXT;\n                    } else if (c === \"]\") {\n                        parser.cdata += \"]\";\n                    } else {\n                        parser.cdata += \"]]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.PROC_INST:\n                    if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.PROC_INST_BODY;\n                    } else {\n                        parser.procInstName += c;\n                    }\n                    continue;\n                case S.PROC_INST_BODY:\n                    if (!parser.procInstBody && isWhitespace(c)) {\n                        continue;\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else {\n                        parser.procInstBody += c;\n                    }\n                    continue;\n                case S.PROC_INST_ENDING:\n                    if (c === \">\") {\n                        emitNode(parser, \"onprocessinginstruction\", {\n                            name: parser.procInstName,\n                            body: parser.procInstBody\n                        });\n                        parser.procInstName = parser.procInstBody = \"\";\n                        parser.state = S.TEXT;\n                    } else {\n                        parser.procInstBody += \"?\" + c;\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    continue;\n                case S.OPEN_TAG:\n                    if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else {\n                        newTag(parser);\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (c === \"/\") {\n                            parser.state = S.OPEN_TAG_SLASH;\n                        } else {\n                            if (!isWhitespace(c)) {\n                                strictFail(parser, \"Invalid character in tag name\");\n                            }\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.OPEN_TAG_SLASH:\n                    if (c === \">\") {\n                        openTag(parser, true);\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.ATTRIB:\n                    // haven't read the attribute name yet.\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (c === \">\") {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.attribValue = parser.attribName;\n                        attrib(parser);\n                        openTag(parser);\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB_NAME_SAW_WHITE;\n                    } else if (isMatch(nameBody, c)) {\n                        parser.attribName += c;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME_SAW_WHITE:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (isWhitespace(c)) {\n                        continue;\n                    } else {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.tag.attributes[parser.attribName] = \"\";\n                        parser.attribValue = \"\";\n                        emitNode(parser, \"onattribute\", {\n                            name: parser.attribName,\n                            value: \"\"\n                        });\n                        parser.attribName = \"\";\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (isMatch(nameStart, c)) {\n                            parser.attribName = c;\n                            parser.state = S.ATTRIB_NAME;\n                        } else {\n                            strictFail(parser, \"Invalid attribute name\");\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.ATTRIB_VALUE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (isQuote(c)) {\n                        parser.q = c;\n                        parser.state = S.ATTRIB_VALUE_QUOTED;\n                    } else {\n                        strictFail(parser, \"Unquoted attribute value\");\n                        parser.state = S.ATTRIB_VALUE_UNQUOTED;\n                        parser.attribValue = c;\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_QUOTED:\n                    if (c !== parser.q) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    parser.q = \"\";\n                    parser.state = S.ATTRIB_VALUE_CLOSED;\n                    continue;\n                case S.ATTRIB_VALUE_CLOSED:\n                    if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        strictFail(parser, \"No whitespace between attributes\");\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_UNQUOTED:\n                    if (!isAttribEnd(c)) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_U;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    if (c === \">\") {\n                        openTag(parser);\n                    } else {\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.CLOSE_TAG:\n                    if (!parser.tagName) {\n                        if (isWhitespace(c)) {\n                            continue;\n                        } else if (notMatch(nameStart, c)) {\n                            if (parser.script) {\n                                parser.script += \"</\" + c;\n                                parser.state = S.SCRIPT;\n                            } else {\n                                strictFail(parser, \"Invalid tagname in closing tag.\");\n                            }\n                        } else {\n                            parser.tagName = c;\n                        }\n                    } else if (c === \">\") {\n                        closeTag(parser);\n                    } else if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else if (parser.script) {\n                        parser.script += \"</\" + parser.tagName;\n                        parser.tagName = \"\";\n                        parser.state = S.SCRIPT;\n                    } else {\n                        if (!isWhitespace(c)) {\n                            strictFail(parser, \"Invalid tagname in closing tag\");\n                        }\n                        parser.state = S.CLOSE_TAG_SAW_WHITE;\n                    }\n                    continue;\n                case S.CLOSE_TAG_SAW_WHITE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    if (c === \">\") {\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Invalid characters in closing tag\");\n                    }\n                    continue;\n                case S.TEXT_ENTITY:\n                case S.ATTRIB_VALUE_ENTITY_Q:\n                case S.ATTRIB_VALUE_ENTITY_U:\n                    var returnState;\n                    var buffer;\n                    switch(parser.state){\n                        case S.TEXT_ENTITY:\n                            returnState = S.TEXT;\n                            buffer = \"textNode\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_Q:\n                            returnState = S.ATTRIB_VALUE_QUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_U:\n                            returnState = S.ATTRIB_VALUE_UNQUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                    }\n                    if (c === \";\") {\n                        if (parser.opt.unparsedEntities) {\n                            var parsedEntity = parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                            parser.write(parsedEntity);\n                        } else {\n                            parser[buffer] += parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                        }\n                    } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n                        parser.entity += c;\n                    } else {\n                        strictFail(parser, \"Invalid character in entity name\");\n                        parser[buffer] += \"&\" + parser.entity + c;\n                        parser.entity = \"\";\n                        parser.state = returnState;\n                    }\n                    continue;\n                default:\n                    /* istanbul ignore next */ {\n                        throw new Error(parser, \"Unknown state: \" + parser.state);\n                    }\n            }\n        } // while\n        if (parser.position >= parser.bufferCheckPosition) {\n            checkBufferLength(parser);\n        }\n        return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */ /* istanbul ignore next */ if (!String.fromCodePoint) {\n        (function() {\n            var stringFromCharCode = String.fromCharCode;\n            var floor = Math.floor;\n            var fromCodePoint = function() {\n                var MAX_SIZE = 0x4000;\n                var codeUnits = [];\n                var highSurrogate;\n                var lowSurrogate;\n                var index = -1;\n                var length = arguments.length;\n                if (!length) {\n                    return \"\";\n                }\n                var result = \"\";\n                while(++index < length){\n                    var codePoint = Number(arguments[index]);\n                    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                    codePoint < 0 || // not a valid Unicode code point\n                    codePoint > 0x10ffff || // not a valid Unicode code point\n                    floor(codePoint) !== codePoint // not an integer\n                    ) {\n                        throw RangeError(\"Invalid code point: \" + codePoint);\n                    }\n                    if (codePoint <= 0xffff) {\n                        // BMP code point\n                        codeUnits.push(codePoint);\n                    } else {\n                        // Astral code point; split in surrogate halves\n                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        codePoint -= 0x10000;\n                        highSurrogate = (codePoint >> 10) + 0xd800;\n                        lowSurrogate = codePoint % 0x400 + 0xdc00;\n                        codeUnits.push(highSurrogate, lowSurrogate);\n                    }\n                    if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                        result += stringFromCharCode.apply(null, codeUnits);\n                        codeUnits.length = 0;\n                    }\n                }\n                return result;\n            };\n            /* istanbul ignore next */ if (Object.defineProperty) {\n                Object.defineProperty(String, \"fromCodePoint\", {\n                    value: fromCodePoint,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                String.fromCodePoint = fromCodePoint;\n            }\n        })();\n    }\n    return sax;\n};\nconst sax = /** #__PURE__ */ initializeSax();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/stream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncGeneratorWithSetup: () => (/* binding */ AsyncGeneratorWithSetup),\n/* harmony export */   IterableReadableStream: () => (/* binding */ IterableReadableStream),\n/* harmony export */   atee: () => (/* binding */ atee),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   pipeGeneratorWithSetup: () => (/* binding */ pipeGeneratorWithSetup)\n/* harmony export */ });\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ class IterableReadableStream extends ReadableStream {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined\n                };\n            } else {\n                return {\n                    done: false,\n                    value: result.value\n                };\n            }\n        } catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start (controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value })=>{\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel () {\n                reader.releaseLock();\n            }\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull (controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel (reason) {\n                await generator.return(reason);\n            }\n        });\n    }\n}\nfunction atee(iter, length = 2) {\n    const buffers = Array.from({\n        length\n    }, ()=>[]);\n    return buffers.map(async function* makeIter(buffer) {\n        while(true){\n            if (buffer.length === 0) {\n                const result = await iter.next();\n                for (const buffer of buffers){\n                    buffer.push(result);\n                }\n            } else if (buffer[0].done) {\n                return;\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                yield buffer.shift().value;\n            }\n        }\n    });\n}\nfunction concat(first, second) {\n    if (Array.isArray(first) && Array.isArray(second)) {\n        return first.concat(second);\n    } else if (typeof first === \"string\" && typeof second === \"string\") {\n        return first + second;\n    } else if (typeof first === \"number\" && typeof second === \"number\") {\n        return first + second;\n    } else if (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"concat\" in first && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof first.concat === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return first.concat(second);\n    } else if (typeof first === \"object\" && typeof second === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const chunk = {\n            ...first\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (const [key, value] of Object.entries(second)){\n            if (key in chunk && !Array.isArray(chunk[key])) {\n                chunk[key] = concat(chunk[key], value);\n            } else {\n                chunk[key] = value;\n            }\n        }\n        return chunk;\n    } else {\n        throw new Error(`Cannot concat ${typeof first} and ${typeof second}`);\n    }\n}\nclass AsyncGeneratorWithSetup {\n    constructor(generator, startSetup){\n        Object.defineProperty(this, \"generator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"setup\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResultUsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.generator = generator;\n        // setup is a promise that resolves only after the first iterator value\n        // is available. this is useful when setup of several piped generators\n        // needs to happen in logical order, ie. in the order in which input to\n        // to each generator is available.\n        this.setup = new Promise((resolve, reject)=>{\n            this.firstResult = generator.next();\n            if (startSetup) {\n                this.firstResult.then(startSetup).then(resolve, reject);\n            } else {\n                this.firstResult.then((_result)=>resolve(undefined), reject);\n            }\n        });\n    }\n    async next(...args) {\n        if (!this.firstResultUsed) {\n            this.firstResultUsed = true;\n            return this.firstResult;\n        }\n        return this.generator.next(...args);\n    }\n    async return(value) {\n        return this.generator.return(value);\n    }\n    async throw(e) {\n        return this.generator.throw(e);\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\nasync function pipeGeneratorWithSetup(to, generator, startSetup, ...args) {\n    const gen = new AsyncGeneratorWithSetup(generator, startSetup);\n    const setup = await gen.setup;\n    return {\n        output: to(gen, setup, ...args),\n        setup\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvc3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBQ00sTUFBTUEsK0JBQStCQztJQUN4Q0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7SUFDSjtJQUNBQyxlQUFlO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQ0MsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDQSxNQUFNLEdBQUcsSUFBSSxDQUFDQyxTQUFTO1FBQ2hDO0lBQ0o7SUFDQSxNQUFNQyxPQUFPO1FBQ1QsSUFBSSxDQUFDSCxZQUFZO1FBQ2pCLElBQUk7WUFDQSxNQUFNSSxTQUFTLE1BQU0sSUFBSSxDQUFDSCxNQUFNLENBQUNJLElBQUk7WUFDckMsSUFBSUQsT0FBT0UsSUFBSSxFQUFFO2dCQUNiLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxXQUFXLElBQUksMENBQTBDO2dCQUNyRSxPQUFPO29CQUNIRCxNQUFNO29CQUNOUCxPQUFPUztnQkFDWDtZQUNKLE9BQ0s7Z0JBQ0QsT0FBTztvQkFDSEYsTUFBTTtvQkFDTlAsT0FBT0ssT0FBT0wsS0FBSztnQkFDdkI7WUFDSjtRQUNKLEVBQ0EsT0FBT1UsR0FBRztZQUNOLElBQUksQ0FBQ1IsTUFBTSxDQUFDTSxXQUFXLElBQUksMkNBQTJDO1lBQ3RFLE1BQU1FO1FBQ1Y7SUFDSjtJQUNBLE1BQU1DLFNBQVM7UUFDWCxJQUFJLENBQUNWLFlBQVk7UUFDakIseURBQXlEO1FBQ3pELElBQUksSUFBSSxDQUFDVyxNQUFNLEVBQUU7WUFDYixNQUFNQyxnQkFBZ0IsSUFBSSxDQUFDWCxNQUFNLENBQUNZLE1BQU0sSUFBSSxvQ0FBb0M7WUFDaEYsSUFBSSxDQUFDWixNQUFNLENBQUNNLFdBQVcsSUFBSSxxQkFBcUI7WUFDaEQsTUFBTUssZUFBZSxlQUFlO1FBQ3hDO1FBQ0EsT0FBTztZQUFFTixNQUFNO1lBQU1QLE9BQU9TO1FBQVU7SUFDMUM7SUFDQSw4REFBOEQ7SUFDOUQsTUFBTU0sTUFBTUwsQ0FBQyxFQUFFO1FBQ1gsSUFBSSxDQUFDVCxZQUFZO1FBQ2pCLElBQUksSUFBSSxDQUFDVyxNQUFNLEVBQUU7WUFDYixNQUFNQyxnQkFBZ0IsSUFBSSxDQUFDWCxNQUFNLENBQUNZLE1BQU0sSUFBSSxvQ0FBb0M7WUFDaEYsSUFBSSxDQUFDWixNQUFNLENBQUNNLFdBQVcsSUFBSSxxQkFBcUI7WUFDaEQsTUFBTUssZUFBZSxlQUFlO1FBQ3hDO1FBQ0EsTUFBTUg7SUFDVjtJQUNBLENBQUNNLE9BQU9DLGFBQWEsQ0FBQyxHQUFHO1FBQ3JCLE9BQU8sSUFBSTtJQUNmO0lBQ0EsT0FBT0MsbUJBQW1CQyxNQUFNLEVBQUU7UUFDOUIsOEdBQThHO1FBQzlHLE1BQU1qQixTQUFTaUIsT0FBT2hCLFNBQVM7UUFDL0IsT0FBTyxJQUFJWix1QkFBdUI7WUFDOUI2QixPQUFNQyxVQUFVO2dCQUNaLE9BQU9DO2dCQUNQLFNBQVNBO29CQUNMLE9BQU9wQixPQUFPSSxJQUFJLEdBQUdpQixJQUFJLENBQUMsQ0FBQyxFQUFFaEIsSUFBSSxFQUFFUCxLQUFLLEVBQUU7d0JBQ3RDLDJEQUEyRDt3QkFDM0QsSUFBSU8sTUFBTTs0QkFDTmMsV0FBV0csS0FBSzs0QkFDaEI7d0JBQ0o7d0JBQ0EscURBQXFEO3dCQUNyREgsV0FBV0ksT0FBTyxDQUFDekI7d0JBQ25CLE9BQU9zQjtvQkFDWDtnQkFDSjtZQUNKO1lBQ0FSO2dCQUNJWixPQUFPTSxXQUFXO1lBQ3RCO1FBQ0o7SUFDSjtJQUNBLE9BQU9rQixtQkFBbUJDLFNBQVMsRUFBRTtRQUNqQyxPQUFPLElBQUlwQyx1QkFBdUI7WUFDOUIsTUFBTXFDLE1BQUtQLFVBQVU7Z0JBQ2pCLE1BQU0sRUFBRXJCLEtBQUssRUFBRU8sSUFBSSxFQUFFLEdBQUcsTUFBTW9CLFVBQVV2QixJQUFJO2dCQUM1QywyREFBMkQ7Z0JBQzNELElBQUlHLE1BQU07b0JBQ05jLFdBQVdHLEtBQUs7Z0JBQ3BCO2dCQUNBLGtHQUFrRztnQkFDbEdILFdBQVdJLE9BQU8sQ0FBQ3pCO1lBQ3ZCO1lBQ0EsTUFBTWMsUUFBT2UsTUFBTTtnQkFDZixNQUFNRixVQUFVaEIsTUFBTSxDQUFDa0I7WUFDM0I7UUFDSjtJQUNKO0FBQ0o7QUFDTyxTQUFTQyxLQUFLQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztJQUNqQyxNQUFNQyxVQUFVQyxNQUFNQyxJQUFJLENBQUM7UUFBRUg7SUFBTyxHQUFHLElBQU0sRUFBRTtJQUMvQyxPQUFPQyxRQUFRRyxHQUFHLENBQUMsZ0JBQWdCQyxTQUFTQyxNQUFNO1FBQzlDLE1BQU8sS0FBTTtZQUNULElBQUlBLE9BQU9OLE1BQU0sS0FBSyxHQUFHO2dCQUNyQixNQUFNM0IsU0FBUyxNQUFNMEIsS0FBSzNCLElBQUk7Z0JBQzlCLEtBQUssTUFBTWtDLFVBQVVMLFFBQVM7b0JBQzFCSyxPQUFPQyxJQUFJLENBQUNsQztnQkFDaEI7WUFDSixPQUNLLElBQUlpQyxNQUFNLENBQUMsRUFBRSxDQUFDL0IsSUFBSSxFQUFFO2dCQUNyQjtZQUNKLE9BQ0s7Z0JBQ0Qsb0VBQW9FO2dCQUNwRSxNQUFNK0IsT0FBT0UsS0FBSyxHQUFHeEMsS0FBSztZQUM5QjtRQUNKO0lBQ0o7QUFDSjtBQUNPLFNBQVN5QyxPQUFPQyxLQUFLLEVBQUVDLE1BQU07SUFDaEMsSUFBSVQsTUFBTVUsT0FBTyxDQUFDRixVQUFVUixNQUFNVSxPQUFPLENBQUNELFNBQVM7UUFDL0MsT0FBT0QsTUFBTUQsTUFBTSxDQUFDRTtJQUN4QixPQUNLLElBQUksT0FBT0QsVUFBVSxZQUFZLE9BQU9DLFdBQVcsVUFBVTtRQUM5RCxPQUFRRCxRQUFRQztJQUNwQixPQUNLLElBQUksT0FBT0QsVUFBVSxZQUFZLE9BQU9DLFdBQVcsVUFBVTtRQUM5RCxPQUFRRCxRQUFRQztJQUNwQixPQUNLLElBQ0wsOERBQThEO0lBQzlELFlBQVlELFNBQ1IsOERBQThEO0lBQzlELE9BQU9BLE1BQU1ELE1BQU0sS0FBSyxZQUFZO1FBQ3BDLDhEQUE4RDtRQUM5RCxPQUFPQyxNQUFNRCxNQUFNLENBQUNFO0lBQ3hCLE9BQ0ssSUFBSSxPQUFPRCxVQUFVLFlBQVksT0FBT0MsV0FBVyxVQUFVO1FBQzlELDhEQUE4RDtRQUM5RCxNQUFNRSxRQUFRO1lBQUUsR0FBR0gsS0FBSztRQUFDO1FBQ3pCLDhEQUE4RDtRQUM5RCxLQUFLLE1BQU0sQ0FBQ0ksS0FBSzlDLE1BQU0sSUFBSUwsT0FBT29ELE9BQU8sQ0FBQ0osUUFBUztZQUMvQyxJQUFJRyxPQUFPRCxTQUFTLENBQUNYLE1BQU1VLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLEdBQUc7Z0JBQzVDRCxLQUFLLENBQUNDLElBQUksR0FBR0wsT0FBT0ksS0FBSyxDQUFDQyxJQUFJLEVBQUU5QztZQUNwQyxPQUNLO2dCQUNENkMsS0FBSyxDQUFDQyxJQUFJLEdBQUc5QztZQUNqQjtRQUNKO1FBQ0EsT0FBTzZDO0lBQ1gsT0FDSztRQUNELE1BQU0sSUFBSUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxPQUFPTixNQUFNLEtBQUssRUFBRSxPQUFPQyxPQUFPLENBQUM7SUFDeEU7QUFDSjtBQUNPLE1BQU1NO0lBQ1R4RCxZQUFZa0MsU0FBUyxFQUFFdUIsVUFBVSxDQUFFO1FBQy9CdkQsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxTQUFTO1lBQ2pDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQzJCLFNBQVMsR0FBR0E7UUFDakIsdUVBQXVFO1FBQ3ZFLHNFQUFzRTtRQUN0RSx1RUFBdUU7UUFDdkUsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQ3dCLEtBQUssR0FBRyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1lBQy9CLElBQUksQ0FBQ0MsV0FBVyxHQUFHNUIsVUFBVXZCLElBQUk7WUFDakMsSUFBSThDLFlBQVk7Z0JBQ1osSUFBSSxDQUFDSyxXQUFXLENBQUNoQyxJQUFJLENBQUMyQixZQUFZM0IsSUFBSSxDQUFDOEIsU0FBU0M7WUFDcEQsT0FDSztnQkFDRCxJQUFJLENBQUNDLFdBQVcsQ0FBQ2hDLElBQUksQ0FBQyxDQUFDaUMsVUFBWUgsUUFBUTVDLFlBQVk2QztZQUMzRDtRQUNKO0lBQ0o7SUFDQSxNQUFNbEQsS0FBSyxHQUFHcUQsSUFBSSxFQUFFO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUNDLGVBQWUsRUFBRTtZQUN2QixJQUFJLENBQUNBLGVBQWUsR0FBRztZQUN2QixPQUFPLElBQUksQ0FBQ0gsV0FBVztRQUMzQjtRQUNBLE9BQU8sSUFBSSxDQUFDNUIsU0FBUyxDQUFDdkIsSUFBSSxJQUFJcUQ7SUFDbEM7SUFDQSxNQUFNOUMsT0FBT1gsS0FBSyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDMkIsU0FBUyxDQUFDaEIsTUFBTSxDQUFDWDtJQUNqQztJQUNBLE1BQU1lLE1BQU1MLENBQUMsRUFBRTtRQUNYLE9BQU8sSUFBSSxDQUFDaUIsU0FBUyxDQUFDWixLQUFLLENBQUNMO0lBQ2hDO0lBQ0EsQ0FBQ00sT0FBT0MsYUFBYSxDQUFDLEdBQUc7UUFDckIsT0FBTyxJQUFJO0lBQ2Y7QUFDSjtBQUNPLGVBQWUwQyx1QkFBdUJDLEVBQUUsRUFBRWpDLFNBQVMsRUFBRXVCLFVBQVUsRUFBRSxHQUFHTyxJQUFJO0lBQzNFLE1BQU1JLE1BQU0sSUFBSVosd0JBQXdCdEIsV0FBV3VCO0lBQ25ELE1BQU1DLFFBQVEsTUFBTVUsSUFBSVYsS0FBSztJQUM3QixPQUFPO1FBQUVXLFFBQVFGLEdBQUdDLEtBQUtWLFVBQVVNO1FBQU9OO0lBQU07QUFDcEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvc3RyZWFtLmpzPzkyMTUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFN1cHBvcnQgYXN5bmMgaXRlcmF0b3Igc3ludGF4IGZvciBSZWFkYWJsZVN0cmVhbXMgaW4gYWxsIGVudmlyb25tZW50cy5cbiAqIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL01hdHRpYXNCdWVsZW5zL3dlYi1zdHJlYW1zLXBvbHlmaWxsL3B1bGwvMTIyI2lzc3VlY29tbWVudC0xNjI3MzU0NDkwXG4gKi9cbmV4cG9ydCBjbGFzcyBJdGVyYWJsZVJlYWRhYmxlU3RyZWFtIGV4dGVuZHMgUmVhZGFibGVTdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZWFkZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZW5zdXJlUmVhZGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMucmVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRlciA9IHRoaXMuZ2V0UmVhZGVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVSZWFkZXIoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGNsb3NlZFxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGVycm9yZWRcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcmV0dXJuKCkge1xuICAgICAgICB0aGlzLmVuc3VyZVJlYWRlcigpO1xuICAgICAgICAvLyBJZiB3cmFwcGVkIGluIGEgTm9kZSBzdHJlYW0sIGNhbmNlbCBpcyBhbHJlYWR5IGNhbGxlZC5cbiAgICAgICAgaWYgKHRoaXMubG9ja2VkKSB7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxQcm9taXNlID0gdGhpcy5yZWFkZXIuY2FuY2VsKCk7IC8vIGNhbmNlbCBmaXJzdCwgYnV0IGRvbid0IGF3YWl0IHlldFxuICAgICAgICAgICAgdGhpcy5yZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIGZpcnN0XG4gICAgICAgICAgICBhd2FpdCBjYW5jZWxQcm9taXNlOyAvLyBub3cgYXdhaXQgaXRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgYXN5bmMgdGhyb3coZSkge1xuICAgICAgICB0aGlzLmVuc3VyZVJlYWRlcigpO1xuICAgICAgICBpZiAodGhpcy5sb2NrZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSB0aGlzLnJlYWRlci5jYW5jZWwoKTsgLy8gY2FuY2VsIGZpcnN0LCBidXQgZG9uJ3QgYXdhaXQgeWV0XG4gICAgICAgICAgICB0aGlzLnJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgZmlyc3RcbiAgICAgICAgICAgIGF3YWl0IGNhbmNlbFByb21pc2U7IC8vIG5vdyBhd2FpdCBpdFxuICAgICAgICB9XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgICAvLyBGcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TdHJlYW1zX0FQSS9Vc2luZ19yZWFkYWJsZV9zdHJlYW1zI3JlYWRpbmdfdGhlX3N0cmVhbVxuICAgICAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmFibGVSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHB1bXAoKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwdW1wKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWQoKS50aGVuKCh7IGRvbmUsIHZhbHVlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gbm8gbW9yZSBkYXRhIG5lZWRzIHRvIGJlIGNvbnN1bWVkLCBjbG9zZSB0aGUgc3RyZWFtXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFbnF1ZXVlIHRoZSBuZXh0IGRhdGEgY2h1bmsgaW50byBvdXIgdGFyZ2V0IHN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwdW1wKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWwoKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Bc3luY0dlbmVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJdGVyYWJsZVJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IGdlbmVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBubyBtb3JlIGRhdGEgbmVlZHMgdG8gYmUgY29uc3VtZWQsIGNsb3NlIHRoZSBzdHJlYW1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEZpeDogYGVsc2UgaWYgKHZhbHVlKWAgd2lsbCBoYW5nIHRoZSBzdHJlYW1pbmcgd2hlbiBudWxsaXNoIHZhbHVlIChlLmcuIGVtcHR5IHN0cmluZykgaXMgcHVsbGVkXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYyBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZ2VuZXJhdG9yLnJldHVybihyZWFzb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGF0ZWUoaXRlciwgbGVuZ3RoID0gMikge1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoIH0sICgpID0+IFtdKTtcbiAgICByZXR1cm4gYnVmZmVycy5tYXAoYXN5bmMgZnVuY3Rpb24qIG1ha2VJdGVyKGJ1ZmZlcikge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpdGVyLm5leHQoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGJ1ZmZlciBvZiBidWZmZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYnVmZmVyWzBdLmRvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgICAgIHlpZWxkIGJ1ZmZlci5zaGlmdCgpLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KGZpcnN0LCBzZWNvbmQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaXJzdCkgJiYgQXJyYXkuaXNBcnJheShzZWNvbmQpKSB7XG4gICAgICAgIHJldHVybiBmaXJzdC5jb25jYXQoc2Vjb25kKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZpcnN0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBzZWNvbmQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIChmaXJzdCArIHNlY29uZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBmaXJzdCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2Ygc2Vjb25kID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiAoZmlyc3QgKyBzZWNvbmQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIFwiY29uY2F0XCIgaW4gZmlyc3QgJiZcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdHlwZW9mIGZpcnN0LmNvbmNhdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBmaXJzdC5jb25jYXQoc2Vjb25kKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZpcnN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBzZWNvbmQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgY2h1bmsgPSB7IC4uLmZpcnN0IH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNlY29uZCkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgaW4gY2h1bmsgJiYgIUFycmF5LmlzQXJyYXkoY2h1bmtba2V5XSkpIHtcbiAgICAgICAgICAgICAgICBjaHVua1trZXldID0gY29uY2F0KGNodW5rW2tleV0sIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNodW5rW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2h1bms7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjb25jYXQgJHt0eXBlb2YgZmlyc3R9IGFuZCAke3R5cGVvZiBzZWNvbmR9YCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFzeW5jR2VuZXJhdG9yV2l0aFNldHVwIHtcbiAgICBjb25zdHJ1Y3RvcihnZW5lcmF0b3IsIHN0YXJ0U2V0dXApIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2VuZXJhdG9yXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNldHVwXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImZpcnN0UmVzdWx0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImZpcnN0UmVzdWx0VXNlZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2VuZXJhdG9yID0gZ2VuZXJhdG9yO1xuICAgICAgICAvLyBzZXR1cCBpcyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBvbmx5IGFmdGVyIHRoZSBmaXJzdCBpdGVyYXRvciB2YWx1ZVxuICAgICAgICAvLyBpcyBhdmFpbGFibGUuIHRoaXMgaXMgdXNlZnVsIHdoZW4gc2V0dXAgb2Ygc2V2ZXJhbCBwaXBlZCBnZW5lcmF0b3JzXG4gICAgICAgIC8vIG5lZWRzIHRvIGhhcHBlbiBpbiBsb2dpY2FsIG9yZGVyLCBpZS4gaW4gdGhlIG9yZGVyIGluIHdoaWNoIGlucHV0IHRvXG4gICAgICAgIC8vIHRvIGVhY2ggZ2VuZXJhdG9yIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgdGhpcy5zZXR1cCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmlyc3RSZXN1bHQgPSBnZW5lcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgaWYgKHN0YXJ0U2V0dXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0UmVzdWx0LnRoZW4oc3RhcnRTZXR1cCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdFJlc3VsdC50aGVuKChfcmVzdWx0KSA9PiByZXNvbHZlKHVuZGVmaW5lZCksIHJlamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBuZXh0KC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZpcnN0UmVzdWx0VXNlZCkge1xuICAgICAgICAgICAgdGhpcy5maXJzdFJlc3VsdFVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdG9yLm5leHQoLi4uYXJncyk7XG4gICAgfVxuICAgIGFzeW5jIHJldHVybih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0b3IucmV0dXJuKHZhbHVlKTtcbiAgICB9XG4gICAgYXN5bmMgdGhyb3coZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0b3IudGhyb3coZSk7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwaXBlR2VuZXJhdG9yV2l0aFNldHVwKHRvLCBnZW5lcmF0b3IsIHN0YXJ0U2V0dXAsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBnZW4gPSBuZXcgQXN5bmNHZW5lcmF0b3JXaXRoU2V0dXAoZ2VuZXJhdG9yLCBzdGFydFNldHVwKTtcbiAgICBjb25zdCBzZXR1cCA9IGF3YWl0IGdlbi5zZXR1cDtcbiAgICByZXR1cm4geyBvdXRwdXQ6IHRvKGdlbiwgc2V0dXAsIC4uLmFyZ3MpLCBzZXR1cCB9O1xufVxuIl0sIm5hbWVzIjpbIkl0ZXJhYmxlUmVhZGFibGVTdHJlYW0iLCJSZWFkYWJsZVN0cmVhbSIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImVuc3VyZVJlYWRlciIsInJlYWRlciIsImdldFJlYWRlciIsIm5leHQiLCJyZXN1bHQiLCJyZWFkIiwiZG9uZSIsInJlbGVhc2VMb2NrIiwidW5kZWZpbmVkIiwiZSIsInJldHVybiIsImxvY2tlZCIsImNhbmNlbFByb21pc2UiLCJjYW5jZWwiLCJ0aHJvdyIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJmcm9tUmVhZGFibGVTdHJlYW0iLCJzdHJlYW0iLCJzdGFydCIsImNvbnRyb2xsZXIiLCJwdW1wIiwidGhlbiIsImNsb3NlIiwiZW5xdWV1ZSIsImZyb21Bc3luY0dlbmVyYXRvciIsImdlbmVyYXRvciIsInB1bGwiLCJyZWFzb24iLCJhdGVlIiwiaXRlciIsImxlbmd0aCIsImJ1ZmZlcnMiLCJBcnJheSIsImZyb20iLCJtYXAiLCJtYWtlSXRlciIsImJ1ZmZlciIsInB1c2giLCJzaGlmdCIsImNvbmNhdCIsImZpcnN0Iiwic2Vjb25kIiwiaXNBcnJheSIsImNodW5rIiwia2V5IiwiZW50cmllcyIsIkVycm9yIiwiQXN5bmNHZW5lcmF0b3JXaXRoU2V0dXAiLCJzdGFydFNldHVwIiwic2V0dXAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZpcnN0UmVzdWx0IiwiX3Jlc3VsdCIsImFyZ3MiLCJmaXJzdFJlc3VsdFVzZWQiLCJwaXBlR2VuZXJhdG9yV2l0aFNldHVwIiwidG8iLCJnZW4iLCJvdXRwdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/tiktoken.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* binding */ encodingForModel),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding)\n/* harmony export */ });\n/* harmony import */ var js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-tiktoken/lite */ \"(rsc)/./node_modules/js-tiktoken/dist/lite.js\");\n/* harmony import */ var _async_caller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n\nconst cache = {};\nconst caller = /* #__PURE__ */ new _async_caller_js__WEBPACK_IMPORTED_MODULE_1__.AsyncCaller({});\nasync function getEncoding(encoding) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller.fetch(`https://tiktoken.pages.dev/js/${encoding}.json`).then((res)=>res.json()).then((data)=>new js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.Tiktoken(data)).catch((e)=>{\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return await cache[encoding];\n}\nasync function encodingForModel(model) {\n    return getEncoding((0,js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.getEncodingNameForModel)(model));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdGlrdG9rZW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRTtBQUN0QjtBQUNoRCxNQUFNRyxRQUFRLENBQUM7QUFDZixNQUFNQyxTQUFTLGFBQWEsR0FBRyxJQUFJRix5REFBV0EsQ0FBQyxDQUFDO0FBQ3pDLGVBQWVHLFlBQVlDLFFBQVE7SUFDdEMsSUFBSSxDQUFFQSxDQUFBQSxZQUFZSCxLQUFJLEdBQUk7UUFDdEJBLEtBQUssQ0FBQ0csU0FBUyxHQUFHRixPQUNiRyxLQUFLLENBQUMsQ0FBQyw4QkFBOEIsRUFBRUQsU0FBUyxLQUFLLENBQUMsRUFDdERFLElBQUksQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxJQUFJLElBQ3RCRixJQUFJLENBQUMsQ0FBQ0csT0FBUyxJQUFJWCxzREFBUUEsQ0FBQ1csT0FDNUJDLEtBQUssQ0FBQyxDQUFDQztZQUNSLE9BQU9WLEtBQUssQ0FBQ0csU0FBUztZQUN0QixNQUFNTztRQUNWO0lBQ0o7SUFDQSxPQUFPLE1BQU1WLEtBQUssQ0FBQ0csU0FBUztBQUNoQztBQUNPLGVBQWVRLGlCQUFpQkMsS0FBSztJQUN4QyxPQUFPVixZQUFZSix5RUFBdUJBLENBQUNjO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3Rpa3Rva2VuLmpzPzhlNmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlrdG9rZW4sIGdldEVuY29kaW5nTmFtZUZvck1vZGVsLCB9IGZyb20gXCJqcy10aWt0b2tlbi9saXRlXCI7XG5pbXBvcnQgeyBBc3luY0NhbGxlciB9IGZyb20gXCIuL2FzeW5jX2NhbGxlci5qc1wiO1xuY29uc3QgY2FjaGUgPSB7fTtcbmNvbnN0IGNhbGxlciA9IC8qICNfX1BVUkVfXyAqLyBuZXcgQXN5bmNDYWxsZXIoe30pO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEVuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgaWYgKCEoZW5jb2RpbmcgaW4gY2FjaGUpKSB7XG4gICAgICAgIGNhY2hlW2VuY29kaW5nXSA9IGNhbGxlclxuICAgICAgICAgICAgLmZldGNoKGBodHRwczovL3Rpa3Rva2VuLnBhZ2VzLmRldi9qcy8ke2VuY29kaW5nfS5qc29uYClcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4gbmV3IFRpa3Rva2VuKGRhdGEpKVxuICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgY2FjaGVbZW5jb2RpbmddO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBjYWNoZVtlbmNvZGluZ107XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jb2RpbmdGb3JNb2RlbChtb2RlbCkge1xuICAgIHJldHVybiBnZXRFbmNvZGluZyhnZXRFbmNvZGluZ05hbWVGb3JNb2RlbChtb2RlbCkpO1xufVxuIl0sIm5hbWVzIjpbIlRpa3Rva2VuIiwiZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwiLCJBc3luY0NhbGxlciIsImNhY2hlIiwiY2FsbGVyIiwiZ2V0RW5jb2RpbmciLCJlbmNvZGluZyIsImZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJkYXRhIiwiY2F0Y2giLCJlIiwiZW5jb2RpbmdGb3JNb2RlbCIsIm1vZGVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/documents.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/documents.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentTransformer),\n/* harmony export */   Document: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.Document),\n/* harmony export */   MappingDocumentTransformer: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/documents/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/documents/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2RvY3VtZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kb2N1bWVudHMuanM/NmQxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3QvZG9jdW1lbnRzL2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/documents.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/embeddings.js":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/core/embeddings.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* reexport safe */ _dist_embeddings_js__WEBPACK_IMPORTED_MODULE_0__.Embeddings)\n/* harmony export */ });\n/* harmony import */ var _dist_embeddings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/embeddings.js */ \"(rsc)/./node_modules/@langchain/core/dist/embeddings.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3MuanM/ZmEyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3QvZW1iZWRkaW5ncy5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/example_selectors.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/example_selectors.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseExampleSelector: () => (/* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseExampleSelector),\n/* harmony export */   BasePromptSelector: () => (/* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptSelector),\n/* harmony export */   ConditionalPromptSelector: () => (/* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.ConditionalPromptSelector),\n/* harmony export */   LengthBasedExampleSelector: () => (/* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.LengthBasedExampleSelector),\n/* harmony export */   SemanticSimilarityExampleSelector: () => (/* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.SemanticSimilarityExampleSelector),\n/* harmony export */   isChatModel: () => (/* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.isChatModel),\n/* harmony export */   isLLM: () => (/* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.isLLM)\n/* harmony export */ });\n/* harmony import */ var _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/example_selectors/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/example_selectors/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2V4YW1wbGVfc2VsZWN0b3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9leGFtcGxlX3NlbGVjdG9ycy5qcz81Njg0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9leGFtcGxlX3NlbGVjdG9ycy9pbmRleC5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/example_selectors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLangChain: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLangChain),\n/* harmony export */   BaseLanguageModel: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLanguageModel),\n/* harmony export */   calculateMaxTokens: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.calculateMaxTokens),\n/* harmony export */   getEmbeddingContextSize: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getEmbeddingContextSize),\n/* harmony export */   getModelContextSize: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getModelContextSize),\n/* harmony export */   getModelNameForTiktoken: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getModelNameForTiktoken)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9iYXNlLmpzPzc2NTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC9sYW5ndWFnZV9tb2RlbHMvYmFzZS5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/chat_models.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/chat_models.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.SimpleChatModel),\n/* harmony export */   createChatMessageChunkEncoderStream: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.createChatMessageChunkEncoderStream)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/chat_models.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9jaGF0X21vZGVscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9sYW5ndWFnZV9tb2RlbHMvY2hhdF9tb2RlbHMuanM/YzJhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L2xhbmd1YWdlX21vZGVscy9jaGF0X21vZGVscy5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/llms.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/llms.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLM: () => (/* reexport safe */ _dist_language_models_llms_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLM),\n/* harmony export */   LLM: () => (/* reexport safe */ _dist_language_models_llms_js__WEBPACK_IMPORTED_MODULE_0__.LLM)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_llms_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/llms.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/llms.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9sbG1zLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvbGFuZ3VhZ2VfbW9kZWxzL2xsbXMuanM/ZDE1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L2xhbmd1YWdlX21vZGVscy9sbG1zLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/messages.js":
/*!**************************************************!*\
  !*** ./node_modules/@langchain/core/messages.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessageChunk),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessageChunk),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessageChunk),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessagesToChatMessages)\n/* harmony export */ });\n/* harmony import */ var _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzLmpzPzgyOTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L21lc3NhZ2VzL2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/output_parsers.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/output_parsers.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.AsymmetricStructuredOutputParser),\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseLLMOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser),\n/* harmony export */   BytesOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BytesOutputParser),\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CustomListOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonMarkdownStructuredOutputParser),\n/* harmony export */   JsonOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.NumberedListOutputParser),\n/* harmony export */   OutputParserException: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException),\n/* harmony export */   StringOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.StringOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.StructuredOutputParser),\n/* harmony export */   XMLOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson),\n/* harmony export */   parseXMLMarkdown: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/output_parsers/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzLmpzPzE5MzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L291dHB1dF9wYXJzZXJzL2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/output_parsers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/outputs.js":
/*!*************************************************!*\
  !*** ./node_modules/@langchain/core/outputs.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGenerationChunk: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.ChatGenerationChunk),\n/* harmony export */   GenerationChunk: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk),\n/* harmony export */   RUN_KEY: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.RUN_KEY)\n/* harmony export */ });\n/* harmony import */ var _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvb3V0cHV0cy5qcz9hZjQzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9vdXRwdXRzLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/outputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/prompts.js":
/*!*************************************************!*\
  !*** ./node_modules/@langchain/core/prompts.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessagePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessagePromptTemplate),\n/* harmony export */   BaseChatPromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatPromptTemplate),\n/* harmony export */   BaseMessagePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessagePromptTemplate),\n/* harmony export */   BaseMessageStringPromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageStringPromptTemplate),\n/* harmony export */   BasePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptTemplate),\n/* harmony export */   BaseStringPromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseStringPromptTemplate),\n/* harmony export */   ChatMessagePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessagePromptTemplate),\n/* harmony export */   ChatPromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate),\n/* harmony export */   DEFAULT_FORMATTER_MAPPING: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_FORMATTER_MAPPING),\n/* harmony export */   DEFAULT_PARSER_MAPPING: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PARSER_MAPPING),\n/* harmony export */   FewShotChatMessagePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.FewShotChatMessagePromptTemplate),\n/* harmony export */   FewShotPromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.FewShotPromptTemplate),\n/* harmony export */   HumanMessagePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate),\n/* harmony export */   ImagePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.ImagePromptTemplate),\n/* harmony export */   MessagesPlaceholder: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.MessagesPlaceholder),\n/* harmony export */   PipelinePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.PipelinePromptTemplate),\n/* harmony export */   PromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate),\n/* harmony export */   SystemMessagePromptTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate),\n/* harmony export */   checkValidTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.checkValidTemplate),\n/* harmony export */   interpolateFString: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.interpolateFString),\n/* harmony export */   parseFString: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.parseFString),\n/* harmony export */   parseTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.parseTemplate),\n/* harmony export */   renderTemplate: () => (/* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.renderTemplate)\n/* harmony export */ });\n/* harmony import */ var _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/prompts/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompts/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3Byb21wdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9wcm9tcHRzLmpzPzc5NGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L3Byb21wdHMvaW5kZXguanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/runnables.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/runnables.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RouterRunnable),\n/* harmony export */   Runnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable),\n/* harmony export */   RunnableAssign: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding),\n/* harmony export */   RunnableBranch: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBranch),\n/* harmony export */   RunnableEach: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel),\n/* harmony export */   RunnablePassthrough: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePassthrough),\n/* harmony export */   RunnablePick: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence),\n/* harmony export */   RunnableWithFallbacks: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks),\n/* harmony export */   RunnableWithMessageHistory: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithMessageHistory),\n/* harmony export */   _coerceToRunnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable),\n/* harmony export */   ensureConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.getCallbackManagerForConfig),\n/* harmony export */   patchConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.patchConfig)\n/* harmony export */ });\n/* harmony import */ var _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/runnables/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3J1bm5hYmxlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvcnVubmFibGVzLmpzPzdhYjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L3J1bm5hYmxlcy9pbmRleC5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/runnables.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/chunk_array.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/utils/chunk_array.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* reexport safe */ _dist_utils_chunk_array_js__WEBPACK_IMPORTED_MODULE_0__.chunkArray)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_chunk_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/chunk_array.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2NodW5rX2FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9jaHVua19hcnJheS5qcz81ZjgyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvdXRpbHMvY2h1bmtfYXJyYXkuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/env.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/utils/env.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser),\n/* harmony export */   isDeno: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isDeno),\n/* harmony export */   isJsDom: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isJsDom),\n/* harmony export */   isNode: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isNode),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isWebWorker)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Vudi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Vudi5qcz80NjcxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvdXRpbHMvZW52LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/function_calling.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/utils/function_calling.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToOpenAIFunction: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAIFunction),\n/* harmony export */   convertToOpenAITool: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAITool)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/function_calling.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9mdW5jdGlvbl9jYWxsaW5nLmpzPzhjODkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC91dGlscy9mdW5jdGlvbl9jYWxsaW5nLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/function_calling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/json_patch.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/utils/json_patch.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyPatch: () => (/* reexport safe */ _dist_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   compare: () => (/* reexport safe */ _dist_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_0__.compare)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/json_patch.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2pzb25fcGF0Y2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9qc29uX3BhdGNoLmpzPzRiM2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC91dGlscy9qc29uX3BhdGNoLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/json_patch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/tiktoken.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/utils/tiktoken.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* reexport safe */ _dist_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_0__.encodingForModel),\n/* harmony export */   getEncoding: () => (/* reexport safe */ _dist_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_0__.getEncoding)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/tiktoken.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL3Rpa3Rva2VuLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvdGlrdG9rZW4uanM/YzQ4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L3V0aWxzL3Rpa3Rva2VuLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/azure/chat_models.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/azure/chat_models.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* binding */ AzureChatOpenAI)\n/* harmony export */ });\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chat_models.js */ \"(rsc)/./node_modules/@langchain/openai/dist/chat_models.js\");\n\nclass AzureChatOpenAI extends _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI {\n    _llmType() {\n        return \"azure_openai\";\n    }\n    get lc_aliases() {\n        return {\n            openAIApiKey: \"openai_api_key\",\n            openAIApiVersion: \"openai_api_version\",\n            openAIBasePath: \"openai_api_base\"\n        };\n    }\n    constructor(fields){\n        // assume the base URL does not contain \"openai\" nor \"deployments\" prefix\n        let basePath = fields?.openAIBasePath ?? \"\";\n        if (!basePath.endsWith(\"/\")) basePath += \"/\";\n        if (!basePath.endsWith(\"openai/deployments\")) basePath += \"openai/deployments\";\n        const newFields = fields ? {\n            ...fields\n        } : fields;\n        if (newFields) {\n            newFields.azureOpenAIBasePath = basePath;\n            newFields.azureOpenAIApiDeploymentName = newFields.deploymentName;\n            newFields.azureOpenAIApiKey = newFields.openAIApiKey;\n            newFields.azureOpenAIApiVersion = newFields.openAIApiVersion;\n        }\n        super(newFields);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const json = super.toJSON();\n        function isRecord(obj) {\n            return typeof obj === \"object\" && obj != null;\n        }\n        if (isRecord(json) && isRecord(json.kwargs)) {\n            delete json.kwargs.azure_openai_base_path;\n            delete json.kwargs.azure_openai_api_deployment_name;\n            delete json.kwargs.azure_openai_api_key;\n            delete json.kwargs.azure_openai_api_version;\n            delete json.kwargs.azure_open_ai_base_path;\n        }\n        return json;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9henVyZS9jaGF0X21vZGVscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQztBQUN4QyxNQUFNQyx3QkFBd0JELHVEQUFVQTtJQUMzQ0UsV0FBVztRQUNQLE9BQU87SUFDWDtJQUNBLElBQUlDLGFBQWE7UUFDYixPQUFPO1lBQ0hDLGNBQWM7WUFDZEMsa0JBQWtCO1lBQ2xCQyxnQkFBZ0I7UUFDcEI7SUFDSjtJQUNBQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIseUVBQXlFO1FBQ3pFLElBQUlDLFdBQVdELFFBQVFGLGtCQUFrQjtRQUN6QyxJQUFJLENBQUNHLFNBQVNDLFFBQVEsQ0FBQyxNQUNuQkQsWUFBWTtRQUNoQixJQUFJLENBQUNBLFNBQVNDLFFBQVEsQ0FBQyx1QkFDbkJELFlBQVk7UUFDaEIsTUFBTUUsWUFBWUgsU0FBUztZQUFFLEdBQUdBLE1BQU07UUFBQyxJQUFJQTtRQUMzQyxJQUFJRyxXQUFXO1lBQ1hBLFVBQVVDLG1CQUFtQixHQUFHSDtZQUNoQ0UsVUFBVUUsNEJBQTRCLEdBQUdGLFVBQVVHLGNBQWM7WUFDakVILFVBQVVJLGlCQUFpQixHQUFHSixVQUFVUCxZQUFZO1lBQ3BETyxVQUFVSyxxQkFBcUIsR0FBR0wsVUFBVU4sZ0JBQWdCO1FBQ2hFO1FBQ0EsS0FBSyxDQUFDTTtJQUNWO0lBQ0EsOERBQThEO0lBQzlETSxTQUFTO1FBQ0wsTUFBTUMsT0FBTyxLQUFLLENBQUNEO1FBQ25CLFNBQVNFLFNBQVNDLEdBQUc7WUFDakIsT0FBTyxPQUFPQSxRQUFRLFlBQVlBLE9BQU87UUFDN0M7UUFDQSxJQUFJRCxTQUFTRCxTQUFTQyxTQUFTRCxLQUFLRyxNQUFNLEdBQUc7WUFDekMsT0FBT0gsS0FBS0csTUFBTSxDQUFDQyxzQkFBc0I7WUFDekMsT0FBT0osS0FBS0csTUFBTSxDQUFDRSxnQ0FBZ0M7WUFDbkQsT0FBT0wsS0FBS0csTUFBTSxDQUFDRyxvQkFBb0I7WUFDdkMsT0FBT04sS0FBS0csTUFBTSxDQUFDSSx3QkFBd0I7WUFDM0MsT0FBT1AsS0FBS0csTUFBTSxDQUFDSyx1QkFBdUI7UUFDOUM7UUFDQSxPQUFPUjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9henVyZS9jaGF0X21vZGVscy5qcz9iMzYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYXRPcGVuQUkgfSBmcm9tIFwiLi4vY2hhdF9tb2RlbHMuanNcIjtcbmV4cG9ydCBjbGFzcyBBenVyZUNoYXRPcGVuQUkgZXh0ZW5kcyBDaGF0T3BlbkFJIHtcbiAgICBfbGxtVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiYXp1cmVfb3BlbmFpXCI7XG4gICAgfVxuICAgIGdldCBsY19hbGlhc2VzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3BlbkFJQXBpS2V5OiBcIm9wZW5haV9hcGlfa2V5XCIsXG4gICAgICAgICAgICBvcGVuQUlBcGlWZXJzaW9uOiBcIm9wZW5haV9hcGlfdmVyc2lvblwiLFxuICAgICAgICAgICAgb3BlbkFJQmFzZVBhdGg6IFwib3BlbmFpX2FwaV9iYXNlXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICAvLyBhc3N1bWUgdGhlIGJhc2UgVVJMIGRvZXMgbm90IGNvbnRhaW4gXCJvcGVuYWlcIiBub3IgXCJkZXBsb3ltZW50c1wiIHByZWZpeFxuICAgICAgICBsZXQgYmFzZVBhdGggPSBmaWVsZHM/Lm9wZW5BSUJhc2VQYXRoID8/IFwiXCI7XG4gICAgICAgIGlmICghYmFzZVBhdGguZW5kc1dpdGgoXCIvXCIpKVxuICAgICAgICAgICAgYmFzZVBhdGggKz0gXCIvXCI7XG4gICAgICAgIGlmICghYmFzZVBhdGguZW5kc1dpdGgoXCJvcGVuYWkvZGVwbG95bWVudHNcIikpXG4gICAgICAgICAgICBiYXNlUGF0aCArPSBcIm9wZW5haS9kZXBsb3ltZW50c1wiO1xuICAgICAgICBjb25zdCBuZXdGaWVsZHMgPSBmaWVsZHMgPyB7IC4uLmZpZWxkcyB9IDogZmllbGRzO1xuICAgICAgICBpZiAobmV3RmllbGRzKSB7XG4gICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlCYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUgPSBuZXdGaWVsZHMuZGVwbG95bWVudE5hbWU7XG4gICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlLZXkgPSBuZXdGaWVsZHMub3BlbkFJQXBpS2V5O1xuICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbiA9IG5ld0ZpZWxkcy5vcGVuQUlBcGlWZXJzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKG5ld0ZpZWxkcyk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBqc29uID0gc3VwZXIudG9KU09OKCk7XG4gICAgICAgIGZ1bmN0aW9uIGlzUmVjb3JkKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgb2JqICE9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVjb3JkKGpzb24pICYmIGlzUmVjb3JkKGpzb24ua3dhcmdzKSkge1xuICAgICAgICAgICAgZGVsZXRlIGpzb24ua3dhcmdzLmF6dXJlX29wZW5haV9iYXNlX3BhdGg7XG4gICAgICAgICAgICBkZWxldGUganNvbi5rd2FyZ3MuYXp1cmVfb3BlbmFpX2FwaV9kZXBsb3ltZW50X25hbWU7XG4gICAgICAgICAgICBkZWxldGUganNvbi5rd2FyZ3MuYXp1cmVfb3BlbmFpX2FwaV9rZXk7XG4gICAgICAgICAgICBkZWxldGUganNvbi5rd2FyZ3MuYXp1cmVfb3BlbmFpX2FwaV92ZXJzaW9uO1xuICAgICAgICAgICAgZGVsZXRlIGpzb24ua3dhcmdzLmF6dXJlX29wZW5fYWlfYmFzZV9wYXRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJDaGF0T3BlbkFJIiwiQXp1cmVDaGF0T3BlbkFJIiwiX2xsbVR5cGUiLCJsY19hbGlhc2VzIiwib3BlbkFJQXBpS2V5Iiwib3BlbkFJQXBpVmVyc2lvbiIsIm9wZW5BSUJhc2VQYXRoIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJiYXNlUGF0aCIsImVuZHNXaXRoIiwibmV3RmllbGRzIiwiYXp1cmVPcGVuQUlCYXNlUGF0aCIsImF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUiLCJkZXBsb3ltZW50TmFtZSIsImF6dXJlT3BlbkFJQXBpS2V5IiwiYXp1cmVPcGVuQUlBcGlWZXJzaW9uIiwidG9KU09OIiwianNvbiIsImlzUmVjb3JkIiwib2JqIiwia3dhcmdzIiwiYXp1cmVfb3BlbmFpX2Jhc2VfcGF0aCIsImF6dXJlX29wZW5haV9hcGlfZGVwbG95bWVudF9uYW1lIiwiYXp1cmVfb3BlbmFpX2FwaV9rZXkiLCJhenVyZV9vcGVuYWlfYXBpX3ZlcnNpb24iLCJhenVyZV9vcGVuX2FpX2Jhc2VfcGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/azure/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/azure/llms.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/azure/llms.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureOpenAI: () => (/* binding */ AzureOpenAI)\n/* harmony export */ });\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../llms.js */ \"(rsc)/./node_modules/@langchain/openai/dist/llms.js\");\n\nclass AzureOpenAI extends _llms_js__WEBPACK_IMPORTED_MODULE_0__.OpenAI {\n    get lc_aliases() {\n        return {\n            openAIApiKey: \"openai_api_key\",\n            openAIApiVersion: \"openai_api_version\",\n            openAIBasePath: \"openai_api_base\"\n        };\n    }\n    constructor(fields){\n        // assume the base URL does not contain \"openai\" nor \"deployments\" prefix\n        let basePath = fields?.openAIBasePath ?? \"\";\n        if (!basePath.endsWith(\"/\")) basePath += \"/\";\n        if (!basePath.endsWith(\"openai/deployments\")) basePath += \"openai/deployments\";\n        const newFields = fields ? {\n            ...fields\n        } : fields;\n        if (newFields) {\n            newFields.azureOpenAIBasePath = basePath;\n            newFields.azureOpenAIApiDeploymentName = newFields.deploymentName;\n            newFields.azureOpenAIApiKey = newFields.openAIApiKey;\n            newFields.azureOpenAIApiVersion = newFields.openAIApiVersion;\n        }\n        super(newFields);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const json = super.toJSON();\n        function isRecord(obj) {\n            return typeof obj === \"object\" && obj != null;\n        }\n        if (isRecord(json) && isRecord(json.kwargs)) {\n            delete json.kwargs.azure_openai_base_path;\n            delete json.kwargs.azure_openai_api_deployment_name;\n            delete json.kwargs.azure_openai_api_key;\n            delete json.kwargs.azure_openai_api_version;\n            delete json.kwargs.azure_open_ai_base_path;\n        }\n        return json;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9henVyZS9sbG1zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9DO0FBQzdCLE1BQU1DLG9CQUFvQkQsNENBQU1BO0lBQ25DLElBQUlFLGFBQWE7UUFDYixPQUFPO1lBQ0hDLGNBQWM7WUFDZEMsa0JBQWtCO1lBQ2xCQyxnQkFBZ0I7UUFDcEI7SUFDSjtJQUNBQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIseUVBQXlFO1FBQ3pFLElBQUlDLFdBQVdELFFBQVFGLGtCQUFrQjtRQUN6QyxJQUFJLENBQUNHLFNBQVNDLFFBQVEsQ0FBQyxNQUNuQkQsWUFBWTtRQUNoQixJQUFJLENBQUNBLFNBQVNDLFFBQVEsQ0FBQyx1QkFDbkJELFlBQVk7UUFDaEIsTUFBTUUsWUFBWUgsU0FBUztZQUFFLEdBQUdBLE1BQU07UUFBQyxJQUFJQTtRQUMzQyxJQUFJRyxXQUFXO1lBQ1hBLFVBQVVDLG1CQUFtQixHQUFHSDtZQUNoQ0UsVUFBVUUsNEJBQTRCLEdBQUdGLFVBQVVHLGNBQWM7WUFDakVILFVBQVVJLGlCQUFpQixHQUFHSixVQUFVUCxZQUFZO1lBQ3BETyxVQUFVSyxxQkFBcUIsR0FBR0wsVUFBVU4sZ0JBQWdCO1FBQ2hFO1FBQ0EsS0FBSyxDQUFDTTtJQUNWO0lBQ0EsOERBQThEO0lBQzlETSxTQUFTO1FBQ0wsTUFBTUMsT0FBTyxLQUFLLENBQUNEO1FBQ25CLFNBQVNFLFNBQVNDLEdBQUc7WUFDakIsT0FBTyxPQUFPQSxRQUFRLFlBQVlBLE9BQU87UUFDN0M7UUFDQSxJQUFJRCxTQUFTRCxTQUFTQyxTQUFTRCxLQUFLRyxNQUFNLEdBQUc7WUFDekMsT0FBT0gsS0FBS0csTUFBTSxDQUFDQyxzQkFBc0I7WUFDekMsT0FBT0osS0FBS0csTUFBTSxDQUFDRSxnQ0FBZ0M7WUFDbkQsT0FBT0wsS0FBS0csTUFBTSxDQUFDRyxvQkFBb0I7WUFDdkMsT0FBT04sS0FBS0csTUFBTSxDQUFDSSx3QkFBd0I7WUFDM0MsT0FBT1AsS0FBS0csTUFBTSxDQUFDSyx1QkFBdUI7UUFDOUM7UUFDQSxPQUFPUjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9henVyZS9sbG1zLmpzP2E4ZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BlbkFJIH0gZnJvbSBcIi4uL2xsbXMuanNcIjtcbmV4cG9ydCBjbGFzcyBBenVyZU9wZW5BSSBleHRlbmRzIE9wZW5BSSB7XG4gICAgZ2V0IGxjX2FsaWFzZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGVuQUlBcGlLZXk6IFwib3BlbmFpX2FwaV9rZXlcIixcbiAgICAgICAgICAgIG9wZW5BSUFwaVZlcnNpb246IFwib3BlbmFpX2FwaV92ZXJzaW9uXCIsXG4gICAgICAgICAgICBvcGVuQUlCYXNlUGF0aDogXCJvcGVuYWlfYXBpX2Jhc2VcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIC8vIGFzc3VtZSB0aGUgYmFzZSBVUkwgZG9lcyBub3QgY29udGFpbiBcIm9wZW5haVwiIG5vciBcImRlcGxveW1lbnRzXCIgcHJlZml4XG4gICAgICAgIGxldCBiYXNlUGF0aCA9IGZpZWxkcz8ub3BlbkFJQmFzZVBhdGggPz8gXCJcIjtcbiAgICAgICAgaWYgKCFiYXNlUGF0aC5lbmRzV2l0aChcIi9cIikpXG4gICAgICAgICAgICBiYXNlUGF0aCArPSBcIi9cIjtcbiAgICAgICAgaWYgKCFiYXNlUGF0aC5lbmRzV2l0aChcIm9wZW5haS9kZXBsb3ltZW50c1wiKSlcbiAgICAgICAgICAgIGJhc2VQYXRoICs9IFwib3BlbmFpL2RlcGxveW1lbnRzXCI7XG4gICAgICAgIGNvbnN0IG5ld0ZpZWxkcyA9IGZpZWxkcyA/IHsgLi4uZmllbGRzIH0gOiBmaWVsZHM7XG4gICAgICAgIGlmIChuZXdGaWVsZHMpIHtcbiAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSA9IG5ld0ZpZWxkcy5kZXBsb3ltZW50TmFtZTtcbiAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaUtleSA9IG5ld0ZpZWxkcy5vcGVuQUlBcGlLZXk7XG4gICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlWZXJzaW9uID0gbmV3RmllbGRzLm9wZW5BSUFwaVZlcnNpb247XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIobmV3RmllbGRzKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSBzdXBlci50b0pTT04oKTtcbiAgICAgICAgZnVuY3Rpb24gaXNSZWNvcmQob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWNvcmQoanNvbikgJiYgaXNSZWNvcmQoanNvbi5rd2FyZ3MpKSB7XG4gICAgICAgICAgICBkZWxldGUganNvbi5rd2FyZ3MuYXp1cmVfb3BlbmFpX2Jhc2VfcGF0aDtcbiAgICAgICAgICAgIGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuYWlfYXBpX2RlcGxveW1lbnRfbmFtZTtcbiAgICAgICAgICAgIGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuYWlfYXBpX2tleTtcbiAgICAgICAgICAgIGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuYWlfYXBpX3ZlcnNpb247XG4gICAgICAgICAgICBkZWxldGUganNvbi5rd2FyZ3MuYXp1cmVfb3Blbl9haV9iYXNlX3BhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIk9wZW5BSSIsIkF6dXJlT3BlbkFJIiwibGNfYWxpYXNlcyIsIm9wZW5BSUFwaUtleSIsIm9wZW5BSUFwaVZlcnNpb24iLCJvcGVuQUlCYXNlUGF0aCIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiYmFzZVBhdGgiLCJlbmRzV2l0aCIsIm5ld0ZpZWxkcyIsImF6dXJlT3BlbkFJQmFzZVBhdGgiLCJhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lIiwiZGVwbG95bWVudE5hbWUiLCJhenVyZU9wZW5BSUFwaUtleSIsImF6dXJlT3BlbkFJQXBpVmVyc2lvbiIsInRvSlNPTiIsImpzb24iLCJpc1JlY29yZCIsIm9iaiIsImt3YXJncyIsImF6dXJlX29wZW5haV9iYXNlX3BhdGgiLCJhenVyZV9vcGVuYWlfYXBpX2RlcGxveW1lbnRfbmFtZSIsImF6dXJlX29wZW5haV9hcGlfa2V5IiwiYXp1cmVfb3BlbmFpX2FwaV92ZXJzaW9uIiwiYXp1cmVfb3Blbl9haV9iYXNlX3BhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/azure/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/chat_models.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/chat_models.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOpenAI: () => (/* binding */ ChatOpenAI),\n/* harmony export */   messageToOpenAIRole: () => (/* binding */ messageToOpenAIRole)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/@langchain/core/language_models/chat_models.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n/* harmony import */ var _utils_openai_format_fndef_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/openai-format-fndef.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai-format-fndef.js\");\n\n\n\n\n\n\n\n\n\nfunction extractGenericMessageCustomRole(message) {\n    if (message.role !== \"system\" && message.role !== \"assistant\" && message.role !== \"user\" && message.role !== \"function\" && message.role !== \"tool\") {\n        console.warn(`Unknown message role: ${message.role}`);\n    }\n    return message.role;\n}\nfunction messageToOpenAIRole(message) {\n    const type = message._getType();\n    switch(type){\n        case \"system\":\n            return \"system\";\n        case \"ai\":\n            return \"assistant\";\n        case \"human\":\n            return \"user\";\n        case \"function\":\n            return \"function\";\n        case \"tool\":\n            return \"tool\";\n        case \"generic\":\n            {\n                if (!_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage.isInstance(message)) throw new Error(\"Invalid generic chat message\");\n                return extractGenericMessageCustomRole(message);\n            }\n        default:\n            throw new Error(`Unknown message type: ${type}`);\n    }\n}\nfunction openAIResponseToChatMessage(message) {\n    switch(message.role){\n        case \"assistant\":\n            return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(message.content || \"\", {\n                function_call: message.function_call,\n                tool_calls: message.tool_calls\n            });\n        default:\n            return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage(message.content || \"\", message.role ?? \"unknown\");\n    }\n}\nfunction _convertDeltaToMessageChunk(// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndelta, defaultRole) {\n    const role = delta.role ?? defaultRole;\n    const content = delta.content ?? \"\";\n    let additional_kwargs;\n    if (delta.function_call) {\n        additional_kwargs = {\n            function_call: delta.function_call\n        };\n    } else if (delta.tool_calls) {\n        additional_kwargs = {\n            tool_calls: delta.tool_calls\n        };\n    } else {\n        additional_kwargs = {};\n    }\n    if (role === \"user\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessageChunk({\n            content\n        });\n    } else if (role === \"assistant\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk({\n            content,\n            additional_kwargs\n        });\n    } else if (role === \"system\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk({\n            content\n        });\n    } else if (role === \"function\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.FunctionMessageChunk({\n            content,\n            additional_kwargs,\n            name: delta.name\n        });\n    } else if (role === \"tool\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ToolMessageChunk({\n            content,\n            additional_kwargs,\n            tool_call_id: delta.tool_call_id\n        });\n    } else {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessageChunk({\n            content,\n            role\n        });\n    }\n}\nfunction convertMessagesToOpenAIParams(messages) {\n    // TODO: Function messages do not support array content, fix cast\n    return messages.map((message)=>({\n            role: messageToOpenAIRole(message),\n            content: message.content,\n            name: message.name,\n            function_call: message.additional_kwargs.function_call,\n            tool_calls: message.additional_kwargs.tool_calls,\n            tool_call_id: message.tool_call_id\n        }));\n}\n/**\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n * `AZURE_OPENAI_BASE_PATH` is optional and will override `AZURE_OPENAI_API_INSTANCE_NAME` if you need to use a custom endpoint.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createChatCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * // Create a new instance of ChatOpenAI with specific temperature and model name settings\n * const model = new ChatOpenAI({\n *   temperature: 0.9,\n *   modelName: \"ft:gpt-3.5-turbo-0613:{ORG_NAME}::{MODEL_ID}\",\n * });\n *\n * // Invoke the model with a message and await the response\n * const message = await model.invoke(\"Hi there!\");\n *\n * // Log the response to the console\n * console.log(message);\n *\n * ```\n */ class ChatOpenAI extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_3__.BaseChatModel {\n    static lc_name() {\n        return \"ChatOpenAI\";\n    }\n    get callKeys() {\n        return [\n            ...super.callKeys,\n            \"options\",\n            \"function_call\",\n            \"functions\",\n            \"tools\",\n            \"tool_choice\",\n            \"promptIndex\",\n            \"response_format\",\n            \"seed\"\n        ];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\"\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\"\n        };\n    }\n    constructor(fields, /** @deprecated */ configuration){\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logprobs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topLogprobs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey = fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName = fields?.azureOpenAIApiDeploymentName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\");\n        this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization = fields?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.maxTokens = fields?.maxTokens;\n        this.logprobs = fields?.logprobs;\n        this.topLogprobs = fields?.topLogprobs;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stop;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.openAIApiKey = this.openAIApiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ?? fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ?? fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ invocationParams(options) {\n        function isStructuredToolArray(tools) {\n            return tools !== undefined && tools.every((tool)=>Array.isArray(tool.lc_namespace));\n        }\n        const params = {\n            model: this.modelName,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            max_tokens: this.maxTokens === -1 ? undefined : this.maxTokens,\n            logprobs: this.logprobs,\n            top_logprobs: this.topLogprobs,\n            n: this.n,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stop,\n            user: this.user,\n            stream: this.streaming,\n            functions: options?.functions,\n            function_call: options?.function_call,\n            tools: isStructuredToolArray(options?.tools) ? options?.tools.map(_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_4__.convertToOpenAITool) : options?.tools,\n            tool_choice: options?.tool_choice,\n            response_format: options?.response_format,\n            seed: options?.seed,\n            ...this.modelKwargs\n        };\n        return params;\n    }\n    /** @ignore */ _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    async *_streamResponseChunks(messages, options, runManager) {\n        const messagesMapped = convertMessagesToOpenAIParams(messages);\n        const params = {\n            ...this.invocationParams(options),\n            messages: messagesMapped,\n            stream: true\n        };\n        let defaultRole;\n        const streamIterable = await this.completionWithRetry(params, options);\n        for await (const data of streamIterable){\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const { delta } = choice;\n            if (!delta) {\n                continue;\n            }\n            const chunk = _convertDeltaToMessageChunk(delta, defaultRole);\n            defaultRole = delta.role ?? defaultRole;\n            const newTokenIndices = {\n                prompt: options.promptIndex ?? 0,\n                completion: choice.index ?? 0\n            };\n            if (typeof chunk.content !== \"string\") {\n                console.log(\"[WARNING]: Received non-string content from OpenAI. This is currently not supported.\");\n                continue;\n            }\n            const generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.ChatGenerationChunk({\n                message: chunk,\n                text: chunk.content,\n                generationInfo: newTokenIndices\n            });\n            yield generationChunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices, undefined, undefined, undefined, {\n                chunk: generationChunk\n            });\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    /**\n     * Get the identifying parameters for the model\n     *\n     */ identifyingParams() {\n        return this._identifyingParams();\n    }\n    /** @ignore */ async _generate(messages, options, runManager) {\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        const messagesMapped = convertMessagesToOpenAIParams(messages);\n        if (params.stream) {\n            const stream = this._streamResponseChunks(messages, options, runManager);\n            const finalChunks = {};\n            for await (const chunk of stream){\n                const index = chunk.generationInfo?.completion ?? 0;\n                if (finalChunks[index] === undefined) {\n                    finalChunks[index] = chunk;\n                } else {\n                    finalChunks[index] = finalChunks[index].concat(chunk);\n                }\n            }\n            const generations = Object.entries(finalChunks).sort(([aKey], [bKey])=>parseInt(aKey, 10) - parseInt(bKey, 10)).map(([_, value])=>value);\n            const { functions, function_call } = this.invocationParams(options);\n            // OpenAI does not support token usage report under stream mode,\n            // fallback to estimation.\n            const promptTokenUsage = await this.getEstimatedTokenCountFromPrompt(messages, functions, function_call);\n            const completionTokenUsage = await this.getNumTokensFromGenerations(generations);\n            tokenUsage.promptTokens = promptTokenUsage;\n            tokenUsage.completionTokens = completionTokenUsage;\n            tokenUsage.totalTokens = promptTokenUsage + completionTokenUsage;\n            return {\n                generations,\n                llmOutput: {\n                    estimatedTokenUsage: tokenUsage\n                }\n            };\n        } else {\n            const data = await this.completionWithRetry({\n                ...params,\n                stream: false,\n                messages: messagesMapped\n            }, {\n                signal: options?.signal,\n                ...options?.options\n            });\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens } = data?.usage ?? {};\n            if (completionTokens) {\n                tokenUsage.completionTokens = (tokenUsage.completionTokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n            }\n            const generations = [];\n            for (const part of data?.choices ?? []){\n                const text = part.message?.content ?? \"\";\n                const generation = {\n                    text,\n                    message: openAIResponseToChatMessage(part.message ?? {\n                        role: \"assistant\"\n                    })\n                };\n                generation.generationInfo = {\n                    ...part.finish_reason ? {\n                        finish_reason: part.finish_reason\n                    } : {},\n                    ...part.logprobs ? {\n                        logprobs: part.logprobs\n                    } : {}\n                };\n                generations.push(generation);\n            }\n            return {\n                generations,\n                llmOutput: {\n                    tokenUsage\n                }\n            };\n        }\n    }\n    /**\n     * Estimate the number of tokens a prompt will use.\n     * Modified from: https://github.com/hmarr/openai-chat-tokens/blob/main/src/index.ts\n     */ async getEstimatedTokenCountFromPrompt(messages, functions, function_call) {\n        // It appears that if functions are present, the first system message is padded with a trailing newline. This\n        // was inferred by trying lots of combinations of messages and functions and seeing what the token counts were.\n        let tokens = (await this.getNumTokensFromMessages(messages)).totalCount;\n        // If there are functions, add the function definitions as they count towards token usage\n        if (functions && function_call !== \"auto\") {\n            const promptDefinitions = (0,_utils_openai_format_fndef_js__WEBPACK_IMPORTED_MODULE_7__.formatFunctionDefinitions)(functions);\n            tokens += await this.getNumTokens(promptDefinitions);\n            tokens += 9; // Add nine per completion\n        }\n        // If there's a system message _and_ functions are present, subtract four tokens. I assume this is because\n        // functions typically add a system message, but reuse the first one if it's already there. This offsets\n        // the extra 9 tokens added by the function definitions.\n        if (functions && messages.find((m)=>m._getType() === \"system\")) {\n            tokens -= 4;\n        }\n        // If function_call is 'none', add one token.\n        // If it's a FunctionCall object, add 4 + the number of tokens in the function name.\n        // If it's undefined or 'auto', don't add anything.\n        if (function_call === \"none\") {\n            tokens += 1;\n        } else if (typeof function_call === \"object\") {\n            tokens += await this.getNumTokens(function_call.name) + 4;\n        }\n        return tokens;\n    }\n    /**\n     * Estimate the number of tokens an array of generations have used.\n     */ async getNumTokensFromGenerations(generations) {\n        const generationUsages = await Promise.all(generations.map(async (generation)=>{\n            if (generation.message.additional_kwargs?.function_call) {\n                return (await this.getNumTokensFromMessages([\n                    generation.message\n                ])).countPerMessage[0];\n            } else {\n                return await this.getNumTokens(generation.message.content);\n            }\n        }));\n        return generationUsages.reduce((a, b)=>a + b, 0);\n    }\n    async getNumTokensFromMessages(messages) {\n        let totalCount = 0;\n        let tokensPerMessage = 0;\n        let tokensPerName = 0;\n        // From: https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb\n        if (this.modelName === \"gpt-3.5-turbo-0301\") {\n            tokensPerMessage = 4;\n            tokensPerName = -1;\n        } else {\n            tokensPerMessage = 3;\n            tokensPerName = 1;\n        }\n        const countPerMessage = await Promise.all(messages.map(async (message)=>{\n            const textCount = await this.getNumTokens(message.content);\n            const roleCount = await this.getNumTokens(messageToOpenAIRole(message));\n            const nameCount = message.name !== undefined ? tokensPerName + await this.getNumTokens(message.name) : 0;\n            let count = textCount + tokensPerMessage + roleCount + nameCount;\n            // From: https://github.com/hmarr/openai-chat-tokens/blob/main/src/index.ts messageTokenEstimate\n            const openAIMessage = message;\n            if (openAIMessage._getType() === \"function\") {\n                count -= 2;\n            }\n            if (openAIMessage.additional_kwargs?.function_call) {\n                count += 3;\n            }\n            if (openAIMessage?.additional_kwargs.function_call?.name) {\n                count += await this.getNumTokens(openAIMessage.additional_kwargs.function_call?.name);\n            }\n            if (openAIMessage.additional_kwargs.function_call?.arguments) {\n                count += await this.getNumTokens(// Remove newlines and spaces\n                JSON.stringify(JSON.parse(openAIMessage.additional_kwargs.function_call?.arguments)));\n            }\n            totalCount += count;\n            return count;\n        }));\n        totalCount += 3; // every reply is primed with <|start|>assistant<|message|>\n        return {\n            totalCount,\n            countPerMessage\n        };\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.chat.completions.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_6__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_5__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_8__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n    /** @ignore */ _combineLLMOutput(...llmOutputs) {\n        return llmOutputs.reduce((acc, llmOutput)=>{\n            if (llmOutput && llmOutput.tokenUsage) {\n                acc.tokenUsage.completionTokens += llmOutput.tokenUsage.completionTokens ?? 0;\n                acc.tokenUsage.promptTokens += llmOutput.tokenUsage.promptTokens ?? 0;\n                acc.tokenUsage.totalTokens += llmOutput.tokenUsage.totalTokens ?? 0;\n            }\n            return acc;\n        }, {\n            tokenUsage: {\n                completionTokens: 0,\n                promptTokens: 0,\n                totalTokens: 0\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9jaGF0X21vZGVscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFnRDtBQUNvSTtBQUNySDtBQUNJO0FBQ1U7QUFDQTtBQUM5QjtBQUNXO0FBQ2tCO0FBQzVFLFNBQVNpQixnQ0FBZ0NDLE9BQU87SUFDNUMsSUFBSUEsUUFBUUMsSUFBSSxLQUFLLFlBQ2pCRCxRQUFRQyxJQUFJLEtBQUssZUFDakJELFFBQVFDLElBQUksS0FBSyxVQUNqQkQsUUFBUUMsSUFBSSxLQUFLLGNBQ2pCRCxRQUFRQyxJQUFJLEtBQUssUUFBUTtRQUN6QkMsUUFBUUMsSUFBSSxDQUFDLENBQUMsc0JBQXNCLEVBQUVILFFBQVFDLElBQUksQ0FBQyxDQUFDO0lBQ3hEO0lBQ0EsT0FBT0QsUUFBUUMsSUFBSTtBQUN2QjtBQUNPLFNBQVNHLG9CQUFvQkosT0FBTztJQUN2QyxNQUFNSyxPQUFPTCxRQUFRTSxRQUFRO0lBQzdCLE9BQVFEO1FBQ0osS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFBVztnQkFDWixJQUFJLENBQUNuQixpRUFBV0EsQ0FBQ3FCLFVBQVUsQ0FBQ1AsVUFDeEIsTUFBTSxJQUFJUSxNQUFNO2dCQUNwQixPQUFPVCxnQ0FBZ0NDO1lBQzNDO1FBQ0E7WUFDSSxNQUFNLElBQUlRLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRUgsS0FBSyxDQUFDO0lBQ3ZEO0FBQ0o7QUFDQSxTQUFTSSw0QkFBNEJULE9BQU87SUFDeEMsT0FBUUEsUUFBUUMsSUFBSTtRQUNoQixLQUFLO1lBQ0QsT0FBTyxJQUFJakIsK0RBQVNBLENBQUNnQixRQUFRVSxPQUFPLElBQUksSUFBSTtnQkFDeENDLGVBQWVYLFFBQVFXLGFBQWE7Z0JBQ3BDQyxZQUFZWixRQUFRWSxVQUFVO1lBQ2xDO1FBQ0o7WUFDSSxPQUFPLElBQUkxQixpRUFBV0EsQ0FBQ2MsUUFBUVUsT0FBTyxJQUFJLElBQUlWLFFBQVFDLElBQUksSUFBSTtJQUN0RTtBQUNKO0FBQ0EsU0FBU1ksNEJBQ1QsOERBQThEO0FBQzlEQyxLQUFLLEVBQUVDLFdBQVc7SUFDZCxNQUFNZCxPQUFPYSxNQUFNYixJQUFJLElBQUljO0lBQzNCLE1BQU1MLFVBQVVJLE1BQU1KLE9BQU8sSUFBSTtJQUNqQyxJQUFJTTtJQUNKLElBQUlGLE1BQU1ILGFBQWEsRUFBRTtRQUNyQkssb0JBQW9CO1lBQ2hCTCxlQUFlRyxNQUFNSCxhQUFhO1FBQ3RDO0lBQ0osT0FDSyxJQUFJRyxNQUFNRixVQUFVLEVBQUU7UUFDdkJJLG9CQUFvQjtZQUNoQkosWUFBWUUsTUFBTUYsVUFBVTtRQUNoQztJQUNKLE9BQ0s7UUFDREksb0JBQW9CLENBQUM7SUFDekI7SUFDQSxJQUFJZixTQUFTLFFBQVE7UUFDakIsT0FBTyxJQUFJWix1RUFBaUJBLENBQUM7WUFBRXFCO1FBQVE7SUFDM0MsT0FDSyxJQUFJVCxTQUFTLGFBQWE7UUFDM0IsT0FBTyxJQUFJaEIsb0VBQWNBLENBQUM7WUFBRXlCO1lBQVNNO1FBQWtCO0lBQzNELE9BQ0ssSUFBSWYsU0FBUyxVQUFVO1FBQ3hCLE9BQU8sSUFBSVgsd0VBQWtCQSxDQUFDO1lBQUVvQjtRQUFRO0lBQzVDLE9BQ0ssSUFBSVQsU0FBUyxZQUFZO1FBQzFCLE9BQU8sSUFBSWIsMEVBQW9CQSxDQUFDO1lBQzVCc0I7WUFDQU07WUFDQUMsTUFBTUgsTUFBTUcsSUFBSTtRQUNwQjtJQUNKLE9BQ0ssSUFBSWhCLFNBQVMsUUFBUTtRQUN0QixPQUFPLElBQUlWLHNFQUFnQkEsQ0FBQztZQUN4Qm1CO1lBQ0FNO1lBQ0FFLGNBQWNKLE1BQU1JLFlBQVk7UUFDcEM7SUFDSixPQUNLO1FBQ0QsT0FBTyxJQUFJL0Isc0VBQWdCQSxDQUFDO1lBQUV1QjtZQUFTVDtRQUFLO0lBQ2hEO0FBQ0o7QUFDQSxTQUFTa0IsOEJBQThCQyxRQUFRO0lBQzNDLGlFQUFpRTtJQUNqRSxPQUFPQSxTQUFTQyxHQUFHLENBQUMsQ0FBQ3JCLFVBQWE7WUFDOUJDLE1BQU1HLG9CQUFvQko7WUFDMUJVLFNBQVNWLFFBQVFVLE9BQU87WUFDeEJPLE1BQU1qQixRQUFRaUIsSUFBSTtZQUNsQk4sZUFBZVgsUUFBUWdCLGlCQUFpQixDQUFDTCxhQUFhO1lBQ3REQyxZQUFZWixRQUFRZ0IsaUJBQWlCLENBQUNKLFVBQVU7WUFDaERNLGNBQWNsQixRQUFRa0IsWUFBWTtRQUN0QztBQUNKO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWlDQyxHQUNNLE1BQU1JLG1CQUFtQjVCLHNGQUFhQTtJQUN6QyxPQUFPNkIsVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBLElBQUlDLFdBQVc7UUFDWCxPQUFPO2VBQ0EsS0FBSyxDQUFDQTtZQUNUO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDSDtJQUNMO0lBQ0EsSUFBSUMsYUFBYTtRQUNiLE9BQU87WUFDSEMsY0FBYztZQUNkQyxtQkFBbUI7WUFDbkJDLGNBQWM7UUFDbEI7SUFDSjtJQUNBLElBQUlDLGFBQWE7UUFDYixPQUFPO1lBQ0hDLFdBQVc7WUFDWEosY0FBYztZQUNkSyx1QkFBdUI7WUFDdkJKLG1CQUFtQjtZQUNuQkssNEJBQTRCO1lBQzVCQyw4QkFBOEI7UUFDbEM7SUFDSjtJQUNBQyxZQUFZQyxNQUFNLEVBQ2xCLGdCQUFnQixHQUNoQkMsYUFBYSxDQUFFO1FBQ1gsS0FBSyxDQUFDRCxVQUFVLENBQUM7UUFDakJFLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxvQkFBb0I7WUFDNUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLG1CQUFtQjtZQUMzQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsS0FBSztZQUM3QkMsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZTtZQUN2Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZTtZQUN2Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSx5QkFBeUI7WUFDakRDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLHFCQUFxQjtZQUM3Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsOEJBQThCO1lBQ3REQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQ0FBZ0M7WUFDeERDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLHVCQUF1QjtZQUMvQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ2hCLFlBQVksR0FDYlMsUUFBUVQsZ0JBQWdCakMsaUZBQXNCQSxDQUFDO1FBQ25ELElBQUksQ0FBQ2tDLGlCQUFpQixHQUNsQlEsUUFBUVIscUJBQ0psQyxpRkFBc0JBLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQ2tDLGlCQUFpQixJQUFJLENBQUMsSUFBSSxDQUFDRCxZQUFZLEVBQUU7WUFDL0MsTUFBTSxJQUFJbEIsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ3dCLDBCQUEwQixHQUMzQkcsUUFBUUgsOEJBQ0p2QyxpRkFBc0JBLENBQUM7UUFDL0IsSUFBSSxDQUFDd0MsNEJBQTRCLEdBQzdCRSxRQUFRRixnQ0FDSnhDLGlGQUFzQkEsQ0FBQztRQUMvQixJQUFJLENBQUNzQyxxQkFBcUIsR0FDdEJJLFFBQVFKLHlCQUNKdEMsaUZBQXNCQSxDQUFDO1FBQy9CLElBQUksQ0FBQ2tELG1CQUFtQixHQUNwQlIsUUFBUVEsdUJBQ0psRCxpRkFBc0JBLENBQUM7UUFDL0IsSUFBSSxDQUFDbUMsWUFBWSxHQUNiTyxRQUFRQyxlQUFlUixnQkFDbkJuQyxpRkFBc0JBLENBQUM7UUFDL0IsSUFBSSxDQUFDcUMsU0FBUyxHQUFHSyxRQUFRTCxhQUFhLElBQUksQ0FBQ0EsU0FBUztRQUNwRCxJQUFJLENBQUNjLFdBQVcsR0FBR1QsUUFBUVMsZUFBZSxDQUFDO1FBQzNDLElBQUksQ0FBQ0MsT0FBTyxHQUFHVixRQUFRVTtRQUN2QixJQUFJLENBQUNDLFdBQVcsR0FBR1gsUUFBUVcsZUFBZSxJQUFJLENBQUNBLFdBQVc7UUFDMUQsSUFBSSxDQUFDQyxJQUFJLEdBQUdaLFFBQVFZLFFBQVEsSUFBSSxDQUFDQSxJQUFJO1FBQ3JDLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUdiLFFBQVFhLG9CQUFvQixJQUFJLENBQUNBLGdCQUFnQjtRQUN6RSxJQUFJLENBQUNDLGVBQWUsR0FBR2QsUUFBUWMsbUJBQW1CLElBQUksQ0FBQ0EsZUFBZTtRQUN0RSxJQUFJLENBQUNDLFNBQVMsR0FBR2YsUUFBUWU7UUFDekIsSUFBSSxDQUFDQyxRQUFRLEdBQUdoQixRQUFRZ0I7UUFDeEIsSUFBSSxDQUFDQyxXQUFXLEdBQUdqQixRQUFRaUI7UUFDM0IsSUFBSSxDQUFDQyxDQUFDLEdBQUdsQixRQUFRa0IsS0FBSyxJQUFJLENBQUNBLENBQUM7UUFDNUIsSUFBSSxDQUFDQyxTQUFTLEdBQUduQixRQUFRbUI7UUFDekIsSUFBSSxDQUFDQyxJQUFJLEdBQUdwQixRQUFRb0I7UUFDcEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdyQixRQUFRcUI7UUFDcEIsSUFBSSxDQUFDQyxTQUFTLEdBQUd0QixRQUFRc0IsYUFBYTtRQUN0QyxJQUFJLElBQUksQ0FBQzlCLGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUNLLDBCQUEwQixJQUFJLENBQUMsSUFBSSxDQUFDVyxtQkFBbUIsRUFBRTtnQkFDL0QsTUFBTSxJQUFJbkMsTUFBTTtZQUNwQjtZQUNBLElBQUksQ0FBQyxJQUFJLENBQUN5Qiw0QkFBNEIsRUFBRTtnQkFDcEMsTUFBTSxJQUFJekIsTUFBTTtZQUNwQjtZQUNBLElBQUksQ0FBQyxJQUFJLENBQUN1QixxQkFBcUIsRUFBRTtnQkFDN0IsTUFBTSxJQUFJdkIsTUFBTTtZQUNwQjtZQUNBLElBQUksQ0FBQ2tCLFlBQVksR0FBRyxJQUFJLENBQUNBLFlBQVksSUFBSTtRQUM3QztRQUNBLElBQUksQ0FBQ2dDLFlBQVksR0FBRztZQUNoQkMsUUFBUSxJQUFJLENBQUNqQyxZQUFZO1lBQ3pCRSxjQUFjLElBQUksQ0FBQ0EsWUFBWTtZQUMvQmdDLFNBQVN4QixlQUFleUIsWUFBWTFCLFFBQVFDLGVBQWV5QjtZQUMzREMseUJBQXlCO1lBQ3pCQyxnQkFBZ0IzQixlQUFlNEIsYUFBYUMsV0FDeEM5QixRQUFRQyxlQUFlNEIsYUFBYUM7WUFDeENDLGNBQWM5QixlQUFlNEIsYUFBYUcsVUFDdENoQyxRQUFRQyxlQUFlNEIsYUFBYUc7WUFDeEMsR0FBRy9CLGFBQWE7WUFDaEIsR0FBR0QsUUFBUUMsYUFBYTtRQUM1QjtJQUNKO0lBQ0E7O0tBRUMsR0FDRGdDLGlCQUFpQkMsT0FBTyxFQUFFO1FBQ3RCLFNBQVNDLHNCQUFzQkMsS0FBSztZQUNoQyxPQUFRQSxVQUFVQyxhQUNkRCxNQUFNRSxLQUFLLENBQUMsQ0FBQ0MsT0FBU0MsTUFBTUMsT0FBTyxDQUFDRixLQUFLRyxZQUFZO1FBQzdEO1FBQ0EsTUFBTVYsU0FBUztZQUNYVyxPQUFPLElBQUksQ0FBQ2hELFNBQVM7WUFDckJnQixhQUFhLElBQUksQ0FBQ0EsV0FBVztZQUM3QmlDLE9BQU8sSUFBSSxDQUFDaEMsSUFBSTtZQUNoQmlDLG1CQUFtQixJQUFJLENBQUNoQyxnQkFBZ0I7WUFDeENpQyxrQkFBa0IsSUFBSSxDQUFDaEMsZUFBZTtZQUN0Q2lDLFlBQVksSUFBSSxDQUFDaEMsU0FBUyxLQUFLLENBQUMsSUFBSXNCLFlBQVksSUFBSSxDQUFDdEIsU0FBUztZQUM5REMsVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFDdkJnQyxjQUFjLElBQUksQ0FBQy9CLFdBQVc7WUFDOUJDLEdBQUcsSUFBSSxDQUFDQSxDQUFDO1lBQ1QrQixZQUFZLElBQUksQ0FBQzlCLFNBQVM7WUFDMUJDLE1BQU1jLFNBQVNkLFFBQVEsSUFBSSxDQUFDQSxJQUFJO1lBQ2hDQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmNkIsUUFBUSxJQUFJLENBQUM1QixTQUFTO1lBQ3RCNkIsV0FBV2pCLFNBQVNpQjtZQUNwQjNFLGVBQWUwRCxTQUFTMUQ7WUFDeEI0RCxPQUFPRCxzQkFBc0JELFNBQVNFLFNBQ2hDRixTQUFTRSxNQUFNbEQsSUFBSTFCLHVGQUFtQkEsSUFDdEMwRSxTQUFTRTtZQUNmZ0IsYUFBYWxCLFNBQVNrQjtZQUN0QkMsaUJBQWlCbkIsU0FBU21CO1lBQzFCQyxNQUFNcEIsU0FBU29CO1lBQ2YsR0FBRyxJQUFJLENBQUM3QyxXQUFXO1FBQ3ZCO1FBQ0EsT0FBT3VCO0lBQ1g7SUFDQSxZQUFZLEdBQ1p1QixxQkFBcUI7UUFDakIsT0FBTztZQUNIQyxZQUFZLElBQUksQ0FBQzdELFNBQVM7WUFDMUIsR0FBRyxJQUFJLENBQUNzQyxnQkFBZ0IsRUFBRTtZQUMxQixHQUFHLElBQUksQ0FBQ1YsWUFBWTtRQUN4QjtJQUNKO0lBQ0EsT0FBT2tDLHNCQUFzQnhFLFFBQVEsRUFBRWlELE9BQU8sRUFBRXdCLFVBQVUsRUFBRTtRQUN4RCxNQUFNQyxpQkFBaUIzRSw4QkFBOEJDO1FBQ3JELE1BQU0rQyxTQUFTO1lBQ1gsR0FBRyxJQUFJLENBQUNDLGdCQUFnQixDQUFDQyxRQUFRO1lBQ2pDakQsVUFBVTBFO1lBQ1ZULFFBQVE7UUFDWjtRQUNBLElBQUl0RTtRQUNKLE1BQU1nRixpQkFBaUIsTUFBTSxJQUFJLENBQUNDLG1CQUFtQixDQUFDN0IsUUFBUUU7UUFDOUQsV0FBVyxNQUFNNEIsUUFBUUYsZUFBZ0I7WUFDckMsTUFBTUcsU0FBU0QsTUFBTUUsT0FBTyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDRCxRQUFRO2dCQUNUO1lBQ0o7WUFDQSxNQUFNLEVBQUVwRixLQUFLLEVBQUUsR0FBR29GO1lBQ2xCLElBQUksQ0FBQ3BGLE9BQU87Z0JBQ1I7WUFDSjtZQUNBLE1BQU1zRixRQUFRdkYsNEJBQTRCQyxPQUFPQztZQUNqREEsY0FBY0QsTUFBTWIsSUFBSSxJQUFJYztZQUM1QixNQUFNc0Ysa0JBQWtCO2dCQUNwQkMsUUFBUWpDLFFBQVFrQyxXQUFXLElBQUk7Z0JBQy9CQyxZQUFZTixPQUFPTyxLQUFLLElBQUk7WUFDaEM7WUFDQSxJQUFJLE9BQU9MLE1BQU0xRixPQUFPLEtBQUssVUFBVTtnQkFDbkNSLFFBQVF3RyxHQUFHLENBQUM7Z0JBQ1o7WUFDSjtZQUNBLE1BQU1DLGtCQUFrQixJQUFJbkgsd0VBQW1CQSxDQUFDO2dCQUM1Q1EsU0FBU29HO2dCQUNUUSxNQUFNUixNQUFNMUYsT0FBTztnQkFDbkJtRyxnQkFBZ0JSO1lBQ3BCO1lBQ0EsTUFBTU07WUFDTixtQ0FBbUM7WUFDbkMsS0FBS2QsWUFBWWlCLGtCQUFrQkgsZ0JBQWdCQyxJQUFJLElBQUksSUFBSVAsaUJBQWlCN0IsV0FBV0EsV0FBV0EsV0FBVztnQkFBRTRCLE9BQU9PO1lBQWdCO1FBQzlJO1FBQ0EsSUFBSXRDLFFBQVEwQyxNQUFNLEVBQUVDLFNBQVM7WUFDekIsTUFBTSxJQUFJeEcsTUFBTTtRQUNwQjtJQUNKO0lBQ0E7OztLQUdDLEdBQ0R5RyxvQkFBb0I7UUFDaEIsT0FBTyxJQUFJLENBQUN2QixrQkFBa0I7SUFDbEM7SUFDQSxZQUFZLEdBQ1osTUFBTXdCLFVBQVU5RixRQUFRLEVBQUVpRCxPQUFPLEVBQUV3QixVQUFVLEVBQUU7UUFDM0MsTUFBTXNCLGFBQWEsQ0FBQztRQUNwQixNQUFNaEQsU0FBUyxJQUFJLENBQUNDLGdCQUFnQixDQUFDQztRQUNyQyxNQUFNeUIsaUJBQWlCM0UsOEJBQThCQztRQUNyRCxJQUFJK0MsT0FBT2tCLE1BQU0sRUFBRTtZQUNmLE1BQU1BLFNBQVMsSUFBSSxDQUFDTyxxQkFBcUIsQ0FBQ3hFLFVBQVVpRCxTQUFTd0I7WUFDN0QsTUFBTXVCLGNBQWMsQ0FBQztZQUNyQixXQUFXLE1BQU1oQixTQUFTZixPQUFRO2dCQUM5QixNQUFNb0IsUUFBUUwsTUFBTVMsY0FBYyxFQUFFTCxjQUFjO2dCQUNsRCxJQUFJWSxXQUFXLENBQUNYLE1BQU0sS0FBS2pDLFdBQVc7b0JBQ2xDNEMsV0FBVyxDQUFDWCxNQUFNLEdBQUdMO2dCQUN6QixPQUNLO29CQUNEZ0IsV0FBVyxDQUFDWCxNQUFNLEdBQUdXLFdBQVcsQ0FBQ1gsTUFBTSxDQUFDWSxNQUFNLENBQUNqQjtnQkFDbkQ7WUFDSjtZQUNBLE1BQU1rQixjQUFjakYsT0FBT2tGLE9BQU8sQ0FBQ0gsYUFDOUJJLElBQUksQ0FBQyxDQUFDLENBQUNDLEtBQUssRUFBRSxDQUFDQyxLQUFLLEdBQUtDLFNBQVNGLE1BQU0sTUFBTUUsU0FBU0QsTUFBTSxLQUM3RHJHLEdBQUcsQ0FBQyxDQUFDLENBQUN1RyxHQUFHbEYsTUFBTSxHQUFLQTtZQUN6QixNQUFNLEVBQUU0QyxTQUFTLEVBQUUzRSxhQUFhLEVBQUUsR0FBRyxJQUFJLENBQUN5RCxnQkFBZ0IsQ0FBQ0M7WUFDM0QsZ0VBQWdFO1lBQ2hFLDBCQUEwQjtZQUMxQixNQUFNd0QsbUJBQW1CLE1BQU0sSUFBSSxDQUFDQyxnQ0FBZ0MsQ0FBQzFHLFVBQVVrRSxXQUFXM0U7WUFDMUYsTUFBTW9ILHVCQUF1QixNQUFNLElBQUksQ0FBQ0MsMkJBQTJCLENBQUNWO1lBQ3BFSCxXQUFXYyxZQUFZLEdBQUdKO1lBQzFCVixXQUFXZSxnQkFBZ0IsR0FBR0g7WUFDOUJaLFdBQVdnQixXQUFXLEdBQUdOLG1CQUFtQkU7WUFDNUMsT0FBTztnQkFBRVQ7Z0JBQWFjLFdBQVc7b0JBQUVDLHFCQUFxQmxCO2dCQUFXO1lBQUU7UUFDekUsT0FDSztZQUNELE1BQU1sQixPQUFPLE1BQU0sSUFBSSxDQUFDRCxtQkFBbUIsQ0FBQztnQkFDeEMsR0FBRzdCLE1BQU07Z0JBQ1RrQixRQUFRO2dCQUNSakUsVUFBVTBFO1lBQ2QsR0FBRztnQkFDQ2lCLFFBQVExQyxTQUFTMEM7Z0JBQ2pCLEdBQUcxQyxTQUFTQSxPQUFPO1lBQ3ZCO1lBQ0EsTUFBTSxFQUFFaUUsbUJBQW1CSixnQkFBZ0IsRUFBRUssZUFBZU4sWUFBWSxFQUFFTyxjQUFjTCxXQUFXLEVBQUcsR0FBR2xDLE1BQU13QyxTQUFTLENBQUM7WUFDekgsSUFBSVAsa0JBQWtCO2dCQUNsQmYsV0FBV2UsZ0JBQWdCLEdBQ3ZCLENBQUNmLFdBQVdlLGdCQUFnQixJQUFJLEtBQUtBO1lBQzdDO1lBQ0EsSUFBSUQsY0FBYztnQkFDZGQsV0FBV2MsWUFBWSxHQUFHLENBQUNkLFdBQVdjLFlBQVksSUFBSSxLQUFLQTtZQUMvRDtZQUNBLElBQUlFLGFBQWE7Z0JBQ2JoQixXQUFXZ0IsV0FBVyxHQUFHLENBQUNoQixXQUFXZ0IsV0FBVyxJQUFJLEtBQUtBO1lBQzdEO1lBQ0EsTUFBTWIsY0FBYyxFQUFFO1lBQ3RCLEtBQUssTUFBTW9CLFFBQVF6QyxNQUFNRSxXQUFXLEVBQUUsQ0FBRTtnQkFDcEMsTUFBTVMsT0FBTzhCLEtBQUsxSSxPQUFPLEVBQUVVLFdBQVc7Z0JBQ3RDLE1BQU1pSSxhQUFhO29CQUNmL0I7b0JBQ0E1RyxTQUFTUyw0QkFBNEJpSSxLQUFLMUksT0FBTyxJQUFJO3dCQUFFQyxNQUFNO29CQUFZO2dCQUM3RTtnQkFDQTBJLFdBQVc5QixjQUFjLEdBQUc7b0JBQ3hCLEdBQUk2QixLQUFLRSxhQUFhLEdBQUc7d0JBQUVBLGVBQWVGLEtBQUtFLGFBQWE7b0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ25FLEdBQUlGLEtBQUt2RixRQUFRLEdBQUc7d0JBQUVBLFVBQVV1RixLQUFLdkYsUUFBUTtvQkFBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEQ7Z0JBQ0FtRSxZQUFZdUIsSUFBSSxDQUFDRjtZQUNyQjtZQUNBLE9BQU87Z0JBQ0hyQjtnQkFDQWMsV0FBVztvQkFBRWpCO2dCQUFXO1lBQzVCO1FBQ0o7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE1BQU1XLGlDQUFpQzFHLFFBQVEsRUFBRWtFLFNBQVMsRUFBRTNFLGFBQWEsRUFBRTtRQUN2RSw2R0FBNkc7UUFDN0csK0dBQStHO1FBQy9HLElBQUltSSxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUNDLHdCQUF3QixDQUFDM0gsU0FBUSxFQUFHNEgsVUFBVTtRQUN2RSx5RkFBeUY7UUFDekYsSUFBSTFELGFBQWEzRSxrQkFBa0IsUUFBUTtZQUN2QyxNQUFNc0ksb0JBQW9Cbkosd0ZBQXlCQSxDQUFDd0Y7WUFDcER3RCxVQUFVLE1BQU0sSUFBSSxDQUFDSSxZQUFZLENBQUNEO1lBQ2xDSCxVQUFVLEdBQUcsMEJBQTBCO1FBQzNDO1FBQ0EsMEdBQTBHO1FBQzFHLHdHQUF3RztRQUN4Ryx3REFBd0Q7UUFDeEQsSUFBSXhELGFBQWFsRSxTQUFTK0gsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUU5SSxRQUFRLE9BQU8sV0FBVztZQUM5RHdJLFVBQVU7UUFDZDtRQUNBLDZDQUE2QztRQUM3QyxvRkFBb0Y7UUFDcEYsbURBQW1EO1FBQ25ELElBQUluSSxrQkFBa0IsUUFBUTtZQUMxQm1JLFVBQVU7UUFDZCxPQUNLLElBQUksT0FBT25JLGtCQUFrQixVQUFVO1lBQ3hDbUksVUFBVSxNQUFPLElBQUksQ0FBQ0ksWUFBWSxDQUFDdkksY0FBY00sSUFBSSxJQUFLO1FBQzlEO1FBQ0EsT0FBTzZIO0lBQ1g7SUFDQTs7S0FFQyxHQUNELE1BQU1kLDRCQUE0QlYsV0FBVyxFQUFFO1FBQzNDLE1BQU0rQixtQkFBbUIsTUFBTUMsUUFBUUMsR0FBRyxDQUFDakMsWUFBWWpHLEdBQUcsQ0FBQyxPQUFPc0g7WUFDOUQsSUFBSUEsV0FBVzNJLE9BQU8sQ0FBQ2dCLGlCQUFpQixFQUFFTCxlQUFlO2dCQUNyRCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUNvSSx3QkFBd0IsQ0FBQztvQkFBQ0osV0FBVzNJLE9BQU87aUJBQUMsR0FDM0R3SixlQUFlLENBQUMsRUFBRTtZQUMzQixPQUNLO2dCQUNELE9BQU8sTUFBTSxJQUFJLENBQUNOLFlBQVksQ0FBQ1AsV0FBVzNJLE9BQU8sQ0FBQ1UsT0FBTztZQUM3RDtRQUNKO1FBQ0EsT0FBTzJJLGlCQUFpQkksTUFBTSxDQUFDLENBQUNDLEdBQUdDLElBQU1ELElBQUlDLEdBQUc7SUFDcEQ7SUFDQSxNQUFNWix5QkFBeUIzSCxRQUFRLEVBQUU7UUFDckMsSUFBSTRILGFBQWE7UUFDakIsSUFBSVksbUJBQW1CO1FBQ3ZCLElBQUlDLGdCQUFnQjtRQUNwQixrSEFBa0g7UUFDbEgsSUFBSSxJQUFJLENBQUMvSCxTQUFTLEtBQUssc0JBQXNCO1lBQ3pDOEgsbUJBQW1CO1lBQ25CQyxnQkFBZ0IsQ0FBQztRQUNyQixPQUNLO1lBQ0RELG1CQUFtQjtZQUNuQkMsZ0JBQWdCO1FBQ3BCO1FBQ0EsTUFBTUwsa0JBQWtCLE1BQU1GLFFBQVFDLEdBQUcsQ0FBQ25JLFNBQVNDLEdBQUcsQ0FBQyxPQUFPckI7WUFDMUQsTUFBTThKLFlBQVksTUFBTSxJQUFJLENBQUNaLFlBQVksQ0FBQ2xKLFFBQVFVLE9BQU87WUFDekQsTUFBTXFKLFlBQVksTUFBTSxJQUFJLENBQUNiLFlBQVksQ0FBQzlJLG9CQUFvQko7WUFDOUQsTUFBTWdLLFlBQVloSyxRQUFRaUIsSUFBSSxLQUFLdUQsWUFDN0JxRixnQkFBaUIsTUFBTSxJQUFJLENBQUNYLFlBQVksQ0FBQ2xKLFFBQVFpQixJQUFJLElBQ3JEO1lBQ04sSUFBSWdKLFFBQVFILFlBQVlGLG1CQUFtQkcsWUFBWUM7WUFDdkQsZ0dBQWdHO1lBQ2hHLE1BQU1FLGdCQUFnQmxLO1lBQ3RCLElBQUlrSyxjQUFjNUosUUFBUSxPQUFPLFlBQVk7Z0JBQ3pDMkosU0FBUztZQUNiO1lBQ0EsSUFBSUMsY0FBY2xKLGlCQUFpQixFQUFFTCxlQUFlO2dCQUNoRHNKLFNBQVM7WUFDYjtZQUNBLElBQUlDLGVBQWVsSixrQkFBa0JMLGVBQWVNLE1BQU07Z0JBQ3REZ0osU0FBUyxNQUFNLElBQUksQ0FBQ2YsWUFBWSxDQUFDZ0IsY0FBY2xKLGlCQUFpQixDQUFDTCxhQUFhLEVBQUVNO1lBQ3BGO1lBQ0EsSUFBSWlKLGNBQWNsSixpQkFBaUIsQ0FBQ0wsYUFBYSxFQUFFd0osV0FBVztnQkFDMURGLFNBQVMsTUFBTSxJQUFJLENBQUNmLFlBQVksQ0FDaEMsNkJBQTZCO2dCQUM3QmtCLEtBQUtDLFNBQVMsQ0FBQ0QsS0FBS0UsS0FBSyxDQUFDSixjQUFjbEosaUJBQWlCLENBQUNMLGFBQWEsRUFBRXdKO1lBQzdFO1lBQ0FuQixjQUFjaUI7WUFDZCxPQUFPQTtRQUNYO1FBQ0FqQixjQUFjLEdBQUcsMkRBQTJEO1FBQzVFLE9BQU87WUFBRUE7WUFBWVE7UUFBZ0I7SUFDekM7SUFDQSxNQUFNeEQsb0JBQW9CdUUsT0FBTyxFQUFFbEcsT0FBTyxFQUFFO1FBQ3hDLE1BQU1tRyxpQkFBaUIsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ3BHO1FBQzlDLE9BQU8sSUFBSSxDQUFDcUcsTUFBTSxDQUFDQyxJQUFJLENBQUM7WUFDcEIsSUFBSTtnQkFDQSxNQUFNQyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxNQUFNLENBQUNULFNBQVNDO2dCQUMvRCxPQUFPSTtZQUNYLEVBQ0EsT0FBT0ssR0FBRztnQkFDTixNQUFNQyxRQUFRckwsdUVBQXFCQSxDQUFDb0w7Z0JBQ3BDLE1BQU1DO1lBQ1Y7UUFDSjtJQUNKO0lBQ0FULGtCQUFrQnBHLE9BQU8sRUFBRTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDd0csTUFBTSxFQUFFO1lBQ2QsTUFBTU0sdUJBQXVCO2dCQUN6QmxKLDhCQUE4QixJQUFJLENBQUNBLDRCQUE0QjtnQkFDL0RELDRCQUE0QixJQUFJLENBQUNBLDBCQUEwQjtnQkFDM0RMLG1CQUFtQixJQUFJLENBQUNBLGlCQUFpQjtnQkFDekNnQixxQkFBcUIsSUFBSSxDQUFDQSxtQkFBbUI7Z0JBQzdDaUIsU0FBUyxJQUFJLENBQUNGLFlBQVksQ0FBQ0UsT0FBTztZQUN0QztZQUNBLE1BQU13SCxXQUFXeEwsNERBQVdBLENBQUN1TDtZQUM3QixNQUFNaEgsU0FBUztnQkFDWCxHQUFHLElBQUksQ0FBQ1QsWUFBWTtnQkFDcEJFLFNBQVN3SDtnQkFDVHZJLFNBQVMsSUFBSSxDQUFDQSxPQUFPO2dCQUNyQndJLFlBQVk7WUFDaEI7WUFDQSxJQUFJLENBQUNsSCxPQUFPUCxPQUFPLEVBQUU7Z0JBQ2pCLE9BQU9PLE9BQU9QLE9BQU87WUFDekI7WUFDQSxJQUFJLENBQUNpSCxNQUFNLEdBQUcsSUFBSTlMLDBDQUFZQSxDQUFDb0Y7UUFDbkM7UUFDQSxNQUFNcUcsaUJBQWlCO1lBQ25CLEdBQUcsSUFBSSxDQUFDOUcsWUFBWTtZQUNwQixHQUFHVyxPQUFPO1FBQ2Q7UUFDQSxJQUFJLElBQUksQ0FBQzFDLGlCQUFpQixFQUFFO1lBQ3hCNkksZUFBZXZHLE9BQU8sR0FBRztnQkFDckIsV0FBVyxJQUFJLENBQUN0QyxpQkFBaUI7Z0JBQ2pDLEdBQUc2SSxlQUFldkcsT0FBTztZQUM3QjtZQUNBdUcsZUFBZWMsS0FBSyxHQUFHO2dCQUNuQixlQUFlLElBQUksQ0FBQ3ZKLHFCQUFxQjtnQkFDekMsR0FBR3lJLGVBQWVjLEtBQUs7WUFDM0I7UUFDSjtRQUNBLE9BQU9kO0lBQ1g7SUFDQWUsV0FBVztRQUNQLE9BQU87SUFDWDtJQUNBLFlBQVksR0FDWkMsa0JBQWtCLEdBQUdDLFVBQVUsRUFBRTtRQUM3QixPQUFPQSxXQUFXaEMsTUFBTSxDQUFDLENBQUNpQyxLQUFLdEQ7WUFDM0IsSUFBSUEsYUFBYUEsVUFBVWpCLFVBQVUsRUFBRTtnQkFDbkN1RSxJQUFJdkUsVUFBVSxDQUFDZSxnQkFBZ0IsSUFDM0JFLFVBQVVqQixVQUFVLENBQUNlLGdCQUFnQixJQUFJO2dCQUM3Q3dELElBQUl2RSxVQUFVLENBQUNjLFlBQVksSUFBSUcsVUFBVWpCLFVBQVUsQ0FBQ2MsWUFBWSxJQUFJO2dCQUNwRXlELElBQUl2RSxVQUFVLENBQUNnQixXQUFXLElBQUlDLFVBQVVqQixVQUFVLENBQUNnQixXQUFXLElBQUk7WUFDdEU7WUFDQSxPQUFPdUQ7UUFDWCxHQUFHO1lBQ0N2RSxZQUFZO2dCQUNSZSxrQkFBa0I7Z0JBQ2xCRCxjQUFjO2dCQUNkRSxhQUFhO1lBQ2pCO1FBQ0o7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvY2hhdF9tb2RlbHMuanM/ODU3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGVuQUkgYXMgT3BlbkFJQ2xpZW50IH0gZnJvbSBcIm9wZW5haVwiO1xuaW1wb3J0IHsgQUlNZXNzYWdlLCBBSU1lc3NhZ2VDaHVuaywgQ2hhdE1lc3NhZ2UsIENoYXRNZXNzYWdlQ2h1bmssIEZ1bmN0aW9uTWVzc2FnZUNodW5rLCBIdW1hbk1lc3NhZ2VDaHVuaywgU3lzdGVtTWVzc2FnZUNodW5rLCBUb29sTWVzc2FnZUNodW5rLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvbWVzc2FnZXNcIjtcbmltcG9ydCB7IENoYXRHZW5lcmF0aW9uQ2h1bmssIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9vdXRwdXRzXCI7XG5pbXBvcnQgeyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS91dGlscy9lbnZcIjtcbmltcG9ydCB7IEJhc2VDaGF0TW9kZWwsIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9sYW5ndWFnZV9tb2RlbHMvY2hhdF9tb2RlbHNcIjtcbmltcG9ydCB7IGNvbnZlcnRUb09wZW5BSVRvb2wgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmdcIjtcbmltcG9ydCB7IGdldEVuZHBvaW50IH0gZnJvbSBcIi4vdXRpbHMvYXp1cmUuanNcIjtcbmltcG9ydCB7IHdyYXBPcGVuQUlDbGllbnRFcnJvciB9IGZyb20gXCIuL3V0aWxzL29wZW5haS5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0RnVuY3Rpb25EZWZpbml0aW9ucywgfSBmcm9tIFwiLi91dGlscy9vcGVuYWktZm9ybWF0LWZuZGVmLmpzXCI7XG5mdW5jdGlvbiBleHRyYWN0R2VuZXJpY01lc3NhZ2VDdXN0b21Sb2xlKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZS5yb2xlICE9PSBcInN5c3RlbVwiICYmXG4gICAgICAgIG1lc3NhZ2Uucm9sZSAhPT0gXCJhc3Npc3RhbnRcIiAmJlxuICAgICAgICBtZXNzYWdlLnJvbGUgIT09IFwidXNlclwiICYmXG4gICAgICAgIG1lc3NhZ2Uucm9sZSAhPT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIG1lc3NhZ2Uucm9sZSAhPT0gXCJ0b29sXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBVbmtub3duIG1lc3NhZ2Ugcm9sZTogJHttZXNzYWdlLnJvbGV9YCk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlLnJvbGU7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVzc2FnZVRvT3BlbkFJUm9sZShtZXNzYWdlKSB7XG4gICAgY29uc3QgdHlwZSA9IG1lc3NhZ2UuX2dldFR5cGUoKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInN5c3RlbVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwic3lzdGVtXCI7XG4gICAgICAgIGNhc2UgXCJhaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYXNzaXN0YW50XCI7XG4gICAgICAgIGNhc2UgXCJodW1hblwiOlxuICAgICAgICAgICAgcmV0dXJuIFwidXNlclwiO1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCI7XG4gICAgICAgIGNhc2UgXCJ0b29sXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJ0b29sXCI7XG4gICAgICAgIGNhc2UgXCJnZW5lcmljXCI6IHtcbiAgICAgICAgICAgIGlmICghQ2hhdE1lc3NhZ2UuaXNJbnN0YW5jZShtZXNzYWdlKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGdlbmVyaWMgY2hhdCBtZXNzYWdlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3RHZW5lcmljTWVzc2FnZUN1c3RvbVJvbGUobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtZXNzYWdlIHR5cGU6ICR7dHlwZX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBvcGVuQUlSZXNwb25zZVRvQ2hhdE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIHN3aXRjaCAobWVzc2FnZS5yb2xlKSB7XG4gICAgICAgIGNhc2UgXCJhc3Npc3RhbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgQUlNZXNzYWdlKG1lc3NhZ2UuY29udGVudCB8fCBcIlwiLCB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb25fY2FsbDogbWVzc2FnZS5mdW5jdGlvbl9jYWxsLFxuICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM6IG1lc3NhZ2UudG9vbF9jYWxscyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGF0TWVzc2FnZShtZXNzYWdlLmNvbnRlbnQgfHwgXCJcIiwgbWVzc2FnZS5yb2xlID8/IFwidW5rbm93blwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBfY29udmVydERlbHRhVG9NZXNzYWdlQ2h1bmsoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZGVsdGEsIGRlZmF1bHRSb2xlKSB7XG4gICAgY29uc3Qgcm9sZSA9IGRlbHRhLnJvbGUgPz8gZGVmYXVsdFJvbGU7XG4gICAgY29uc3QgY29udGVudCA9IGRlbHRhLmNvbnRlbnQgPz8gXCJcIjtcbiAgICBsZXQgYWRkaXRpb25hbF9rd2FyZ3M7XG4gICAgaWYgKGRlbHRhLmZ1bmN0aW9uX2NhbGwpIHtcbiAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3MgPSB7XG4gICAgICAgICAgICBmdW5jdGlvbl9jYWxsOiBkZWx0YS5mdW5jdGlvbl9jYWxsLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChkZWx0YS50b29sX2NhbGxzKSB7XG4gICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzID0ge1xuICAgICAgICAgICAgdG9vbF9jYWxsczogZGVsdGEudG9vbF9jYWxscyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzID0ge307XG4gICAgfVxuICAgIGlmIChyb2xlID09PSBcInVzZXJcIikge1xuICAgICAgICByZXR1cm4gbmV3IEh1bWFuTWVzc2FnZUNodW5rKHsgY29udGVudCB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAocm9sZSA9PT0gXCJhc3Npc3RhbnRcIikge1xuICAgICAgICByZXR1cm4gbmV3IEFJTWVzc2FnZUNodW5rKHsgY29udGVudCwgYWRkaXRpb25hbF9rd2FyZ3MgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJvbGUgPT09IFwic3lzdGVtXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeXN0ZW1NZXNzYWdlQ2h1bmsoeyBjb250ZW50IH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChyb2xlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbk1lc3NhZ2VDaHVuayh7XG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3MsXG4gICAgICAgICAgICBuYW1lOiBkZWx0YS5uYW1lLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAocm9sZSA9PT0gXCJ0b29sXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb29sTWVzc2FnZUNodW5rKHtcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJncyxcbiAgICAgICAgICAgIHRvb2xfY2FsbF9pZDogZGVsdGEudG9vbF9jYWxsX2lkLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhdE1lc3NhZ2VDaHVuayh7IGNvbnRlbnQsIHJvbGUgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29udmVydE1lc3NhZ2VzVG9PcGVuQUlQYXJhbXMobWVzc2FnZXMpIHtcbiAgICAvLyBUT0RPOiBGdW5jdGlvbiBtZXNzYWdlcyBkbyBub3Qgc3VwcG9ydCBhcnJheSBjb250ZW50LCBmaXggY2FzdFxuICAgIHJldHVybiBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UpID0+ICh7XG4gICAgICAgIHJvbGU6IG1lc3NhZ2VUb09wZW5BSVJvbGUobWVzc2FnZSksXG4gICAgICAgIGNvbnRlbnQ6IG1lc3NhZ2UuY29udGVudCxcbiAgICAgICAgbmFtZTogbWVzc2FnZS5uYW1lLFxuICAgICAgICBmdW5jdGlvbl9jYWxsOiBtZXNzYWdlLmFkZGl0aW9uYWxfa3dhcmdzLmZ1bmN0aW9uX2NhbGwsXG4gICAgICAgIHRvb2xfY2FsbHM6IG1lc3NhZ2UuYWRkaXRpb25hbF9rd2FyZ3MudG9vbF9jYWxscyxcbiAgICAgICAgdG9vbF9jYWxsX2lkOiBtZXNzYWdlLnRvb2xfY2FsbF9pZCxcbiAgICB9KSk7XG59XG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIE9wZW5BSSBsYXJnZSBsYW5ndWFnZSBtb2RlbHMgdGhhdCB1c2UgdGhlIENoYXQgZW5kcG9pbnQuXG4gKlxuICogVG8gdXNlIHlvdSBzaG91bGQgaGF2ZSB0aGUgYG9wZW5haWAgcGFja2FnZSBpbnN0YWxsZWQsIHdpdGggdGhlXG4gKiBgT1BFTkFJX0FQSV9LRVlgIGVudmlyb25tZW50IHZhcmlhYmxlIHNldC5cbiAqXG4gKiBUbyB1c2Ugd2l0aCBBenVyZSB5b3Ugc2hvdWxkIGhhdmUgdGhlIGBvcGVuYWlgIHBhY2thZ2UgaW5zdGFsbGVkLCB3aXRoIHRoZVxuICogYEFaVVJFX09QRU5BSV9BUElfS0VZYCxcbiAqIGBBWlVSRV9PUEVOQUlfQVBJX0lOU1RBTkNFX05BTUVgLFxuICogYEFaVVJFX09QRU5BSV9BUElfREVQTE9ZTUVOVF9OQU1FYFxuICogYW5kIGBBWlVSRV9PUEVOQUlfQVBJX1ZFUlNJT05gIGVudmlyb25tZW50IHZhcmlhYmxlIHNldC5cbiAqIGBBWlVSRV9PUEVOQUlfQkFTRV9QQVRIYCBpcyBvcHRpb25hbCBhbmQgd2lsbCBvdmVycmlkZSBgQVpVUkVfT1BFTkFJX0FQSV9JTlNUQU5DRV9OQU1FYCBpZiB5b3UgbmVlZCB0byB1c2UgYSBjdXN0b20gZW5kcG9pbnQuXG4gKlxuICogQHJlbWFya3NcbiAqIEFueSBwYXJhbWV0ZXJzIHRoYXQgYXJlIHZhbGlkIHRvIGJlIHBhc3NlZCB0byB7QGxpbmtcbiAqIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvY2hhdC9jcmVhdGUgfFxuICogYG9wZW5haS5jcmVhdGVDaGF0Q29tcGxldGlvbmB9IGNhbiBiZSBwYXNzZWQgdGhyb3VnaCB7QGxpbmsgbW9kZWxLd2FyZ3N9LCBldmVuXG4gKiBpZiBub3QgZXhwbGljaXRseSBhdmFpbGFibGUgb24gdGhpcyBjbGFzcy5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQ2hhdE9wZW5BSSB3aXRoIHNwZWNpZmljIHRlbXBlcmF0dXJlIGFuZCBtb2RlbCBuYW1lIHNldHRpbmdzXG4gKiBjb25zdCBtb2RlbCA9IG5ldyBDaGF0T3BlbkFJKHtcbiAqICAgdGVtcGVyYXR1cmU6IDAuOSxcbiAqICAgbW9kZWxOYW1lOiBcImZ0OmdwdC0zLjUtdHVyYm8tMDYxMzp7T1JHX05BTUV9Ojp7TU9ERUxfSUR9XCIsXG4gKiB9KTtcbiAqXG4gKiAvLyBJbnZva2UgdGhlIG1vZGVsIHdpdGggYSBtZXNzYWdlIGFuZCBhd2FpdCB0aGUgcmVzcG9uc2VcbiAqIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBtb2RlbC5pbnZva2UoXCJIaSB0aGVyZSFcIik7XG4gKlxuICogLy8gTG9nIHRoZSByZXNwb25zZSB0byB0aGUgY29uc29sZVxuICogY29uc29sZS5sb2cobWVzc2FnZSk7XG4gKlxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBDaGF0T3BlbkFJIGV4dGVuZHMgQmFzZUNoYXRNb2RlbCB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkNoYXRPcGVuQUlcIjtcbiAgICB9XG4gICAgZ2V0IGNhbGxLZXlzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLi4uc3VwZXIuY2FsbEtleXMsXG4gICAgICAgICAgICBcIm9wdGlvbnNcIixcbiAgICAgICAgICAgIFwiZnVuY3Rpb25fY2FsbFwiLFxuICAgICAgICAgICAgXCJmdW5jdGlvbnNcIixcbiAgICAgICAgICAgIFwidG9vbHNcIixcbiAgICAgICAgICAgIFwidG9vbF9jaG9pY2VcIixcbiAgICAgICAgICAgIFwicHJvbXB0SW5kZXhcIixcbiAgICAgICAgICAgIFwicmVzcG9uc2VfZm9ybWF0XCIsXG4gICAgICAgICAgICBcInNlZWRcIixcbiAgICAgICAgXTtcbiAgICB9XG4gICAgZ2V0IGxjX3NlY3JldHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGVuQUlBcGlLZXk6IFwiT1BFTkFJX0FQSV9LRVlcIixcbiAgICAgICAgICAgIGF6dXJlT3BlbkFJQXBpS2V5OiBcIkFaVVJFX09QRU5BSV9BUElfS0VZXCIsXG4gICAgICAgICAgICBvcmdhbml6YXRpb246IFwiT1BFTkFJX09SR0FOSVpBVElPTlwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXQgbGNfYWxpYXNlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGVsTmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgb3BlbkFJQXBpS2V5OiBcIm9wZW5haV9hcGlfa2V5XCIsXG4gICAgICAgICAgICBhenVyZU9wZW5BSUFwaVZlcnNpb246IFwiYXp1cmVfb3BlbmFpX2FwaV92ZXJzaW9uXCIsXG4gICAgICAgICAgICBhenVyZU9wZW5BSUFwaUtleTogXCJhenVyZV9vcGVuYWlfYXBpX2tleVwiLFxuICAgICAgICAgICAgYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWU6IFwiYXp1cmVfb3BlbmFpX2FwaV9pbnN0YW5jZV9uYW1lXCIsXG4gICAgICAgICAgICBhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lOiBcImF6dXJlX29wZW5haV9hcGlfZGVwbG95bWVudF9uYW1lXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAgY29uZmlndXJhdGlvbikge1xuICAgICAgICBzdXBlcihmaWVsZHMgPz8ge30pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRlbXBlcmF0dXJlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAxXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b3BQXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAxXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJmcmVxdWVuY3lQZW5hbHR5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwcmVzZW5jZVBlbmFsdHlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDFcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxvZ2l0Qmlhc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtb2RlbE5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiZ3B0LTMuNS10dXJib1wiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtb2RlbEt3YXJnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdG9wXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInVzZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGltZW91dFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdHJlYW1pbmdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXhUb2tlbnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibG9ncHJvYnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidG9wTG9ncHJvYnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib3BlbkFJQXBpS2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImF6dXJlT3BlbkFJQXBpVmVyc2lvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhenVyZU9wZW5BSUFwaUtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImF6dXJlT3BlbkFJQmFzZVBhdGhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib3JnYW5pemF0aW9uXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNsaWVudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjbGllbnRDb25maWdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vcGVuQUlBcGlLZXkgPVxuICAgICAgICAgICAgZmllbGRzPy5vcGVuQUlBcGlLZXkgPz8gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIk9QRU5BSV9BUElfS0VZXCIpO1xuICAgICAgICB0aGlzLmF6dXJlT3BlbkFJQXBpS2V5ID1cbiAgICAgICAgICAgIGZpZWxkcz8uYXp1cmVPcGVuQUlBcGlLZXkgPz9cbiAgICAgICAgICAgICAgICBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiQVpVUkVfT1BFTkFJX0FQSV9LRVlcIik7XG4gICAgICAgIGlmICghdGhpcy5henVyZU9wZW5BSUFwaUtleSAmJiAhdGhpcy5vcGVuQUlBcGlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wZW5BSSBvciBBenVyZSBPcGVuQUkgQVBJIGtleSBub3QgZm91bmRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5henVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSA9XG4gICAgICAgICAgICBmaWVsZHM/LmF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lID8/XG4gICAgICAgICAgICAgICAgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIkFaVVJFX09QRU5BSV9BUElfSU5TVEFOQ0VfTkFNRVwiKTtcbiAgICAgICAgdGhpcy5henVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lID1cbiAgICAgICAgICAgIGZpZWxkcz8uYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSA/P1xuICAgICAgICAgICAgICAgIGdldEVudmlyb25tZW50VmFyaWFibGUoXCJBWlVSRV9PUEVOQUlfQVBJX0RFUExPWU1FTlRfTkFNRVwiKTtcbiAgICAgICAgdGhpcy5henVyZU9wZW5BSUFwaVZlcnNpb24gPVxuICAgICAgICAgICAgZmllbGRzPy5henVyZU9wZW5BSUFwaVZlcnNpb24gPz9cbiAgICAgICAgICAgICAgICBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiQVpVUkVfT1BFTkFJX0FQSV9WRVJTSU9OXCIpO1xuICAgICAgICB0aGlzLmF6dXJlT3BlbkFJQmFzZVBhdGggPVxuICAgICAgICAgICAgZmllbGRzPy5henVyZU9wZW5BSUJhc2VQYXRoID8/XG4gICAgICAgICAgICAgICAgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIkFaVVJFX09QRU5BSV9CQVNFX1BBVEhcIik7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uID1cbiAgICAgICAgICAgIGZpZWxkcz8uY29uZmlndXJhdGlvbj8ub3JnYW5pemF0aW9uID8/XG4gICAgICAgICAgICAgICAgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIk9QRU5BSV9PUkdBTklaQVRJT05cIik7XG4gICAgICAgIHRoaXMubW9kZWxOYW1lID0gZmllbGRzPy5tb2RlbE5hbWUgPz8gdGhpcy5tb2RlbE5hbWU7XG4gICAgICAgIHRoaXMubW9kZWxLd2FyZ3MgPSBmaWVsZHM/Lm1vZGVsS3dhcmdzID8/IHt9O1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBmaWVsZHM/LnRpbWVvdXQ7XG4gICAgICAgIHRoaXMudGVtcGVyYXR1cmUgPSBmaWVsZHM/LnRlbXBlcmF0dXJlID8/IHRoaXMudGVtcGVyYXR1cmU7XG4gICAgICAgIHRoaXMudG9wUCA9IGZpZWxkcz8udG9wUCA/PyB0aGlzLnRvcFA7XG4gICAgICAgIHRoaXMuZnJlcXVlbmN5UGVuYWx0eSA9IGZpZWxkcz8uZnJlcXVlbmN5UGVuYWx0eSA/PyB0aGlzLmZyZXF1ZW5jeVBlbmFsdHk7XG4gICAgICAgIHRoaXMucHJlc2VuY2VQZW5hbHR5ID0gZmllbGRzPy5wcmVzZW5jZVBlbmFsdHkgPz8gdGhpcy5wcmVzZW5jZVBlbmFsdHk7XG4gICAgICAgIHRoaXMubWF4VG9rZW5zID0gZmllbGRzPy5tYXhUb2tlbnM7XG4gICAgICAgIHRoaXMubG9ncHJvYnMgPSBmaWVsZHM/LmxvZ3Byb2JzO1xuICAgICAgICB0aGlzLnRvcExvZ3Byb2JzID0gZmllbGRzPy50b3BMb2dwcm9icztcbiAgICAgICAgdGhpcy5uID0gZmllbGRzPy5uID8/IHRoaXMubjtcbiAgICAgICAgdGhpcy5sb2dpdEJpYXMgPSBmaWVsZHM/LmxvZ2l0QmlhcztcbiAgICAgICAgdGhpcy5zdG9wID0gZmllbGRzPy5zdG9wO1xuICAgICAgICB0aGlzLnVzZXIgPSBmaWVsZHM/LnVzZXI7XG4gICAgICAgIHRoaXMuc3RyZWFtaW5nID0gZmllbGRzPy5zdHJlYW1pbmcgPz8gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmF6dXJlT3BlbkFJQXBpS2V5KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUgJiYgIXRoaXMuYXp1cmVPcGVuQUlCYXNlUGF0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF6dXJlIE9wZW5BSSBBUEkgaW5zdGFuY2UgbmFtZSBub3QgZm91bmRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF6dXJlIE9wZW5BSSBBUEkgZGVwbG95bWVudCBuYW1lIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5henVyZU9wZW5BSUFwaVZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBenVyZSBPcGVuQUkgQVBJIHZlcnNpb24gbm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vcGVuQUlBcGlLZXkgPSB0aGlzLm9wZW5BSUFwaUtleSA/PyBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xpZW50Q29uZmlnID0ge1xuICAgICAgICAgICAgYXBpS2V5OiB0aGlzLm9wZW5BSUFwaUtleSxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbjogdGhpcy5vcmdhbml6YXRpb24sXG4gICAgICAgICAgICBiYXNlVVJMOiBjb25maWd1cmF0aW9uPy5iYXNlUGF0aCA/PyBmaWVsZHM/LmNvbmZpZ3VyYXRpb24/LmJhc2VQYXRoLFxuICAgICAgICAgICAgZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXI6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0SGVhZGVyczogY29uZmlndXJhdGlvbj8uYmFzZU9wdGlvbnM/LmhlYWRlcnMgPz9cbiAgICAgICAgICAgICAgICBmaWVsZHM/LmNvbmZpZ3VyYXRpb24/LmJhc2VPcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgZGVmYXVsdFF1ZXJ5OiBjb25maWd1cmF0aW9uPy5iYXNlT3B0aW9ucz8ucGFyYW1zID8/XG4gICAgICAgICAgICAgICAgZmllbGRzPy5jb25maWd1cmF0aW9uPy5iYXNlT3B0aW9ucz8ucGFyYW1zLFxuICAgICAgICAgICAgLi4uY29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIC4uLmZpZWxkcz8uY29uZmlndXJhdGlvbixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwYXJhbWV0ZXJzIHVzZWQgdG8gaW52b2tlIHRoZSBtb2RlbFxuICAgICAqL1xuICAgIGludm9jYXRpb25QYXJhbXMob3B0aW9ucykge1xuICAgICAgICBmdW5jdGlvbiBpc1N0cnVjdHVyZWRUb29sQXJyYXkodG9vbHMpIHtcbiAgICAgICAgICAgIHJldHVybiAodG9vbHMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHRvb2xzLmV2ZXJ5KCh0b29sKSA9PiBBcnJheS5pc0FycmF5KHRvb2wubGNfbmFtZXNwYWNlKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsTmFtZSxcbiAgICAgICAgICAgIHRlbXBlcmF0dXJlOiB0aGlzLnRlbXBlcmF0dXJlLFxuICAgICAgICAgICAgdG9wX3A6IHRoaXMudG9wUCxcbiAgICAgICAgICAgIGZyZXF1ZW5jeV9wZW5hbHR5OiB0aGlzLmZyZXF1ZW5jeVBlbmFsdHksXG4gICAgICAgICAgICBwcmVzZW5jZV9wZW5hbHR5OiB0aGlzLnByZXNlbmNlUGVuYWx0eSxcbiAgICAgICAgICAgIG1heF90b2tlbnM6IHRoaXMubWF4VG9rZW5zID09PSAtMSA/IHVuZGVmaW5lZCA6IHRoaXMubWF4VG9rZW5zLFxuICAgICAgICAgICAgbG9ncHJvYnM6IHRoaXMubG9ncHJvYnMsXG4gICAgICAgICAgICB0b3BfbG9ncHJvYnM6IHRoaXMudG9wTG9ncHJvYnMsXG4gICAgICAgICAgICBuOiB0aGlzLm4sXG4gICAgICAgICAgICBsb2dpdF9iaWFzOiB0aGlzLmxvZ2l0QmlhcyxcbiAgICAgICAgICAgIHN0b3A6IG9wdGlvbnM/LnN0b3AgPz8gdGhpcy5zdG9wLFxuICAgICAgICAgICAgdXNlcjogdGhpcy51c2VyLFxuICAgICAgICAgICAgc3RyZWFtOiB0aGlzLnN0cmVhbWluZyxcbiAgICAgICAgICAgIGZ1bmN0aW9uczogb3B0aW9ucz8uZnVuY3Rpb25zLFxuICAgICAgICAgICAgZnVuY3Rpb25fY2FsbDogb3B0aW9ucz8uZnVuY3Rpb25fY2FsbCxcbiAgICAgICAgICAgIHRvb2xzOiBpc1N0cnVjdHVyZWRUb29sQXJyYXkob3B0aW9ucz8udG9vbHMpXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zPy50b29scy5tYXAoY29udmVydFRvT3BlbkFJVG9vbClcbiAgICAgICAgICAgICAgICA6IG9wdGlvbnM/LnRvb2xzLFxuICAgICAgICAgICAgdG9vbF9jaG9pY2U6IG9wdGlvbnM/LnRvb2xfY2hvaWNlLFxuICAgICAgICAgICAgcmVzcG9uc2VfZm9ybWF0OiBvcHRpb25zPy5yZXNwb25zZV9mb3JtYXQsXG4gICAgICAgICAgICBzZWVkOiBvcHRpb25zPy5zZWVkLFxuICAgICAgICAgICAgLi4udGhpcy5tb2RlbEt3YXJncyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBfaWRlbnRpZnlpbmdQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlbF9uYW1lOiB0aGlzLm1vZGVsTmFtZSxcbiAgICAgICAgICAgIC4uLnRoaXMuaW52b2NhdGlvblBhcmFtcygpLFxuICAgICAgICAgICAgLi4udGhpcy5jbGllbnRDb25maWcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jICpfc3RyZWFtUmVzcG9uc2VDaHVua3MobWVzc2FnZXMsIG9wdGlvbnMsIHJ1bk1hbmFnZXIpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXNNYXBwZWQgPSBjb252ZXJ0TWVzc2FnZXNUb09wZW5BSVBhcmFtcyhtZXNzYWdlcyk7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuaW52b2NhdGlvblBhcmFtcyhvcHRpb25zKSxcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlc01hcHBlZCxcbiAgICAgICAgICAgIHN0cmVhbTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGRlZmF1bHRSb2xlO1xuICAgICAgICBjb25zdCBzdHJlYW1JdGVyYWJsZSA9IGF3YWl0IHRoaXMuY29tcGxldGlvbldpdGhSZXRyeShwYXJhbXMsIG9wdGlvbnMpO1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGRhdGEgb2Ygc3RyZWFtSXRlcmFibGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNob2ljZSA9IGRhdGE/LmNob2ljZXNbMF07XG4gICAgICAgICAgICBpZiAoIWNob2ljZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBkZWx0YSB9ID0gY2hvaWNlO1xuICAgICAgICAgICAgaWYgKCFkZWx0YSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBfY29udmVydERlbHRhVG9NZXNzYWdlQ2h1bmsoZGVsdGEsIGRlZmF1bHRSb2xlKTtcbiAgICAgICAgICAgIGRlZmF1bHRSb2xlID0gZGVsdGEucm9sZSA/PyBkZWZhdWx0Um9sZTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rva2VuSW5kaWNlcyA9IHtcbiAgICAgICAgICAgICAgICBwcm9tcHQ6IG9wdGlvbnMucHJvbXB0SW5kZXggPz8gMCxcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uOiBjaG9pY2UuaW5kZXggPz8gMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNodW5rLmNvbnRlbnQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXQVJOSU5HXTogUmVjZWl2ZWQgbm9uLXN0cmluZyBjb250ZW50IGZyb20gT3BlbkFJLiBUaGlzIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLlwiKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRpb25DaHVuayA9IG5ldyBDaGF0R2VuZXJhdGlvbkNodW5rKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaHVuayxcbiAgICAgICAgICAgICAgICB0ZXh0OiBjaHVuay5jb250ZW50LFxuICAgICAgICAgICAgICAgIGdlbmVyYXRpb25JbmZvOiBuZXdUb2tlbkluZGljZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHlpZWxkIGdlbmVyYXRpb25DaHVuaztcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12b2lkXG4gICAgICAgICAgICB2b2lkIHJ1bk1hbmFnZXI/LmhhbmRsZUxMTU5ld1Rva2VuKGdlbmVyYXRpb25DaHVuay50ZXh0ID8/IFwiXCIsIG5ld1Rva2VuSW5kaWNlcywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgeyBjaHVuazogZ2VuZXJhdGlvbkNodW5rIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWJvcnRFcnJvclwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGlkZW50aWZ5aW5nIHBhcmFtZXRlcnMgZm9yIHRoZSBtb2RlbFxuICAgICAqXG4gICAgICovXG4gICAgaWRlbnRpZnlpbmdQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZGVudGlmeWluZ1BhcmFtcygpO1xuICAgIH1cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIGFzeW5jIF9nZW5lcmF0ZShtZXNzYWdlcywgb3B0aW9ucywgcnVuTWFuYWdlcikge1xuICAgICAgICBjb25zdCB0b2tlblVzYWdlID0ge307XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuaW52b2NhdGlvblBhcmFtcyhvcHRpb25zKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZXNNYXBwZWQgPSBjb252ZXJ0TWVzc2FnZXNUb09wZW5BSVBhcmFtcyhtZXNzYWdlcyk7XG4gICAgICAgIGlmIChwYXJhbXMuc3RyZWFtKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLl9zdHJlYW1SZXNwb25zZUNodW5rcyhtZXNzYWdlcywgb3B0aW9ucywgcnVuTWFuYWdlcik7XG4gICAgICAgICAgICBjb25zdCBmaW5hbENodW5rcyA9IHt9O1xuICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNodW5rLmdlbmVyYXRpb25JbmZvPy5jb21wbGV0aW9uID8/IDA7XG4gICAgICAgICAgICAgICAgaWYgKGZpbmFsQ2h1bmtzW2luZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ2h1bmtzW2luZGV4XSA9IGNodW5rO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxDaHVua3NbaW5kZXhdID0gZmluYWxDaHVua3NbaW5kZXhdLmNvbmNhdChjaHVuayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGlvbnMgPSBPYmplY3QuZW50cmllcyhmaW5hbENodW5rcylcbiAgICAgICAgICAgICAgICAuc29ydCgoW2FLZXldLCBbYktleV0pID0+IHBhcnNlSW50KGFLZXksIDEwKSAtIHBhcnNlSW50KGJLZXksIDEwKSlcbiAgICAgICAgICAgICAgICAubWFwKChbXywgdmFsdWVdKSA9PiB2YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCB7IGZ1bmN0aW9ucywgZnVuY3Rpb25fY2FsbCB9ID0gdGhpcy5pbnZvY2F0aW9uUGFyYW1zKG9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gT3BlbkFJIGRvZXMgbm90IHN1cHBvcnQgdG9rZW4gdXNhZ2UgcmVwb3J0IHVuZGVyIHN0cmVhbSBtb2RlLFxuICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gZXN0aW1hdGlvbi5cbiAgICAgICAgICAgIGNvbnN0IHByb21wdFRva2VuVXNhZ2UgPSBhd2FpdCB0aGlzLmdldEVzdGltYXRlZFRva2VuQ291bnRGcm9tUHJvbXB0KG1lc3NhZ2VzLCBmdW5jdGlvbnMsIGZ1bmN0aW9uX2NhbGwpO1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGlvblRva2VuVXNhZ2UgPSBhd2FpdCB0aGlzLmdldE51bVRva2Vuc0Zyb21HZW5lcmF0aW9ucyhnZW5lcmF0aW9ucyk7XG4gICAgICAgICAgICB0b2tlblVzYWdlLnByb21wdFRva2VucyA9IHByb21wdFRva2VuVXNhZ2U7XG4gICAgICAgICAgICB0b2tlblVzYWdlLmNvbXBsZXRpb25Ub2tlbnMgPSBjb21wbGV0aW9uVG9rZW5Vc2FnZTtcbiAgICAgICAgICAgIHRva2VuVXNhZ2UudG90YWxUb2tlbnMgPSBwcm9tcHRUb2tlblVzYWdlICsgY29tcGxldGlvblRva2VuVXNhZ2U7XG4gICAgICAgICAgICByZXR1cm4geyBnZW5lcmF0aW9ucywgbGxtT3V0cHV0OiB7IGVzdGltYXRlZFRva2VuVXNhZ2U6IHRva2VuVXNhZ2UgfSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuY29tcGxldGlvbldpdGhSZXRyeSh7XG4gICAgICAgICAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICAgICAgICAgIHN0cmVhbTogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IG1lc3NhZ2VzTWFwcGVkLFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHNpZ25hbDogb3B0aW9ucz8uc2lnbmFsLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnM/Lm9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHsgY29tcGxldGlvbl90b2tlbnM6IGNvbXBsZXRpb25Ub2tlbnMsIHByb21wdF90b2tlbnM6IHByb21wdFRva2VucywgdG90YWxfdG9rZW5zOiB0b3RhbFRva2VucywgfSA9IGRhdGE/LnVzYWdlID8/IHt9O1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRpb25Ub2tlbnMpIHtcbiAgICAgICAgICAgICAgICB0b2tlblVzYWdlLmNvbXBsZXRpb25Ub2tlbnMgPVxuICAgICAgICAgICAgICAgICAgICAodG9rZW5Vc2FnZS5jb21wbGV0aW9uVG9rZW5zID8/IDApICsgY29tcGxldGlvblRva2VucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9tcHRUb2tlbnMpIHtcbiAgICAgICAgICAgICAgICB0b2tlblVzYWdlLnByb21wdFRva2VucyA9ICh0b2tlblVzYWdlLnByb21wdFRva2VucyA/PyAwKSArIHByb21wdFRva2VucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b3RhbFRva2Vucykge1xuICAgICAgICAgICAgICAgIHRva2VuVXNhZ2UudG90YWxUb2tlbnMgPSAodG9rZW5Vc2FnZS50b3RhbFRva2VucyA/PyAwKSArIHRvdGFsVG9rZW5zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBkYXRhPy5jaG9pY2VzID8/IFtdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHBhcnQubWVzc2FnZT8uY29udGVudCA/PyBcIlwiO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wZW5BSVJlc3BvbnNlVG9DaGF0TWVzc2FnZShwYXJ0Lm1lc3NhZ2UgPz8geyByb2xlOiBcImFzc2lzdGFudFwiIH0pLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGlvbi5nZW5lcmF0aW9uSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKHBhcnQuZmluaXNoX3JlYXNvbiA/IHsgZmluaXNoX3JlYXNvbjogcGFydC5maW5pc2hfcmVhc29uIH0gOiB7fSksXG4gICAgICAgICAgICAgICAgICAgIC4uLihwYXJ0LmxvZ3Byb2JzID8geyBsb2dwcm9iczogcGFydC5sb2dwcm9icyB9IDoge30pLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGlvbnMucHVzaChnZW5lcmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGlvbnMsXG4gICAgICAgICAgICAgICAgbGxtT3V0cHV0OiB7IHRva2VuVXNhZ2UgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRXN0aW1hdGUgdGhlIG51bWJlciBvZiB0b2tlbnMgYSBwcm9tcHQgd2lsbCB1c2UuXG4gICAgICogTW9kaWZpZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2htYXJyL29wZW5haS1jaGF0LXRva2Vucy9ibG9iL21haW4vc3JjL2luZGV4LnRzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RXN0aW1hdGVkVG9rZW5Db3VudEZyb21Qcm9tcHQobWVzc2FnZXMsIGZ1bmN0aW9ucywgZnVuY3Rpb25fY2FsbCkge1xuICAgICAgICAvLyBJdCBhcHBlYXJzIHRoYXQgaWYgZnVuY3Rpb25zIGFyZSBwcmVzZW50LCB0aGUgZmlyc3Qgc3lzdGVtIG1lc3NhZ2UgaXMgcGFkZGVkIHdpdGggYSB0cmFpbGluZyBuZXdsaW5lLiBUaGlzXG4gICAgICAgIC8vIHdhcyBpbmZlcnJlZCBieSB0cnlpbmcgbG90cyBvZiBjb21iaW5hdGlvbnMgb2YgbWVzc2FnZXMgYW5kIGZ1bmN0aW9ucyBhbmQgc2VlaW5nIHdoYXQgdGhlIHRva2VuIGNvdW50cyB3ZXJlLlxuICAgICAgICBsZXQgdG9rZW5zID0gKGF3YWl0IHRoaXMuZ2V0TnVtVG9rZW5zRnJvbU1lc3NhZ2VzKG1lc3NhZ2VzKSkudG90YWxDb3VudDtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucywgYWRkIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9ucyBhcyB0aGV5IGNvdW50IHRvd2FyZHMgdG9rZW4gdXNhZ2VcbiAgICAgICAgaWYgKGZ1bmN0aW9ucyAmJiBmdW5jdGlvbl9jYWxsICE9PSBcImF1dG9cIikge1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0RGVmaW5pdGlvbnMgPSBmb3JtYXRGdW5jdGlvbkRlZmluaXRpb25zKGZ1bmN0aW9ucyk7XG4gICAgICAgICAgICB0b2tlbnMgKz0gYXdhaXQgdGhpcy5nZXROdW1Ub2tlbnMocHJvbXB0RGVmaW5pdGlvbnMpO1xuICAgICAgICAgICAgdG9rZW5zICs9IDk7IC8vIEFkZCBuaW5lIHBlciBjb21wbGV0aW9uXG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUncyBhIHN5c3RlbSBtZXNzYWdlIF9hbmRfIGZ1bmN0aW9ucyBhcmUgcHJlc2VudCwgc3VidHJhY3QgZm91ciB0b2tlbnMuIEkgYXNzdW1lIHRoaXMgaXMgYmVjYXVzZVxuICAgICAgICAvLyBmdW5jdGlvbnMgdHlwaWNhbGx5IGFkZCBhIHN5c3RlbSBtZXNzYWdlLCBidXQgcmV1c2UgdGhlIGZpcnN0IG9uZSBpZiBpdCdzIGFscmVhZHkgdGhlcmUuIFRoaXMgb2Zmc2V0c1xuICAgICAgICAvLyB0aGUgZXh0cmEgOSB0b2tlbnMgYWRkZWQgYnkgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb25zLlxuICAgICAgICBpZiAoZnVuY3Rpb25zICYmIG1lc3NhZ2VzLmZpbmQoKG0pID0+IG0uX2dldFR5cGUoKSA9PT0gXCJzeXN0ZW1cIikpIHtcbiAgICAgICAgICAgIHRva2VucyAtPSA0O1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGZ1bmN0aW9uX2NhbGwgaXMgJ25vbmUnLCBhZGQgb25lIHRva2VuLlxuICAgICAgICAvLyBJZiBpdCdzIGEgRnVuY3Rpb25DYWxsIG9iamVjdCwgYWRkIDQgKyB0aGUgbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgICAgLy8gSWYgaXQncyB1bmRlZmluZWQgb3IgJ2F1dG8nLCBkb24ndCBhZGQgYW55dGhpbmcuXG4gICAgICAgIGlmIChmdW5jdGlvbl9jYWxsID09PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgdG9rZW5zICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGZ1bmN0aW9uX2NhbGwgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRva2VucyArPSAoYXdhaXQgdGhpcy5nZXROdW1Ub2tlbnMoZnVuY3Rpb25fY2FsbC5uYW1lKSkgKyA0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVzdGltYXRlIHRoZSBudW1iZXIgb2YgdG9rZW5zIGFuIGFycmF5IG9mIGdlbmVyYXRpb25zIGhhdmUgdXNlZC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXROdW1Ub2tlbnNGcm9tR2VuZXJhdGlvbnMoZ2VuZXJhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZ2VuZXJhdGlvblVzYWdlcyA9IGF3YWl0IFByb21pc2UuYWxsKGdlbmVyYXRpb25zLm1hcChhc3luYyAoZ2VuZXJhdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKGdlbmVyYXRpb24ubWVzc2FnZS5hZGRpdGlvbmFsX2t3YXJncz8uZnVuY3Rpb25fY2FsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXROdW1Ub2tlbnNGcm9tTWVzc2FnZXMoW2dlbmVyYXRpb24ubWVzc2FnZV0pKVxuICAgICAgICAgICAgICAgICAgICAuY291bnRQZXJNZXNzYWdlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TnVtVG9rZW5zKGdlbmVyYXRpb24ubWVzc2FnZS5jb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZ2VuZXJhdGlvblVzYWdlcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TnVtVG9rZW5zRnJvbU1lc3NhZ2VzKG1lc3NhZ2VzKSB7XG4gICAgICAgIGxldCB0b3RhbENvdW50ID0gMDtcbiAgICAgICAgbGV0IHRva2Vuc1Blck1lc3NhZ2UgPSAwO1xuICAgICAgICBsZXQgdG9rZW5zUGVyTmFtZSA9IDA7XG4gICAgICAgIC8vIEZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuYWkvb3BlbmFpLWNvb2tib29rL2Jsb2IvbWFpbi9leGFtcGxlcy9Ib3dfdG9fZm9ybWF0X2lucHV0c190b19DaGF0R1BUX21vZGVscy5pcHluYlxuICAgICAgICBpZiAodGhpcy5tb2RlbE5hbWUgPT09IFwiZ3B0LTMuNS10dXJiby0wMzAxXCIpIHtcbiAgICAgICAgICAgIHRva2Vuc1Blck1lc3NhZ2UgPSA0O1xuICAgICAgICAgICAgdG9rZW5zUGVyTmFtZSA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG9rZW5zUGVyTWVzc2FnZSA9IDM7XG4gICAgICAgICAgICB0b2tlbnNQZXJOYW1lID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb3VudFBlck1lc3NhZ2UgPSBhd2FpdCBQcm9taXNlLmFsbChtZXNzYWdlcy5tYXAoYXN5bmMgKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRDb3VudCA9IGF3YWl0IHRoaXMuZ2V0TnVtVG9rZW5zKG1lc3NhZ2UuY29udGVudCk7XG4gICAgICAgICAgICBjb25zdCByb2xlQ291bnQgPSBhd2FpdCB0aGlzLmdldE51bVRva2VucyhtZXNzYWdlVG9PcGVuQUlSb2xlKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVDb3VudCA9IG1lc3NhZ2UubmFtZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyB0b2tlbnNQZXJOYW1lICsgKGF3YWl0IHRoaXMuZ2V0TnVtVG9rZW5zKG1lc3NhZ2UubmFtZSkpXG4gICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gdGV4dENvdW50ICsgdG9rZW5zUGVyTWVzc2FnZSArIHJvbGVDb3VudCArIG5hbWVDb3VudDtcbiAgICAgICAgICAgIC8vIEZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9obWFyci9vcGVuYWktY2hhdC10b2tlbnMvYmxvYi9tYWluL3NyYy9pbmRleC50cyBtZXNzYWdlVG9rZW5Fc3RpbWF0ZVxuICAgICAgICAgICAgY29uc3Qgb3BlbkFJTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAob3BlbkFJTWVzc2FnZS5fZ2V0VHlwZSgpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb3VudCAtPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wZW5BSU1lc3NhZ2UuYWRkaXRpb25hbF9rd2FyZ3M/LmZ1bmN0aW9uX2NhbGwpIHtcbiAgICAgICAgICAgICAgICBjb3VudCArPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wZW5BSU1lc3NhZ2U/LmFkZGl0aW9uYWxfa3dhcmdzLmZ1bmN0aW9uX2NhbGw/Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb3VudCArPSBhd2FpdCB0aGlzLmdldE51bVRva2VucyhvcGVuQUlNZXNzYWdlLmFkZGl0aW9uYWxfa3dhcmdzLmZ1bmN0aW9uX2NhbGw/Lm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wZW5BSU1lc3NhZ2UuYWRkaXRpb25hbF9rd2FyZ3MuZnVuY3Rpb25fY2FsbD8uYXJndW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgY291bnQgKz0gYXdhaXQgdGhpcy5nZXROdW1Ub2tlbnMoXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG5ld2xpbmVzIGFuZCBzcGFjZXNcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShKU09OLnBhcnNlKG9wZW5BSU1lc3NhZ2UuYWRkaXRpb25hbF9rd2FyZ3MuZnVuY3Rpb25fY2FsbD8uYXJndW1lbnRzKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG90YWxDb3VudCArPSBjb3VudDtcbiAgICAgICAgICAgIHJldHVybiBjb3VudDtcbiAgICAgICAgfSkpO1xuICAgICAgICB0b3RhbENvdW50ICs9IDM7IC8vIGV2ZXJ5IHJlcGx5IGlzIHByaW1lZCB3aXRoIDx8c3RhcnR8PmFzc2lzdGFudDx8bWVzc2FnZXw+XG4gICAgICAgIHJldHVybiB7IHRvdGFsQ291bnQsIGNvdW50UGVyTWVzc2FnZSB9O1xuICAgIH1cbiAgICBhc3luYyBjb21wbGV0aW9uV2l0aFJldHJ5KHJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRDbGllbnRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsZXIuY2FsbChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHJlcXVlc3QsIHJlcXVlc3RPcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IHdyYXBPcGVuQUlDbGllbnRFcnJvcihlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRDbGllbnRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsaWVudCkge1xuICAgICAgICAgICAgY29uc3Qgb3BlbkFJRW5kcG9pbnRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZTogdGhpcy5henVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lLFxuICAgICAgICAgICAgICAgIGF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lOiB0aGlzLmF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lLFxuICAgICAgICAgICAgICAgIGF6dXJlT3BlbkFJQXBpS2V5OiB0aGlzLmF6dXJlT3BlbkFJQXBpS2V5LFxuICAgICAgICAgICAgICAgIGF6dXJlT3BlbkFJQmFzZVBhdGg6IHRoaXMuYXp1cmVPcGVuQUlCYXNlUGF0aCxcbiAgICAgICAgICAgICAgICBiYXNlVVJMOiB0aGlzLmNsaWVudENvbmZpZy5iYXNlVVJMLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gZ2V0RW5kcG9pbnQob3BlbkFJRW5kcG9pbnRDb25maWcpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuY2xpZW50Q29uZmlnLFxuICAgICAgICAgICAgICAgIGJhc2VVUkw6IGVuZHBvaW50LFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHRoaXMudGltZW91dCxcbiAgICAgICAgICAgICAgICBtYXhSZXRyaWVzOiAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghcGFyYW1zLmJhc2VVUkwpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgcGFyYW1zLmJhc2VVUkw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsaWVudCA9IG5ldyBPcGVuQUlDbGllbnQocGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuY2xpZW50Q29uZmlnLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuYXp1cmVPcGVuQUlBcGlLZXkpIHtcbiAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgXCJhcGkta2V5XCI6IHRoaXMuYXp1cmVPcGVuQUlBcGlLZXksXG4gICAgICAgICAgICAgICAgLi4ucmVxdWVzdE9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXF1ZXN0T3B0aW9ucy5xdWVyeSA9IHtcbiAgICAgICAgICAgICAgICBcImFwaS12ZXJzaW9uXCI6IHRoaXMuYXp1cmVPcGVuQUlBcGlWZXJzaW9uLFxuICAgICAgICAgICAgICAgIC4uLnJlcXVlc3RPcHRpb25zLnF1ZXJ5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWVzdE9wdGlvbnM7XG4gICAgfVxuICAgIF9sbG1UeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJvcGVuYWlcIjtcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBfY29tYmluZUxMTU91dHB1dCguLi5sbG1PdXRwdXRzKSB7XG4gICAgICAgIHJldHVybiBsbG1PdXRwdXRzLnJlZHVjZSgoYWNjLCBsbG1PdXRwdXQpID0+IHtcbiAgICAgICAgICAgIGlmIChsbG1PdXRwdXQgJiYgbGxtT3V0cHV0LnRva2VuVXNhZ2UpIHtcbiAgICAgICAgICAgICAgICBhY2MudG9rZW5Vc2FnZS5jb21wbGV0aW9uVG9rZW5zICs9XG4gICAgICAgICAgICAgICAgICAgIGxsbU91dHB1dC50b2tlblVzYWdlLmNvbXBsZXRpb25Ub2tlbnMgPz8gMDtcbiAgICAgICAgICAgICAgICBhY2MudG9rZW5Vc2FnZS5wcm9tcHRUb2tlbnMgKz0gbGxtT3V0cHV0LnRva2VuVXNhZ2UucHJvbXB0VG9rZW5zID8/IDA7XG4gICAgICAgICAgICAgICAgYWNjLnRva2VuVXNhZ2UudG90YWxUb2tlbnMgKz0gbGxtT3V0cHV0LnRva2VuVXNhZ2UudG90YWxUb2tlbnMgPz8gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHRva2VuVXNhZ2U6IHtcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uVG9rZW5zOiAwLFxuICAgICAgICAgICAgICAgIHByb21wdFRva2VuczogMCxcbiAgICAgICAgICAgICAgICB0b3RhbFRva2VuczogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJPcGVuQUkiLCJPcGVuQUlDbGllbnQiLCJBSU1lc3NhZ2UiLCJBSU1lc3NhZ2VDaHVuayIsIkNoYXRNZXNzYWdlIiwiQ2hhdE1lc3NhZ2VDaHVuayIsIkZ1bmN0aW9uTWVzc2FnZUNodW5rIiwiSHVtYW5NZXNzYWdlQ2h1bmsiLCJTeXN0ZW1NZXNzYWdlQ2h1bmsiLCJUb29sTWVzc2FnZUNodW5rIiwiQ2hhdEdlbmVyYXRpb25DaHVuayIsImdldEVudmlyb25tZW50VmFyaWFibGUiLCJCYXNlQ2hhdE1vZGVsIiwiY29udmVydFRvT3BlbkFJVG9vbCIsImdldEVuZHBvaW50Iiwid3JhcE9wZW5BSUNsaWVudEVycm9yIiwiZm9ybWF0RnVuY3Rpb25EZWZpbml0aW9ucyIsImV4dHJhY3RHZW5lcmljTWVzc2FnZUN1c3RvbVJvbGUiLCJtZXNzYWdlIiwicm9sZSIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZVRvT3BlbkFJUm9sZSIsInR5cGUiLCJfZ2V0VHlwZSIsImlzSW5zdGFuY2UiLCJFcnJvciIsIm9wZW5BSVJlc3BvbnNlVG9DaGF0TWVzc2FnZSIsImNvbnRlbnQiLCJmdW5jdGlvbl9jYWxsIiwidG9vbF9jYWxscyIsIl9jb252ZXJ0RGVsdGFUb01lc3NhZ2VDaHVuayIsImRlbHRhIiwiZGVmYXVsdFJvbGUiLCJhZGRpdGlvbmFsX2t3YXJncyIsIm5hbWUiLCJ0b29sX2NhbGxfaWQiLCJjb252ZXJ0TWVzc2FnZXNUb09wZW5BSVBhcmFtcyIsIm1lc3NhZ2VzIiwibWFwIiwiQ2hhdE9wZW5BSSIsImxjX25hbWUiLCJjYWxsS2V5cyIsImxjX3NlY3JldHMiLCJvcGVuQUlBcGlLZXkiLCJhenVyZU9wZW5BSUFwaUtleSIsIm9yZ2FuaXphdGlvbiIsImxjX2FsaWFzZXMiLCJtb2RlbE5hbWUiLCJhenVyZU9wZW5BSUFwaVZlcnNpb24iLCJhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSIsImF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsImNvbmZpZ3VyYXRpb24iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiYXp1cmVPcGVuQUlCYXNlUGF0aCIsIm1vZGVsS3dhcmdzIiwidGltZW91dCIsInRlbXBlcmF0dXJlIiwidG9wUCIsImZyZXF1ZW5jeVBlbmFsdHkiLCJwcmVzZW5jZVBlbmFsdHkiLCJtYXhUb2tlbnMiLCJsb2dwcm9icyIsInRvcExvZ3Byb2JzIiwibiIsImxvZ2l0QmlhcyIsInN0b3AiLCJ1c2VyIiwic3RyZWFtaW5nIiwiY2xpZW50Q29uZmlnIiwiYXBpS2V5IiwiYmFzZVVSTCIsImJhc2VQYXRoIiwiZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXIiLCJkZWZhdWx0SGVhZGVycyIsImJhc2VPcHRpb25zIiwiaGVhZGVycyIsImRlZmF1bHRRdWVyeSIsInBhcmFtcyIsImludm9jYXRpb25QYXJhbXMiLCJvcHRpb25zIiwiaXNTdHJ1Y3R1cmVkVG9vbEFycmF5IiwidG9vbHMiLCJ1bmRlZmluZWQiLCJldmVyeSIsInRvb2wiLCJBcnJheSIsImlzQXJyYXkiLCJsY19uYW1lc3BhY2UiLCJtb2RlbCIsInRvcF9wIiwiZnJlcXVlbmN5X3BlbmFsdHkiLCJwcmVzZW5jZV9wZW5hbHR5IiwibWF4X3Rva2VucyIsInRvcF9sb2dwcm9icyIsImxvZ2l0X2JpYXMiLCJzdHJlYW0iLCJmdW5jdGlvbnMiLCJ0b29sX2Nob2ljZSIsInJlc3BvbnNlX2Zvcm1hdCIsInNlZWQiLCJfaWRlbnRpZnlpbmdQYXJhbXMiLCJtb2RlbF9uYW1lIiwiX3N0cmVhbVJlc3BvbnNlQ2h1bmtzIiwicnVuTWFuYWdlciIsIm1lc3NhZ2VzTWFwcGVkIiwic3RyZWFtSXRlcmFibGUiLCJjb21wbGV0aW9uV2l0aFJldHJ5IiwiZGF0YSIsImNob2ljZSIsImNob2ljZXMiLCJjaHVuayIsIm5ld1Rva2VuSW5kaWNlcyIsInByb21wdCIsInByb21wdEluZGV4IiwiY29tcGxldGlvbiIsImluZGV4IiwibG9nIiwiZ2VuZXJhdGlvbkNodW5rIiwidGV4dCIsImdlbmVyYXRpb25JbmZvIiwiaGFuZGxlTExNTmV3VG9rZW4iLCJzaWduYWwiLCJhYm9ydGVkIiwiaWRlbnRpZnlpbmdQYXJhbXMiLCJfZ2VuZXJhdGUiLCJ0b2tlblVzYWdlIiwiZmluYWxDaHVua3MiLCJjb25jYXQiLCJnZW5lcmF0aW9ucyIsImVudHJpZXMiLCJzb3J0IiwiYUtleSIsImJLZXkiLCJwYXJzZUludCIsIl8iLCJwcm9tcHRUb2tlblVzYWdlIiwiZ2V0RXN0aW1hdGVkVG9rZW5Db3VudEZyb21Qcm9tcHQiLCJjb21wbGV0aW9uVG9rZW5Vc2FnZSIsImdldE51bVRva2Vuc0Zyb21HZW5lcmF0aW9ucyIsInByb21wdFRva2VucyIsImNvbXBsZXRpb25Ub2tlbnMiLCJ0b3RhbFRva2VucyIsImxsbU91dHB1dCIsImVzdGltYXRlZFRva2VuVXNhZ2UiLCJjb21wbGV0aW9uX3Rva2VucyIsInByb21wdF90b2tlbnMiLCJ0b3RhbF90b2tlbnMiLCJ1c2FnZSIsInBhcnQiLCJnZW5lcmF0aW9uIiwiZmluaXNoX3JlYXNvbiIsInB1c2giLCJ0b2tlbnMiLCJnZXROdW1Ub2tlbnNGcm9tTWVzc2FnZXMiLCJ0b3RhbENvdW50IiwicHJvbXB0RGVmaW5pdGlvbnMiLCJnZXROdW1Ub2tlbnMiLCJmaW5kIiwibSIsImdlbmVyYXRpb25Vc2FnZXMiLCJQcm9taXNlIiwiYWxsIiwiY291bnRQZXJNZXNzYWdlIiwicmVkdWNlIiwiYSIsImIiLCJ0b2tlbnNQZXJNZXNzYWdlIiwidG9rZW5zUGVyTmFtZSIsInRleHRDb3VudCIsInJvbGVDb3VudCIsIm5hbWVDb3VudCIsImNvdW50Iiwib3BlbkFJTWVzc2FnZSIsImFyZ3VtZW50cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZSIsInJlcXVlc3QiLCJyZXF1ZXN0T3B0aW9ucyIsIl9nZXRDbGllbnRPcHRpb25zIiwiY2FsbGVyIiwiY2FsbCIsInJlcyIsImNsaWVudCIsImNoYXQiLCJjb21wbGV0aW9ucyIsImNyZWF0ZSIsImUiLCJlcnJvciIsIm9wZW5BSUVuZHBvaW50Q29uZmlnIiwiZW5kcG9pbnQiLCJtYXhSZXRyaWVzIiwicXVlcnkiLCJfbGxtVHlwZSIsIl9jb21iaW5lTExNT3V0cHV0IiwibGxtT3V0cHV0cyIsImFjYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/embeddings.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/embeddings.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIEmbeddings: () => (/* binding */ OpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/@langchain/core/embeddings.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n/**\n * Class for generating embeddings using the OpenAI API. Extends the\n * Embeddings class and implements OpenAIEmbeddingsParams and\n * AzureOpenAIInput.\n * @example\n * ```typescript\n * // Embed a query using OpenAIEmbeddings to generate embeddings for a given text\n * const model = new OpenAIEmbeddings();\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\",\n * );\n * console.log({ res });\n *\n * ```\n */ class OpenAIEmbeddings extends _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_1__.Embeddings {\n    constructor(fields, configuration){\n        const fieldsWithDefaults = {\n            maxConcurrency: 2,\n            ...fields\n        };\n        super(fieldsWithDefaults);\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        // TODO: Update to `false` on next minor release (see: https://github.com/langchain-ai/langchainjs/pull/3612)\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * The number of dimensions the resulting output embeddings should have.\n         * Only supported in `text-embedding-3` and later models.\n         */ Object.defineProperty(this, \"dimensions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        let apiKey = fieldsWithDefaults?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        const azureApiKey = fieldsWithDefaults?.azureOpenAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        if (!azureApiKey && !apiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        const azureApiInstanceName = fieldsWithDefaults?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        const azureApiDeploymentName = (fieldsWithDefaults?.azureOpenAIApiEmbeddingsDeploymentName || fieldsWithDefaults?.azureOpenAIApiDeploymentName) ?? ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        const azureApiVersion = fieldsWithDefaults?.azureOpenAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fieldsWithDefaults?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization = fieldsWithDefaults?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = fieldsWithDefaults?.modelName ?? this.modelName;\n        this.batchSize = fieldsWithDefaults?.batchSize ?? (azureApiKey ? 1 : this.batchSize);\n        this.stripNewLines = fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n        this.timeout = fieldsWithDefaults?.timeout;\n        this.dimensions = fieldsWithDefaults?.dimensions;\n        this.azureOpenAIApiVersion = azureApiVersion;\n        this.azureOpenAIApiKey = azureApiKey;\n        this.azureOpenAIApiInstanceName = azureApiInstanceName;\n        this.azureOpenAIApiDeploymentName = azureApiDeploymentName;\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            apiKey = apiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration\n        };\n    }\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the OpenAI API to generate\n     * embeddings.\n     * @param texts Array of documents to generate embeddings for.\n     * @returns Promise that resolves to a 2D array of embeddings for each document.\n     */ async embedDocuments(texts) {\n        const batches = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_2__.chunkArray)(this.stripNewLines ? texts.map((t)=>t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n        const batchRequests = batches.map((batch)=>{\n            const params = {\n                model: this.modelName,\n                input: batch\n            };\n            if (this.dimensions) {\n                params.dimensions = this.dimensions;\n            }\n            return this.embeddingWithRetry(params);\n        });\n        const batchResponses = await Promise.all(batchRequests);\n        const embeddings = [];\n        for(let i = 0; i < batchResponses.length; i += 1){\n            const batch = batches[i];\n            const { data: batchResponse } = batchResponses[i];\n            for(let j = 0; j < batch.length; j += 1){\n                embeddings.push(batchResponse[j].embedding);\n            }\n        }\n        return embeddings;\n    }\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param text Document to generate an embedding for.\n     * @returns Promise that resolves to an embedding for the document.\n     */ async embedQuery(text) {\n        const params = {\n            model: this.modelName,\n            input: this.stripNewLines ? text.replace(/\\n/g, \" \") : text\n        };\n        if (this.dimensions) {\n            params.dimensions = this.dimensions;\n        }\n        const { data } = await this.embeddingWithRetry(params);\n        return data[0].embedding;\n    }\n    /**\n     * Private method to make a request to the OpenAI API to generate\n     * embeddings. Handles the retry logic and returns the response from the\n     * API.\n     * @param request Request to send to the OpenAI API.\n     * @returns Promise that resolves to the response from the API.\n     */ async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_3__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_5__.OpenAI(params);\n        }\n        const requestOptions = {};\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_4__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* reexport safe */ _azure_chat_models_js__WEBPACK_IMPORTED_MODULE_2__.AzureChatOpenAI),\n/* harmony export */   AzureOpenAI: () => (/* reexport safe */ _azure_llms_js__WEBPACK_IMPORTED_MODULE_4__.AzureOpenAI),\n/* harmony export */   ChatOpenAI: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_1__.ChatOpenAI),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _llms_js__WEBPACK_IMPORTED_MODULE_3__.OpenAI),\n/* harmony export */   OpenAIChat: () => (/* reexport safe */ _llms_js__WEBPACK_IMPORTED_MODULE_3__.OpenAIChat),\n/* harmony export */   OpenAIClient: () => (/* reexport safe */ openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIEmbeddings: () => (/* reexport safe */ _embeddings_js__WEBPACK_IMPORTED_MODULE_5__.OpenAIEmbeddings),\n/* harmony export */   formatToOpenAIAssistantTool: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_7__.formatToOpenAIAssistantTool),\n/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_7__.formatToOpenAIFunction),\n/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_7__.formatToOpenAITool),\n/* harmony export */   getEndpoint: () => (/* reexport safe */ _utils_azure_js__WEBPACK_IMPORTED_MODULE_8__.getEndpoint),\n/* harmony export */   messageToOpenAIRole: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_1__.messageToOpenAIRole),\n/* harmony export */   toFile: () => (/* reexport safe */ openai__WEBPACK_IMPORTED_MODULE_0__.toFile),\n/* harmony export */   wrapOpenAIClientError: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_7__.wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat_models.js */ \"(rsc)/./node_modules/@langchain/openai/dist/chat_models.js\");\n/* harmony import */ var _azure_chat_models_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./azure/chat_models.js */ \"(rsc)/./node_modules/@langchain/openai/dist/azure/chat_models.js\");\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./llms.js */ \"(rsc)/./node_modules/@langchain/openai/dist/llms.js\");\n/* harmony import */ var _azure_llms_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./azure/llms.js */ \"(rsc)/./node_modules/@langchain/openai/dist/azure/llms.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./embeddings.js */ \"(rsc)/./node_modules/@langchain/openai/dist/embeddings.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@langchain/openai/dist/types.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RDtBQUN2QjtBQUNNO0FBQ2I7QUFDTTtBQUNBO0FBQ0w7QUFDTztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvaW5kZXguanM/ZmM1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBPcGVuQUkgYXMgT3BlbkFJQ2xpZW50LCB0b0ZpbGUgfSBmcm9tIFwib3BlbmFpXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jaGF0X21vZGVscy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYXp1cmUvY2hhdF9tb2RlbHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xsbXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F6dXJlL2xsbXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VtYmVkZGluZ3MuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy9vcGVuYWkuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL2F6dXJlLmpzXCI7XG4iXSwibmFtZXMiOlsiT3BlbkFJIiwiT3BlbkFJQ2xpZW50IiwidG9GaWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/legacy.js":
/*!*******************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/legacy.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIChat: () => (/* binding */ OpenAIChat)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/@langchain/core/language_models/llms.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n/**\n * @deprecated For legacy compatibility. Use ChatOpenAI instead.\n *\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n *\n * @augments BaseLLM\n * @augments OpenAIInput\n * @augments AzureOpenAIChatInput\n * @example\n * ```typescript\n * const model = new OpenAIChat({\n *   prefixMessages: [\n *     {\n *       role: \"system\",\n *       content: \"You are a helpful assistant that answers in pirate language\",\n *     },\n *   ],\n *   maxTokens: 50,\n * });\n *\n * const res = await model.call(\n *   \"What would be a good company name for a company that makes colorful socks?\"\n * );\n * console.log({ res });\n * ```\n */ class OpenAIChat extends _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_2__.LLM {\n    static lc_name() {\n        return \"OpenAIChat\";\n    }\n    get callKeys() {\n        return [\n            ...super.callKeys,\n            \"options\",\n            \"promptIndex\"\n        ];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\"\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\"\n        };\n    }\n    constructor(fields, /** @deprecated */ configuration){\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"prefixMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey = fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName = (fields?.azureOpenAIApiCompletionsDeploymentName || fields?.azureOpenAIApiDeploymentName) ?? ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization = fields?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.prefixMessages = fields?.prefixMessages ?? this.prefixMessages;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.maxTokens = fields?.maxTokens;\n        this.stop = fields?.stop;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.n > 1) {\n            throw new Error(\"Cannot use n > 1 in OpenAIChat LLM. Use ChatOpenAI Chat Model instead.\");\n        }\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.openAIApiKey = this.openAIApiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ?? fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ?? fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ invocationParams(options) {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            logit_bias: this.logitBias,\n            max_tokens: this.maxTokens === -1 ? undefined : this.maxTokens,\n            stop: options?.stop ?? this.stop,\n            user: this.user,\n            stream: this.streaming,\n            ...this.modelKwargs\n        };\n    }\n    /** @ignore */ _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */ identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    /**\n     * Formats the messages for the OpenAI API.\n     * @param prompt The prompt to be formatted.\n     * @returns Array of formatted messages.\n     */ formatMessages(prompt) {\n        const message = {\n            role: \"user\",\n            content: prompt\n        };\n        return this.prefixMessages ? [\n            ...this.prefixMessages,\n            message\n        ] : [\n            message\n        ];\n    }\n    async *_streamResponseChunks(prompt, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            messages: this.formatMessages(prompt),\n            stream: true\n        };\n        const stream = await this.completionWithRetry(params, options);\n        for await (const data of stream){\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const { delta } = choice;\n            const generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk({\n                text: delta.content ?? \"\"\n            });\n            yield generationChunk;\n            const newTokenIndices = {\n                prompt: options.promptIndex ?? 0,\n                completion: choice.index ?? 0\n            };\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices);\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    /** @ignore */ async _call(prompt, options, runManager) {\n        const params = this.invocationParams(options);\n        if (params.stream) {\n            const stream = await this._streamResponseChunks(prompt, options, runManager);\n            let finalChunk;\n            for await (const chunk of stream){\n                if (finalChunk === undefined) {\n                    finalChunk = chunk;\n                } else {\n                    finalChunk = finalChunk.concat(chunk);\n                }\n            }\n            return finalChunk?.text ?? \"\";\n        } else {\n            const response = await this.completionWithRetry({\n                ...params,\n                stream: false,\n                messages: this.formatMessages(prompt)\n            }, {\n                signal: options.signal,\n                ...options.options\n            });\n            return response?.choices[0]?.message?.content ?? \"\";\n        }\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.chat.completions.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_4__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    /** @ignore */ _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_3__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_5__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/legacy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/llms.js":
/*!*****************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/llms.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   OpenAIChat: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_6__.OpenAIChat)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/@langchain/core/language_models/llms.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./legacy.js */ \"(rsc)/./node_modules/@langchain/openai/dist/legacy.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrapper around OpenAI large language models.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/completions/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * const model = new OpenAI({\n *   modelName: \"gpt-4\",\n *   temperature: 0.7,\n *   maxTokens: 1000,\n *   maxRetries: 5,\n * });\n *\n * const res = await model.call(\n *   \"Question: What would be a good company name for a company that makes colorful socks?\\nAnswer:\"\n * );\n * console.log({ res });\n * ```\n */ class OpenAI extends _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_3__.BaseLLM {\n    static lc_name() {\n        return \"OpenAI\";\n    }\n    get callKeys() {\n        return [\n            ...super.callKeys,\n            \"options\"\n        ];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\"\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\"\n        };\n    }\n    constructor(fields, /** @deprecated */ configuration){\n        if ((fields?.modelName?.startsWith(\"gpt-3.5-turbo\") || fields?.modelName?.startsWith(\"gpt-4\")) && !fields?.modelName?.includes(\"-instruct\")) {\n            // eslint-disable-next-line no-constructor-return\n            return new _legacy_js__WEBPACK_IMPORTED_MODULE_6__.OpenAIChat(fields, configuration);\n        }\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.7\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 256\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"bestOf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo-instruct\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 20\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey = fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName = (fields?.azureOpenAIApiCompletionsDeploymentName || fields?.azureOpenAIApiDeploymentName) ?? ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization = fields?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.bestOf = fields?.bestOf ?? this.bestOf;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stop;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.streaming && this.bestOf && this.bestOf > 1) {\n            throw new Error(\"Cannot stream results when bestOf > 1\");\n        }\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.openAIApiKey = this.openAIApiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ?? fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ?? fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ invocationParams(options) {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            max_tokens: this.maxTokens,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            best_of: this.bestOf,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stop,\n            user: this.user,\n            stream: this.streaming,\n            ...this.modelKwargs\n        };\n    }\n    /** @ignore */ _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */ identifyingParams() {\n        return this._identifyingParams();\n    }\n    /**\n     * Call out to OpenAI's endpoint with k unique prompts\n     *\n     * @param [prompts] - The prompts to pass into the model.\n     * @param [options] - Optional list of stop words to use when generating.\n     * @param [runManager] - Optional callback manager to use when generating.\n     *\n     * @returns The full LLM output.\n     *\n     * @example\n     * ```ts\n     * import { OpenAI } from \"langchain/llms/openai\";\n     * const openai = new OpenAI();\n     * const response = await openai.generate([\"Tell me a joke.\"]);\n     * ```\n     */ async _generate(prompts, options, runManager) {\n        const subPrompts = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__.chunkArray)(prompts, this.batchSize);\n        const choices = [];\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        if (params.max_tokens === -1) {\n            if (prompts.length !== 1) {\n                throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n            }\n            params.max_tokens = await (0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__.calculateMaxTokens)({\n                prompt: prompts[0],\n                // Cast here to allow for other models that may not fit the union\n                modelName: this.modelName\n            });\n        }\n        for(let i = 0; i < subPrompts.length; i += 1){\n            const data = params.stream ? await (async ()=>{\n                const choices = [];\n                let response;\n                const stream = await this.completionWithRetry({\n                    ...params,\n                    stream: true,\n                    prompt: subPrompts[i]\n                }, options);\n                for await (const message of stream){\n                    // on the first message set the response properties\n                    if (!response) {\n                        response = {\n                            id: message.id,\n                            object: message.object,\n                            created: message.created,\n                            model: message.model\n                        };\n                    }\n                    // on all messages, update choice\n                    for (const part of message.choices){\n                        if (!choices[part.index]) {\n                            choices[part.index] = part;\n                        } else {\n                            const choice = choices[part.index];\n                            choice.text += part.text;\n                            choice.finish_reason = part.finish_reason;\n                            choice.logprobs = part.logprobs;\n                        }\n                        void runManager?.handleLLMNewToken(part.text, {\n                            prompt: Math.floor(part.index / this.n),\n                            completion: part.index % this.n\n                        });\n                    }\n                }\n                if (options.signal?.aborted) {\n                    throw new Error(\"AbortError\");\n                }\n                return {\n                    ...response,\n                    choices\n                };\n            })() : await this.completionWithRetry({\n                ...params,\n                stream: false,\n                prompt: subPrompts[i]\n            }, {\n                signal: options.signal,\n                ...options.options\n            });\n            choices.push(...data.choices);\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens } = data.usage ? data.usage : {\n                completion_tokens: undefined,\n                prompt_tokens: undefined,\n                total_tokens: undefined\n            };\n            if (completionTokens) {\n                tokenUsage.completionTokens = (tokenUsage.completionTokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n            }\n        }\n        const generations = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__.chunkArray)(choices, this.n).map((promptChoices)=>promptChoices.map((choice)=>({\n                    text: choice.text ?? \"\",\n                    generationInfo: {\n                        finishReason: choice.finish_reason,\n                        logprobs: choice.logprobs\n                    }\n                })));\n        return {\n            generations,\n            llmOutput: {\n                tokenUsage\n            }\n        };\n    }\n    // TODO(jacoblee): Refactor with _generate(..., {stream: true}) implementation?\n    async *_streamResponseChunks(input, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            prompt: input,\n            stream: true\n        };\n        const stream = await this.completionWithRetry(params, options);\n        for await (const data of stream){\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const chunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.GenerationChunk({\n                text: choice.text,\n                generationInfo: {\n                    finishReason: choice.finish_reason\n                }\n            });\n            yield chunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(chunk.text ?? \"\");\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.completions.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_7__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    /**\n     * Calls the OpenAI API with retry logic in case of failures.\n     * @param request The request to send to the OpenAI API.\n     * @param options Optional configuration for the API call.\n     * @returns The response from the OpenAI API.\n     */ _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_5__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_8__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/types.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/types.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1mb3JtLWJ1aWxkZXItdHV0b3JpYWwvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC90eXBlcy5qcz8yYTdhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/azure.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEndpoint: () => (/* binding */ getEndpoint)\n/* harmony export */ });\n/**\n * This function generates an endpoint URL for (Azure) OpenAI\n * based on the configuration parameters provided.\n *\n * @param {OpenAIEndpointConfig} config - The configuration object for the (Azure) endpoint.\n *\n * @property {string} config.azureOpenAIApiDeploymentName - The deployment name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiInstanceName - The instance name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiKey - The API Key for Azure OpenAI.\n * @property {string} config.azureOpenAIBasePath - The base path for Azure OpenAI.\n * @property {string} config.baseURL - Some other custom base path URL.\n *\n * The function operates as follows:\n * - If both `azureOpenAIBasePath` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`).\n * - If `azureOpenAIApiKey` is provided, it checks for `azureOpenAIApiInstanceName` and `azureOpenAIApiDeploymentName` and throws an error if any of these is missing. If both are provided, it generates an URL incorporating these parameters.\n * - If none of the above conditions are met, return any custom `baseURL`.\n * - The function returns the generated URL as a string, or undefined if no custom paths are specified.\n *\n * @throws Will throw an error if the necessary parameters for generating the URL are missing.\n *\n * @returns {string | undefined} The generated (Azure) OpenAI endpoint URL.\n */ function getEndpoint(config) {\n    const { azureOpenAIApiDeploymentName, azureOpenAIApiInstanceName, azureOpenAIApiKey, azureOpenAIBasePath, baseURL } = config;\n    if (azureOpenAIApiKey && azureOpenAIBasePath && azureOpenAIApiDeploymentName) {\n        return `${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`;\n    }\n    if (azureOpenAIApiKey) {\n        if (!azureOpenAIApiInstanceName) {\n            throw new Error(\"azureOpenAIApiInstanceName is required when using azureOpenAIApiKey\");\n        }\n        if (!azureOpenAIApiDeploymentName) {\n            throw new Error(\"azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey\");\n        }\n        return `https://${azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${azureOpenAIApiDeploymentName}`;\n    }\n    return baseURL;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9henVyZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLFNBQVNBLFlBQVlDLE1BQU07SUFDOUIsTUFBTSxFQUFFQyw0QkFBNEIsRUFBRUMsMEJBQTBCLEVBQUVDLGlCQUFpQixFQUFFQyxtQkFBbUIsRUFBRUMsT0FBTyxFQUFHLEdBQUdMO0lBQ3ZILElBQUlHLHFCQUNBQyx1QkFDQUgsOEJBQThCO1FBQzlCLE9BQU8sQ0FBQyxFQUFFRyxvQkFBb0IsQ0FBQyxFQUFFSCw2QkFBNkIsQ0FBQztJQUNuRTtJQUNBLElBQUlFLG1CQUFtQjtRQUNuQixJQUFJLENBQUNELDRCQUE0QjtZQUM3QixNQUFNLElBQUlJLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNMLDhCQUE4QjtZQUMvQixNQUFNLElBQUlLLE1BQU07UUFDcEI7UUFDQSxPQUFPLENBQUMsUUFBUSxFQUFFSiwyQkFBMkIscUNBQXFDLEVBQUVELDZCQUE2QixDQUFDO0lBQ3RIO0lBQ0EsT0FBT0k7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvcm0tYnVpbGRlci10dXRvcmlhbC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3V0aWxzL2F6dXJlLmpzP2Q4NzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyBhbiBlbmRwb2ludCBVUkwgZm9yIChBenVyZSkgT3BlbkFJXG4gKiBiYXNlZCBvbiB0aGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIHByb3ZpZGVkLlxuICpcbiAqIEBwYXJhbSB7T3BlbkFJRW5kcG9pbnRDb25maWd9IGNvbmZpZyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBmb3IgdGhlIChBenVyZSkgZW5kcG9pbnQuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbmZpZy5henVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lIC0gVGhlIGRlcGxveW1lbnQgbmFtZSBvZiBBenVyZSBPcGVuQUkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lIC0gVGhlIGluc3RhbmNlIG5hbWUgb2YgQXp1cmUgT3BlbkFJLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbmZpZy5henVyZU9wZW5BSUFwaUtleSAtIFRoZSBBUEkgS2V5IGZvciBBenVyZSBPcGVuQUkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmF6dXJlT3BlbkFJQmFzZVBhdGggLSBUaGUgYmFzZSBwYXRoIGZvciBBenVyZSBPcGVuQUkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmJhc2VVUkwgLSBTb21lIG90aGVyIGN1c3RvbSBiYXNlIHBhdGggVVJMLlxuICpcbiAqIFRoZSBmdW5jdGlvbiBvcGVyYXRlcyBhcyBmb2xsb3dzOlxuICogLSBJZiBib3RoIGBhenVyZU9wZW5BSUJhc2VQYXRoYCBhbmQgYGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWVgIChwbHVzIGBhenVyZU9wZW5BSUFwaUtleWApIGFyZSBwcm92aWRlZCwgaXQgcmV0dXJucyBhbiBVUkwgY29tYmluaW5nIHRoZXNlIHR3byBwYXJhbWV0ZXJzIChgJHthenVyZU9wZW5BSUJhc2VQYXRofS8ke2F6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWV9YCkuXG4gKiAtIElmIGBhenVyZU9wZW5BSUFwaUtleWAgaXMgcHJvdmlkZWQsIGl0IGNoZWNrcyBmb3IgYGF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lYCBhbmQgYGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWVgIGFuZCB0aHJvd3MgYW4gZXJyb3IgaWYgYW55IG9mIHRoZXNlIGlzIG1pc3NpbmcuIElmIGJvdGggYXJlIHByb3ZpZGVkLCBpdCBnZW5lcmF0ZXMgYW4gVVJMIGluY29ycG9yYXRpbmcgdGhlc2UgcGFyYW1ldGVycy5cbiAqIC0gSWYgbm9uZSBvZiB0aGUgYWJvdmUgY29uZGl0aW9ucyBhcmUgbWV0LCByZXR1cm4gYW55IGN1c3RvbSBgYmFzZVVSTGAuXG4gKiAtIFRoZSBmdW5jdGlvbiByZXR1cm5zIHRoZSBnZW5lcmF0ZWQgVVJMIGFzIGEgc3RyaW5nLCBvciB1bmRlZmluZWQgaWYgbm8gY3VzdG9tIHBhdGhzIGFyZSBzcGVjaWZpZWQuXG4gKlxuICogQHRocm93cyBXaWxsIHRocm93IGFuIGVycm9yIGlmIHRoZSBuZWNlc3NhcnkgcGFyYW1ldGVycyBmb3IgZ2VuZXJhdGluZyB0aGUgVVJMIGFyZSBtaXNzaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9IFRoZSBnZW5lcmF0ZWQgKEF6dXJlKSBPcGVuQUkgZW5kcG9pbnQgVVJMLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5kcG9pbnQoY29uZmlnKSB7XG4gICAgY29uc3QgeyBhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lLCBhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSwgYXp1cmVPcGVuQUlBcGlLZXksIGF6dXJlT3BlbkFJQmFzZVBhdGgsIGJhc2VVUkwsIH0gPSBjb25maWc7XG4gICAgaWYgKGF6dXJlT3BlbkFJQXBpS2V5ICYmXG4gICAgICAgIGF6dXJlT3BlbkFJQmFzZVBhdGggJiZcbiAgICAgICAgYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gYCR7YXp1cmVPcGVuQUlCYXNlUGF0aH0vJHthenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lfWA7XG4gICAgfVxuICAgIGlmIChhenVyZU9wZW5BSUFwaUtleSkge1xuICAgICAgICBpZiAoIWF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSBpcyByZXF1aXJlZCB3aGVuIHVzaW5nIGF6dXJlT3BlbkFJQXBpS2V5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlciB3aGVuIHVzaW5nIGF6dXJlT3BlbkFJQXBpS2V5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke2F6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lfS5vcGVuYWkuYXp1cmUuY29tL29wZW5haS9kZXBsb3ltZW50cy8ke2F6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWV9YDtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2VVUkw7XG59XG4iXSwibmFtZXMiOlsiZ2V0RW5kcG9pbnQiLCJjb25maWciLCJhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lIiwiYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUiLCJhenVyZU9wZW5BSUFwaUtleSIsImF6dXJlT3BlbkFJQmFzZVBhdGgiLCJiYXNlVVJMIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/openai-format-fndef.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/openai-format-fndef.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatFunctionDefinitions: () => (/* binding */ formatFunctionDefinitions)\n/* harmony export */ });\nfunction isAnyOfProp(prop) {\n    return prop.anyOf !== undefined && Array.isArray(prop.anyOf);\n}\n// When OpenAI use functions in the prompt, they format them as TypeScript definitions rather than OpenAPI JSON schemas.\n// This function converts the JSON schemas into TypeScript definitions.\nfunction formatFunctionDefinitions(functions) {\n    const lines = [\n        \"namespace functions {\",\n        \"\"\n    ];\n    for (const f of functions){\n        if (f.description) {\n            lines.push(`// ${f.description}`);\n        }\n        if (Object.keys(f.parameters.properties ?? {}).length > 0) {\n            lines.push(`type ${f.name} = (_: {`);\n            lines.push(formatObjectProperties(f.parameters, 0));\n            lines.push(\"}) => any;\");\n        } else {\n            lines.push(`type ${f.name} = () => any;`);\n        }\n        lines.push(\"\");\n    }\n    lines.push(\"} // namespace functions\");\n    return lines.join(\"\\n\");\n}\n// Format just the properties of an object (not including the surrounding braces)\nfunction formatObjectProperties(obj, indent) {\n    const lines = [];\n    for (const [name, param] of Object.entries(obj.properties ?? {})){\n        if (param.description && indent < 2) {\n            lines.push(`// ${param.description}`);\n        }\n        if (obj.required?.includes(name)) {\n            lines.push(`${name}: ${formatType(param, indent)},`);\n        } else {\n            lines.push(`${name}?: ${formatType(param, indent)},`);\n        }\n    }\n    return lines.map((line)=>\" \".repeat(indent) + line).join(\"\\n\");\n}\n// Format a single property type\nfunction formatType(param, indent) {\n    if (isAnyOfProp(param)) {\n        return param.anyOf.map((v)=>formatType(v, indent)).join(\" | \");\n    }\n    switch(param.type){\n        case \"string\":\n            if (param.enum) {\n                return param.enum.map((v)=>`\"${v}\"`).join(\" | \");\n            }\n            return \"string\";\n        case \"number\":\n            if (param.enum) {\n                return param.enum.map((v)=>`${v}`).join(\" | \");\n            }\n            return \"number\";\n        case \"integer\":\n            if (param.enum) {\n                return param.enum.map((v)=>`${v}`).join(\" | \");\n            }\n            return \"number\";\n        case \"boolean\":\n            return \"boolean\";\n        case \"null\":\n            return \"null\";\n        case \"object\":\n            return [\n                \"{\",\n                formatObjectProperties(param, indent + 2),\n                \"}\"\n            ].join(\"\\n\");\n        case \"array\":\n            if (param.items) {\n                return `${formatType(param.items, indent)}[]`;\n            }\n            return \"any[]\";\n        default:\n            return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9vcGVuYWktZm9ybWF0LWZuZGVmLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxZQUFZQyxJQUFJO0lBQ3JCLE9BQVFBLEtBQUtDLEtBQUssS0FBS0MsYUFDbkJDLE1BQU1DLE9BQU8sQ0FBQ0osS0FBS0MsS0FBSztBQUNoQztBQUNBLHdIQUF3SDtBQUN4SCx1RUFBdUU7QUFDaEUsU0FBU0ksMEJBQTBCQyxTQUFTO0lBQy9DLE1BQU1DLFFBQVE7UUFBQztRQUF5QjtLQUFHO0lBQzNDLEtBQUssTUFBTUMsS0FBS0YsVUFBVztRQUN2QixJQUFJRSxFQUFFQyxXQUFXLEVBQUU7WUFDZkYsTUFBTUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFRixFQUFFQyxXQUFXLENBQUMsQ0FBQztRQUNwQztRQUNBLElBQUlFLE9BQU9DLElBQUksQ0FBQ0osRUFBRUssVUFBVSxDQUFDQyxVQUFVLElBQUksQ0FBQyxHQUFHQyxNQUFNLEdBQUcsR0FBRztZQUN2RFIsTUFBTUcsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFRixFQUFFUSxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ25DVCxNQUFNRyxJQUFJLENBQUNPLHVCQUF1QlQsRUFBRUssVUFBVSxFQUFFO1lBQ2hETixNQUFNRyxJQUFJLENBQUM7UUFDZixPQUNLO1lBQ0RILE1BQU1HLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRUYsRUFBRVEsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QztRQUNBVCxNQUFNRyxJQUFJLENBQUM7SUFDZjtJQUNBSCxNQUFNRyxJQUFJLENBQUM7SUFDWCxPQUFPSCxNQUFNVyxJQUFJLENBQUM7QUFDdEI7QUFDQSxpRkFBaUY7QUFDakYsU0FBU0QsdUJBQXVCRSxHQUFHLEVBQUVDLE1BQU07SUFDdkMsTUFBTWIsUUFBUSxFQUFFO0lBQ2hCLEtBQUssTUFBTSxDQUFDUyxNQUFNSyxNQUFNLElBQUlWLE9BQU9XLE9BQU8sQ0FBQ0gsSUFBSUwsVUFBVSxJQUFJLENBQUMsR0FBSTtRQUM5RCxJQUFJTyxNQUFNWixXQUFXLElBQUlXLFNBQVMsR0FBRztZQUNqQ2IsTUFBTUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFVyxNQUFNWixXQUFXLENBQUMsQ0FBQztRQUN4QztRQUNBLElBQUlVLElBQUlJLFFBQVEsRUFBRUMsU0FBU1IsT0FBTztZQUM5QlQsTUFBTUcsSUFBSSxDQUFDLENBQUMsRUFBRU0sS0FBSyxFQUFFLEVBQUVTLFdBQVdKLE9BQU9ELFFBQVEsQ0FBQyxDQUFDO1FBQ3ZELE9BQ0s7WUFDRGIsTUFBTUcsSUFBSSxDQUFDLENBQUMsRUFBRU0sS0FBSyxHQUFHLEVBQUVTLFdBQVdKLE9BQU9ELFFBQVEsQ0FBQyxDQUFDO1FBQ3hEO0lBQ0o7SUFDQSxPQUFPYixNQUFNbUIsR0FBRyxDQUFDLENBQUNDLE9BQVMsSUFBSUMsTUFBTSxDQUFDUixVQUFVTyxNQUFNVCxJQUFJLENBQUM7QUFDL0Q7QUFDQSxnQ0FBZ0M7QUFDaEMsU0FBU08sV0FBV0osS0FBSyxFQUFFRCxNQUFNO0lBQzdCLElBQUlyQixZQUFZc0IsUUFBUTtRQUNwQixPQUFPQSxNQUFNcEIsS0FBSyxDQUFDeUIsR0FBRyxDQUFDLENBQUNHLElBQU1KLFdBQVdJLEdBQUdULFNBQVNGLElBQUksQ0FBQztJQUM5RDtJQUNBLE9BQVFHLE1BQU1TLElBQUk7UUFDZCxLQUFLO1lBQ0QsSUFBSVQsTUFBTVUsSUFBSSxFQUFFO2dCQUNaLE9BQU9WLE1BQU1VLElBQUksQ0FBQ0wsR0FBRyxDQUFDLENBQUNHLElBQU0sQ0FBQyxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxDQUFDLEVBQUVYLElBQUksQ0FBQztZQUNoRDtZQUNBLE9BQU87UUFDWCxLQUFLO1lBQ0QsSUFBSUcsTUFBTVUsSUFBSSxFQUFFO2dCQUNaLE9BQU9WLE1BQU1VLElBQUksQ0FBQ0wsR0FBRyxDQUFDLENBQUNHLElBQU0sQ0FBQyxFQUFFQSxFQUFFLENBQUMsRUFBRVgsSUFBSSxDQUFDO1lBQzlDO1lBQ0EsT0FBTztRQUNYLEtBQUs7WUFDRCxJQUFJRyxNQUFNVSxJQUFJLEVBQUU7Z0JBQ1osT0FBT1YsTUFBTVUsSUFBSSxDQUFDTCxHQUFHLENBQUMsQ0FBQ0csSUFBTSxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxFQUFFWCxJQUFJLENBQUM7WUFDOUM7WUFDQSxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO2dCQUFDO2dCQUFLRCx1QkFBdUJJLE9BQU9ELFNBQVM7Z0JBQUk7YUFBSSxDQUFDRixJQUFJLENBQUM7UUFDdEUsS0FBSztZQUNELElBQUlHLE1BQU1XLEtBQUssRUFBRTtnQkFDYixPQUFPLENBQUMsRUFBRVAsV0FBV0osTUFBTVcsS0FBSyxFQUFFWixRQUFRLEVBQUUsQ0FBQztZQUNqRDtZQUNBLE9BQU87UUFDWDtZQUNJLE9BQU87SUFDZjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvb3BlbmFpLWZvcm1hdC1mbmRlZi5qcz84YjI5Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzQW55T2ZQcm9wKHByb3ApIHtcbiAgICByZXR1cm4gKHByb3AuYW55T2YgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KHByb3AuYW55T2YpKTtcbn1cbi8vIFdoZW4gT3BlbkFJIHVzZSBmdW5jdGlvbnMgaW4gdGhlIHByb21wdCwgdGhleSBmb3JtYXQgdGhlbSBhcyBUeXBlU2NyaXB0IGRlZmluaXRpb25zIHJhdGhlciB0aGFuIE9wZW5BUEkgSlNPTiBzY2hlbWFzLlxuLy8gVGhpcyBmdW5jdGlvbiBjb252ZXJ0cyB0aGUgSlNPTiBzY2hlbWFzIGludG8gVHlwZVNjcmlwdCBkZWZpbml0aW9ucy5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRGdW5jdGlvbkRlZmluaXRpb25zKGZ1bmN0aW9ucykge1xuICAgIGNvbnN0IGxpbmVzID0gW1wibmFtZXNwYWNlIGZ1bmN0aW9ucyB7XCIsIFwiXCJdO1xuICAgIGZvciAoY29uc3QgZiBvZiBmdW5jdGlvbnMpIHtcbiAgICAgICAgaWYgKGYuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYC8vICR7Zi5kZXNjcmlwdGlvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoZi5wYXJhbWV0ZXJzLnByb3BlcnRpZXMgPz8ge30pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYHR5cGUgJHtmLm5hbWV9ID0gKF86IHtgKTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goZm9ybWF0T2JqZWN0UHJvcGVydGllcyhmLnBhcmFtZXRlcnMsIDApKTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goXCJ9KSA9PiBhbnk7XCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGluZXMucHVzaChgdHlwZSAke2YubmFtZX0gPSAoKSA9PiBhbnk7YCk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZXMucHVzaChcIlwiKTtcbiAgICB9XG4gICAgbGluZXMucHVzaChcIn0gLy8gbmFtZXNwYWNlIGZ1bmN0aW9uc1wiKTtcbiAgICByZXR1cm4gbGluZXMuam9pbihcIlxcblwiKTtcbn1cbi8vIEZvcm1hdCBqdXN0IHRoZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCAobm90IGluY2x1ZGluZyB0aGUgc3Vycm91bmRpbmcgYnJhY2VzKVxuZnVuY3Rpb24gZm9ybWF0T2JqZWN0UHJvcGVydGllcyhvYmosIGluZGVudCkge1xuICAgIGNvbnN0IGxpbmVzID0gW107XG4gICAgZm9yIChjb25zdCBbbmFtZSwgcGFyYW1dIG9mIE9iamVjdC5lbnRyaWVzKG9iai5wcm9wZXJ0aWVzID8/IHt9KSkge1xuICAgICAgICBpZiAocGFyYW0uZGVzY3JpcHRpb24gJiYgaW5kZW50IDwgMikge1xuICAgICAgICAgICAgbGluZXMucHVzaChgLy8gJHtwYXJhbS5kZXNjcmlwdGlvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLnJlcXVpcmVkPy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgICAgICAgbGluZXMucHVzaChgJHtuYW1lfTogJHtmb3JtYXRUeXBlKHBhcmFtLCBpbmRlbnQpfSxgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYCR7bmFtZX0/OiAke2Zvcm1hdFR5cGUocGFyYW0sIGluZGVudCl9LGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lcy5tYXAoKGxpbmUpID0+IFwiIFwiLnJlcGVhdChpbmRlbnQpICsgbGluZSkuam9pbihcIlxcblwiKTtcbn1cbi8vIEZvcm1hdCBhIHNpbmdsZSBwcm9wZXJ0eSB0eXBlXG5mdW5jdGlvbiBmb3JtYXRUeXBlKHBhcmFtLCBpbmRlbnQpIHtcbiAgICBpZiAoaXNBbnlPZlByb3AocGFyYW0pKSB7XG4gICAgICAgIHJldHVybiBwYXJhbS5hbnlPZi5tYXAoKHYpID0+IGZvcm1hdFR5cGUodiwgaW5kZW50KSkuam9pbihcIiB8IFwiKTtcbiAgICB9XG4gICAgc3dpdGNoIChwYXJhbS50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIGlmIChwYXJhbS5lbnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLmVudW0ubWFwKCh2KSA9PiBgXCIke3Z9XCJgKS5qb2luKFwiIHwgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIGlmIChwYXJhbS5lbnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLmVudW0ubWFwKCh2KSA9PiBgJHt2fWApLmpvaW4oXCIgfCBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICAgICAgY2FzZSBcImludGVnZXJcIjpcbiAgICAgICAgICAgIGlmIChwYXJhbS5lbnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLmVudW0ubWFwKCh2KSA9PiBgJHt2fWApLmpvaW4oXCIgfCBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHJldHVybiBcImJvb2xlYW5cIjtcbiAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgcmV0dXJuIFtcIntcIiwgZm9ybWF0T2JqZWN0UHJvcGVydGllcyhwYXJhbSwgaW5kZW50ICsgMiksIFwifVwiXS5qb2luKFwiXFxuXCIpO1xuICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgIGlmIChwYXJhbS5pdGVtcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtmb3JtYXRUeXBlKHBhcmFtLml0ZW1zLCBpbmRlbnQpfVtdYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcImFueVtdXCI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaXNBbnlPZlByb3AiLCJwcm9wIiwiYW55T2YiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JtYXRGdW5jdGlvbkRlZmluaXRpb25zIiwiZnVuY3Rpb25zIiwibGluZXMiLCJmIiwiZGVzY3JpcHRpb24iLCJwdXNoIiwiT2JqZWN0Iiwia2V5cyIsInBhcmFtZXRlcnMiLCJwcm9wZXJ0aWVzIiwibGVuZ3RoIiwibmFtZSIsImZvcm1hdE9iamVjdFByb3BlcnRpZXMiLCJqb2luIiwib2JqIiwiaW5kZW50IiwicGFyYW0iLCJlbnRyaWVzIiwicmVxdWlyZWQiLCJpbmNsdWRlcyIsImZvcm1hdFR5cGUiLCJtYXAiLCJsaW5lIiwicmVwZWF0IiwidiIsInR5cGUiLCJlbnVtIiwiaXRlbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/openai-format-fndef.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/openai.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatToOpenAIAssistantTool: () => (/* binding */ formatToOpenAIAssistantTool),\n/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__.convertToOpenAIFunction),\n/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__.convertToOpenAITool),\n/* harmony export */   wrapOpenAIClientError: () => (/* binding */ wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.js\");\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapOpenAIClientError(e) {\n    let error;\n    if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_2__.APIConnectionTimeoutError.name) {\n        error = new Error(e.message);\n        error.name = \"TimeoutError\";\n    } else if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError.name) {\n        error = new Error(e.message);\n        error.name = \"AbortError\";\n    } else {\n        error = e;\n    }\n    return error;\n}\n\nfunction formatToOpenAIAssistantTool(tool) {\n    return {\n        type: \"function\",\n        function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(tool.schema)\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9vcGVuYWkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF1RTtBQUNsQjtBQUNrRDtBQUN2Ryw4REFBOEQ7QUFDdkQsU0FBU0ssc0JBQXNCQyxDQUFDO0lBQ25DLElBQUlDO0lBQ0osSUFBSUQsRUFBRUUsV0FBVyxDQUFDQyxJQUFJLEtBQUtULDZEQUF5QkEsQ0FBQ1MsSUFBSSxFQUFFO1FBQ3ZERixRQUFRLElBQUlHLE1BQU1KLEVBQUVLLE9BQU87UUFDM0JKLE1BQU1FLElBQUksR0FBRztJQUNqQixPQUNLLElBQUlILEVBQUVFLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLUixxREFBaUJBLENBQUNRLElBQUksRUFBRTtRQUNwREYsUUFBUSxJQUFJRyxNQUFNSixFQUFFSyxPQUFPO1FBQzNCSixNQUFNRSxJQUFJLEdBQUc7SUFDakIsT0FDSztRQUNERixRQUFRRDtJQUNaO0lBQ0EsT0FBT0M7QUFDWDtBQUN5RztBQUNsRyxTQUFTTyw0QkFBNEJDLElBQUk7SUFDNUMsT0FBTztRQUNIQyxNQUFNO1FBQ05DLFVBQVU7WUFDTlIsTUFBTU0sS0FBS04sSUFBSTtZQUNmUyxhQUFhSCxLQUFLRyxXQUFXO1lBQzdCQyxZQUFZakIsbUVBQWVBLENBQUNhLEtBQUtLLE1BQU07UUFDM0M7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvb3BlbmFpLmpzPzkzM2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciwgQVBJVXNlckFib3J0RXJyb3IsIH0gZnJvbSBcIm9wZW5haVwiO1xuaW1wb3J0IHsgem9kVG9Kc29uU2NoZW1hIH0gZnJvbSBcInpvZC10by1qc29uLXNjaGVtYVwiO1xuaW1wb3J0IHsgY29udmVydFRvT3BlbkFJRnVuY3Rpb24sIGNvbnZlcnRUb09wZW5BSVRvb2wsIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS91dGlscy9mdW5jdGlvbl9jYWxsaW5nXCI7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBPcGVuQUlDbGllbnRFcnJvcihlKSB7XG4gICAgbGV0IGVycm9yO1xuICAgIGlmIChlLmNvbnN0cnVjdG9yLm5hbWUgPT09IEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IubmFtZSkge1xuICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5uYW1lID0gXCJUaW1lb3V0RXJyb3JcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBBUElVc2VyQWJvcnRFcnJvci5uYW1lKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEVycm9yKGUubWVzc2FnZSk7XG4gICAgICAgIGVycm9yLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVycm9yID0gZTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuZXhwb3J0IHsgY29udmVydFRvT3BlbkFJRnVuY3Rpb24gYXMgZm9ybWF0VG9PcGVuQUlGdW5jdGlvbiwgY29udmVydFRvT3BlbkFJVG9vbCBhcyBmb3JtYXRUb09wZW5BSVRvb2wsIH07XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VG9PcGVuQUlBc3Npc3RhbnRUb29sKHRvb2wpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdG9vbC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHpvZFRvSnNvblNjaGVtYSh0b29sLnNjaGVtYSksXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJBUElDb25uZWN0aW9uVGltZW91dEVycm9yIiwiQVBJVXNlckFib3J0RXJyb3IiLCJ6b2RUb0pzb25TY2hlbWEiLCJjb252ZXJ0VG9PcGVuQUlGdW5jdGlvbiIsImNvbnZlcnRUb09wZW5BSVRvb2wiLCJ3cmFwT3BlbkFJQ2xpZW50RXJyb3IiLCJlIiwiZXJyb3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJFcnJvciIsIm1lc3NhZ2UiLCJmb3JtYXRUb09wZW5BSUZ1bmN0aW9uIiwiZm9ybWF0VG9PcGVuQUlUb29sIiwiZm9ybWF0VG9PcGVuQUlBc3Npc3RhbnRUb29sIiwidG9vbCIsInR5cGUiLCJmdW5jdGlvbiIsImRlc2NyaXB0aW9uIiwicGFyYW1ldGVycyIsInNjaGVtYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@langchain/openai/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.AzureChatOpenAI),\n/* harmony export */   AzureOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.AzureOpenAI),\n/* harmony export */   ChatOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIChat: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIChat),\n/* harmony export */   OpenAIClient: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIClient),\n/* harmony export */   OpenAIEmbeddings: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbeddings),\n/* harmony export */   formatToOpenAIAssistantTool: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAIAssistantTool),\n/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAIFunction),\n/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAITool),\n/* harmony export */   getEndpoint: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.getEndpoint),\n/* harmony export */   messageToOpenAIRole: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole),\n/* harmony export */   toFile: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.toFile),\n/* harmony export */   wrapOpenAIClientError: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ \"(rsc)/./node_modules/@langchain/openai/dist/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2luZGV4LmpzP2I5MDYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/index.js\n");

/***/ })

};
;