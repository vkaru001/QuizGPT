"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/p-retry";
exports.ids = ["vendor-chunks/p-retry"];
exports.modules = {

/***/ "(rsc)/./node_modules/p-retry/index.js":
/*!***************************************!*\
  !*** ./node_modules/p-retry/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst retry = __webpack_require__(/*! retry */ \"(rsc)/./node_modules/retry/index.js\");\nconst networkErrorMsgs = [\n    \"Failed to fetch\",\n    \"NetworkError when attempting to fetch resource.\",\n    \"The Internet connection appears to be offline.\",\n    \"Network request failed\" // `cross-fetch`\n];\nclass AbortError extends Error {\n    constructor(message){\n        super();\n        if (message instanceof Error) {\n            this.originalError = message;\n            ({ message } = message);\n        } else {\n            this.originalError = new Error(message);\n            this.originalError.stack = this.stack;\n        }\n        this.name = \"AbortError\";\n        this.message = message;\n    }\n}\nconst decorateErrorWithCounts = (error, attemptNumber, options)=>{\n    // Minus 1 from attemptNumber because the first attempt does not count as a retry\n    const retriesLeft = options.retries - (attemptNumber - 1);\n    error.attemptNumber = attemptNumber;\n    error.retriesLeft = retriesLeft;\n    return error;\n};\nconst isNetworkError = (errorMessage)=>networkErrorMsgs.includes(errorMessage);\nconst pRetry = (input, options)=>new Promise((resolve, reject)=>{\n        options = {\n            onFailedAttempt: ()=>{},\n            retries: 10,\n            ...options\n        };\n        const operation = retry.operation(options);\n        operation.attempt(async (attemptNumber)=>{\n            try {\n                resolve(await input(attemptNumber));\n            } catch (error) {\n                if (!(error instanceof Error)) {\n                    reject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n                    return;\n                }\n                if (error instanceof AbortError) {\n                    operation.stop();\n                    reject(error.originalError);\n                } else if (error instanceof TypeError && !isNetworkError(error.message)) {\n                    operation.stop();\n                    reject(error);\n                } else {\n                    decorateErrorWithCounts(error, attemptNumber, options);\n                    try {\n                        await options.onFailedAttempt(error);\n                    } catch (error) {\n                        reject(error);\n                        return;\n                    }\n                    if (!operation.retry(error)) {\n                        reject(operation.mainError());\n                    }\n                }\n            }\n        });\n    });\nmodule.exports = pRetry;\n// TODO: remove this in the next major version\nmodule.exports[\"default\"] = pRetry;\nmodule.exports.AbortError = AbortError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcC1yZXRyeS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXRCLE1BQU1DLG1CQUFtQjtJQUN4QjtJQUNBO0lBQ0E7SUFDQSx5QkFBeUIsZ0JBQWdCO0NBQ3pDO0FBRUQsTUFBTUMsbUJBQW1CQztJQUN4QkMsWUFBWUMsT0FBTyxDQUFFO1FBQ3BCLEtBQUs7UUFFTCxJQUFJQSxtQkFBbUJGLE9BQU87WUFDN0IsSUFBSSxDQUFDRyxhQUFhLEdBQUdEO1lBQ3BCLEdBQUNBLE9BQU8sRUFBQyxHQUFHQSxPQUFNO1FBQ3BCLE9BQU87WUFDTixJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFJSCxNQUFNRTtZQUMvQixJQUFJLENBQUNDLGFBQWEsQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0EsS0FBSztRQUN0QztRQUVBLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDSCxPQUFPLEdBQUdBO0lBQ2hCO0FBQ0Q7QUFFQSxNQUFNSSwwQkFBMEIsQ0FBQ0MsT0FBT0MsZUFBZUM7SUFDdEQsaUZBQWlGO0lBQ2pGLE1BQU1DLGNBQWNELFFBQVFFLE9BQU8sR0FBSUgsQ0FBQUEsZ0JBQWdCO0lBRXZERCxNQUFNQyxhQUFhLEdBQUdBO0lBQ3RCRCxNQUFNRyxXQUFXLEdBQUdBO0lBQ3BCLE9BQU9IO0FBQ1I7QUFFQSxNQUFNSyxpQkFBaUJDLENBQUFBLGVBQWdCZixpQkFBaUJnQixRQUFRLENBQUNEO0FBRWpFLE1BQU1FLFNBQVMsQ0FBQ0MsT0FBT1AsVUFBWSxJQUFJUSxRQUFRLENBQUNDLFNBQVNDO1FBQ3hEVixVQUFVO1lBQ1RXLGlCQUFpQixLQUFPO1lBQ3hCVCxTQUFTO1lBQ1QsR0FBR0YsT0FBTztRQUNYO1FBRUEsTUFBTVksWUFBWXpCLE1BQU15QixTQUFTLENBQUNaO1FBRWxDWSxVQUFVQyxPQUFPLENBQUMsT0FBTWQ7WUFDdkIsSUFBSTtnQkFDSFUsUUFBUSxNQUFNRixNQUFNUjtZQUNyQixFQUFFLE9BQU9ELE9BQU87Z0JBQ2YsSUFBSSxDQUFFQSxDQUFBQSxpQkFBaUJQLEtBQUksR0FBSTtvQkFDOUJtQixPQUFPLElBQUlJLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRWhCLE1BQU0sZ0NBQWdDLENBQUM7b0JBQ3RGO2dCQUNEO2dCQUVBLElBQUlBLGlCQUFpQlIsWUFBWTtvQkFDaENzQixVQUFVRyxJQUFJO29CQUNkTCxPQUFPWixNQUFNSixhQUFhO2dCQUMzQixPQUFPLElBQUlJLGlCQUFpQmdCLGFBQWEsQ0FBQ1gsZUFBZUwsTUFBTUwsT0FBTyxHQUFHO29CQUN4RW1CLFVBQVVHLElBQUk7b0JBQ2RMLE9BQU9aO2dCQUNSLE9BQU87b0JBQ05ELHdCQUF3QkMsT0FBT0MsZUFBZUM7b0JBRTlDLElBQUk7d0JBQ0gsTUFBTUEsUUFBUVcsZUFBZSxDQUFDYjtvQkFDL0IsRUFBRSxPQUFPQSxPQUFPO3dCQUNmWSxPQUFPWjt3QkFDUDtvQkFDRDtvQkFFQSxJQUFJLENBQUNjLFVBQVV6QixLQUFLLENBQUNXLFFBQVE7d0JBQzVCWSxPQUFPRSxVQUFVSSxTQUFTO29CQUMzQjtnQkFDRDtZQUNEO1FBQ0Q7SUFDRDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdaO0FBQ2pCLDhDQUE4QztBQUM5Q1cseUJBQXNCLEdBQUdYO0FBRXpCVyx5QkFBeUIsR0FBRzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktZm9ybS1idWlsZGVyLXR1dG9yaWFsLy4vbm9kZV9tb2R1bGVzL3AtcmV0cnkvaW5kZXguanM/NzAyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCByZXRyeSA9IHJlcXVpcmUoJ3JldHJ5Jyk7XG5cbmNvbnN0IG5ldHdvcmtFcnJvck1zZ3MgPSBbXG5cdCdGYWlsZWQgdG8gZmV0Y2gnLCAvLyBDaHJvbWVcblx0J05ldHdvcmtFcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gZmV0Y2ggcmVzb3VyY2UuJywgLy8gRmlyZWZveFxuXHQnVGhlIEludGVybmV0IGNvbm5lY3Rpb24gYXBwZWFycyB0byBiZSBvZmZsaW5lLicsIC8vIFNhZmFyaVxuXHQnTmV0d29yayByZXF1ZXN0IGZhaWxlZCcgLy8gYGNyb3NzLWZldGNoYFxuXTtcblxuY2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZSkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHRpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRXJyb3IgPSBtZXNzYWdlO1xuXHRcdFx0KHttZXNzYWdlfSA9IG1lc3NhZ2UpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRXJyb3Iuc3RhY2sgPSB0aGlzLnN0YWNrO1xuXHRcdH1cblxuXHRcdHRoaXMubmFtZSA9ICdBYm9ydEVycm9yJztcblx0XHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHR9XG59XG5cbmNvbnN0IGRlY29yYXRlRXJyb3JXaXRoQ291bnRzID0gKGVycm9yLCBhdHRlbXB0TnVtYmVyLCBvcHRpb25zKSA9PiB7XG5cdC8vIE1pbnVzIDEgZnJvbSBhdHRlbXB0TnVtYmVyIGJlY2F1c2UgdGhlIGZpcnN0IGF0dGVtcHQgZG9lcyBub3QgY291bnQgYXMgYSByZXRyeVxuXHRjb25zdCByZXRyaWVzTGVmdCA9IG9wdGlvbnMucmV0cmllcyAtIChhdHRlbXB0TnVtYmVyIC0gMSk7XG5cblx0ZXJyb3IuYXR0ZW1wdE51bWJlciA9IGF0dGVtcHROdW1iZXI7XG5cdGVycm9yLnJldHJpZXNMZWZ0ID0gcmV0cmllc0xlZnQ7XG5cdHJldHVybiBlcnJvcjtcbn07XG5cbmNvbnN0IGlzTmV0d29ya0Vycm9yID0gZXJyb3JNZXNzYWdlID0+IG5ldHdvcmtFcnJvck1zZ3MuaW5jbHVkZXMoZXJyb3JNZXNzYWdlKTtcblxuY29uc3QgcFJldHJ5ID0gKGlucHV0LCBvcHRpb25zKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdG9wdGlvbnMgPSB7XG5cdFx0b25GYWlsZWRBdHRlbXB0OiAoKSA9PiB7fSxcblx0XHRyZXRyaWVzOiAxMCxcblx0XHQuLi5vcHRpb25zXG5cdH07XG5cblx0Y29uc3Qgb3BlcmF0aW9uID0gcmV0cnkub3BlcmF0aW9uKG9wdGlvbnMpO1xuXG5cdG9wZXJhdGlvbi5hdHRlbXB0KGFzeW5jIGF0dGVtcHROdW1iZXIgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXNvbHZlKGF3YWl0IGlucHV0KGF0dGVtcHROdW1iZXIpKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0aWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpIHtcblx0XHRcdFx0cmVqZWN0KG5ldyBUeXBlRXJyb3IoYE5vbi1lcnJvciB3YXMgdGhyb3duOiBcIiR7ZXJyb3J9XCIuIFlvdSBzaG91bGQgb25seSB0aHJvdyBlcnJvcnMuYCkpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmIChlcnJvciBpbnN0YW5jZW9mIEFib3J0RXJyb3IpIHtcblx0XHRcdFx0b3BlcmF0aW9uLnN0b3AoKTtcblx0XHRcdFx0cmVqZWN0KGVycm9yLm9yaWdpbmFsRXJyb3IpO1xuXHRcdFx0fSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvciAmJiAhaXNOZXR3b3JrRXJyb3IoZXJyb3IubWVzc2FnZSkpIHtcblx0XHRcdFx0b3BlcmF0aW9uLnN0b3AoKTtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlY29yYXRlRXJyb3JXaXRoQ291bnRzKGVycm9yLCBhdHRlbXB0TnVtYmVyLCBvcHRpb25zKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGF3YWl0IG9wdGlvbnMub25GYWlsZWRBdHRlbXB0KGVycm9yKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghb3BlcmF0aW9uLnJldHJ5KGVycm9yKSkge1xuXHRcdFx0XHRcdHJlamVjdChvcGVyYXRpb24ubWFpbkVycm9yKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBSZXRyeTtcbi8vIFRPRE86IHJlbW92ZSB0aGlzIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBwUmV0cnk7XG5cbm1vZHVsZS5leHBvcnRzLkFib3J0RXJyb3IgPSBBYm9ydEVycm9yO1xuIl0sIm5hbWVzIjpbInJldHJ5IiwicmVxdWlyZSIsIm5ldHdvcmtFcnJvck1zZ3MiLCJBYm9ydEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJvcmlnaW5hbEVycm9yIiwic3RhY2siLCJuYW1lIiwiZGVjb3JhdGVFcnJvcldpdGhDb3VudHMiLCJlcnJvciIsImF0dGVtcHROdW1iZXIiLCJvcHRpb25zIiwicmV0cmllc0xlZnQiLCJyZXRyaWVzIiwiaXNOZXR3b3JrRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJpbmNsdWRlcyIsInBSZXRyeSIsImlucHV0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbkZhaWxlZEF0dGVtcHQiLCJvcGVyYXRpb24iLCJhdHRlbXB0IiwiVHlwZUVycm9yIiwic3RvcCIsIm1haW5FcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/p-retry/index.js\n");

/***/ })

};
;